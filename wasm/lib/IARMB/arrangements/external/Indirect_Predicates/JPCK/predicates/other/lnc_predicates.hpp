/****************************************************************************
* Indirect predicates for geometric constructions					        *
*                                                                           *
* Consiglio Nazionale delle Ricerche                                        *
* Istituto di Matematica Applicata e Tecnologie Informatiche                *
* Sezione di Genova                                                         * 
* IMATI-GE / CNR                                                            * 
*                                                                           *
* Authors: Marco Attene                                                     * 
* Copyright(C) 2019: IMATI-GE / CNR                                         * 
* All rights reserved.                                                      * 
*                                                                           *
* This program is free software; you can redistribute it and/or modify      * 
* it under the terms of the GNU Lesser General Public License as published  * 
* by the Free Software Foundation; either version 3 of the License, or (at  * 
* your option) any later version.                                           * 
*                                                                           *
* This program is distributed in the hope that it will be useful, but       * 
* WITHOUT ANY WARRANTY; without even the implied warranty of                * 
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser  * 
* General Public License for more details.                                  * 
*                                                                           *
* You should have received a copy of the GNU Lesser General Public License  * 
* along with this program.  If not, see http://www.gnu.org/licenses/.       *
*                                                                           *
****************************************************************************/ 

/* This code was generated automatically. Do not edit unless you exactly   */
/* know what you are doing!                                                */

#include "implicit_point.h"

#pragma intrinsic(fabs)

// Uncomment the following to activate overflow/underflow checks
#define CHECK_FOR_XYZERFLOWS

inline int orient3d_LEEE_filtered(double p1x, double p1y, double p1z, double p2x, double p2y, double p2z, double pt, double qx, double qy, double qz, double rx, double ry, double rz, double sx, double sy, double sz)
{
	const double pvx = p2x - p1x;
	const double pvxt = pvx * pt;
	const double px = p1x + pvxt;
	const double pvy = p2y - p1y;
	const double pvyt = pvy * pt;
	const double py = p1y + pvyt;
	const double pvz = p2z - p1z;
	const double pvzt = pvz * pt;
	const double pz = p1z + pvzt;
	const double qx_px = qx - px;
	const double qy_py = qy - py;
	const double rx_px = rx - px;
	const double ry_py = ry - py;
	const double rz_pz = rz - pz;
	const double qz_pz = qz - pz;
	const double sx_px = sx - px;
	const double sy_py = sy - py;
	const double sz_pz = sz - pz;
	const double tmp_a = qx_px * ry_py;
	const double tmp_b = qy_py * rx_px;
	const double m01 = tmp_a - tmp_b;
	const double tmq_a = qx_px * rz_pz;
	const double tmq_b = qz_pz * rx_px;
	const double m02 = tmq_a - tmq_b;
	const double tmr_a = qy_py * rz_pz;
	const double tmr_b = qz_pz * ry_py;
	const double m12 = tmr_a - tmr_b;
	const double mt1 = m01 * sz_pz;
	const double mt2 = m02 * sy_py;
	const double mt3 = m12 * sx_px;
	const double mtt = mt1 - mt2;
	const double m012 = mtt + mt3;

	double _tmp_fabs;

	double max_var = 0.0;
	if ((_tmp_fabs = fabs(p1x)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(p1y)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(p1z)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(pt)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(qx)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(qy)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(qz)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(rx)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(ry)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(rz)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(sx)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(sy)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(sz)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(pvx)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(pvy)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(pvz)) > max_var) max_var = _tmp_fabs;
	double epsilon = max_var;
	epsilon *= epsilon;
	epsilon *= epsilon;
	epsilon *= max_var;
	epsilon *= max_var;
	epsilon *= 1.718625242119744e-13;
	if (m012 > epsilon) return IP_Sign::POSITIVE;
	if (-m012 > epsilon) return IP_Sign::NEGATIVE;
	return Filtered_Sign::UNCERTAIN;
}

inline int orient3d_LEEE_interval(interval_number p1x, interval_number p1y, interval_number p1z, interval_number p2x, interval_number p2y, interval_number p2z, interval_number pt, interval_number qx, interval_number qy, interval_number qz, interval_number rx, interval_number ry, interval_number rz, interval_number sx, interval_number sy, interval_number sz)
{
	setFPUModeToRoundUP();
	const interval_number pvx(p2x - p1x);
	const interval_number pvxt(pvx * pt);
	const interval_number px(p1x + pvxt);
	const interval_number pvy(p2y - p1y);
	const interval_number pvyt(pvy * pt);
	const interval_number py(p1y + pvyt);
	const interval_number pvz(p2z - p1z);
	const interval_number pvzt(pvz * pt);
	const interval_number pz(p1z + pvzt);
	const interval_number qx_px(qx - px);
	const interval_number qy_py(qy - py);
	const interval_number rx_px(rx - px);
	const interval_number ry_py(ry - py);
	const interval_number rz_pz(rz - pz);
	const interval_number qz_pz(qz - pz);
	const interval_number sx_px(sx - px);
	const interval_number sy_py(sy - py);
	const interval_number sz_pz(sz - pz);
	const interval_number tmp_a(qx_px * ry_py);
	const interval_number tmp_b(qy_py * rx_px);
	const interval_number m01(tmp_a - tmp_b);
	const interval_number tmq_a(qx_px * rz_pz);
	const interval_number tmq_b(qz_pz * rx_px);
	const interval_number m02(tmq_a - tmq_b);
	const interval_number tmr_a(qy_py * rz_pz);
	const interval_number tmr_b(qz_pz * ry_py);
	const interval_number m12(tmr_a - tmr_b);
	const interval_number mt1(m01 * sz_pz);
	const interval_number mt2(m02 * sy_py);
	const interval_number mt3(m12 * sx_px);
	const interval_number mtt(mt1 - mt2);
	const interval_number m012(mtt + mt3);
	setFPUModeToRoundNEAR();

	if (!m012.signIsReliable()) return Filtered_Sign::UNCERTAIN;
	return m012.sign();
}

inline int orient3d_LEEE_bigfloat(bigfloat p1x, bigfloat p1y, bigfloat p1z, bigfloat p2x, bigfloat p2y, bigfloat p2z, bigfloat pt, bigfloat qx, bigfloat qy, bigfloat qz, bigfloat rx, bigfloat ry, bigfloat rz, bigfloat sx, bigfloat sy, bigfloat sz)
{
	const bigfloat pvx(p2x - p1x);
	const bigfloat pvxt(pvx * pt);
	const bigfloat px(p1x + pvxt);
	const bigfloat pvy(p2y - p1y);
	const bigfloat pvyt(pvy * pt);
	const bigfloat py(p1y + pvyt);
	const bigfloat pvz(p2z - p1z);
	const bigfloat pvzt(pvz * pt);
	const bigfloat pz(p1z + pvzt);
	const bigfloat qx_px(qx - px);
	const bigfloat qy_py(qy - py);
	const bigfloat rx_px(rx - px);
	const bigfloat ry_py(ry - py);
	const bigfloat rz_pz(rz - pz);
	const bigfloat qz_pz(qz - pz);
	const bigfloat sx_px(sx - px);
	const bigfloat sy_py(sy - py);
	const bigfloat sz_pz(sz - pz);
	const bigfloat tmp_a(qx_px * ry_py);
	const bigfloat tmp_b(qy_py * rx_px);
	const bigfloat m01(tmp_a - tmp_b);
	const bigfloat tmq_a(qx_px * rz_pz);
	const bigfloat tmq_b(qz_pz * rx_px);
	const bigfloat m02(tmq_a - tmq_b);
	const bigfloat tmr_a(qy_py * rz_pz);
	const bigfloat tmr_b(qz_pz * ry_py);
	const bigfloat m12(tmr_a - tmr_b);
	const bigfloat mt1(m01 * sz_pz);
	const bigfloat mt2(m02 * sy_py);
	const bigfloat mt3(m12 * sx_px);
	const bigfloat mtt(mt1 - mt2);
	const bigfloat m012(mtt + mt3);
	return sgn(m012);
}

inline int orient3d_LEEE_exact(double p1x, double p1y, double p1z, double p2x, double p2y, double p2z, double pt, double qx, double qy, double qz, double rx, double ry, double rz, double sx, double sy, double sz)
{
	double pvx[2];
	expansionObject::two_Diff(p2x, p1x, pvx);
	double pvxt[4];
	expansionObject::Two_One_Prod(pvx, pt, pvxt);
	double px[5];
	int px_len = expansionObject::Gen_Sum(1, &p1x, 4, pvxt, px);
	double pvy[2];
	expansionObject::two_Diff(p2y, p1y, pvy);
	double pvyt[4];
	expansionObject::Two_One_Prod(pvy, pt, pvyt);
	double py[5];
	int py_len = expansionObject::Gen_Sum(1, &p1y, 4, pvyt, py);
	double pvz[2];
	expansionObject::two_Diff(p2z, p1z, pvz);
	double pvzt[4];
	expansionObject::Two_One_Prod(pvz, pt, pvzt);
	double pz[5];
	int pz_len = expansionObject::Gen_Sum(1, &p1z, 4, pvzt, pz);
	double qx_px[6];
	int qx_px_len = expansionObject::Gen_Diff(1, &qx, px_len, px, qx_px);
	double qy_py[6];
	int qy_py_len = expansionObject::Gen_Diff(1, &qy, py_len, py, qy_py);
	double rx_px[6];
	int rx_px_len = expansionObject::Gen_Diff(1, &rx, px_len, px, rx_px);
	double ry_py[6];
	int ry_py_len = expansionObject::Gen_Diff(1, &ry, py_len, py, ry_py);
	double rz_pz[6];
	int rz_pz_len = expansionObject::Gen_Diff(1, &rz, pz_len, pz, rz_pz);
	double qz_pz[6];
	int qz_pz_len = expansionObject::Gen_Diff(1, &qz, pz_len, pz, qz_pz);
	double sx_px[6];
	int sx_px_len = expansionObject::Gen_Diff(1, &sx, px_len, px, sx_px);
	double sy_py[6];
	int sy_py_len = expansionObject::Gen_Diff(1, &sy, py_len, py, sy_py);
	double sz_pz[6];
	int sz_pz_len = expansionObject::Gen_Diff(1, &sz, pz_len, pz, sz_pz);
	double tmp_a[72];
	int tmp_a_len = expansionObject::Gen_Product(qx_px_len, qx_px, ry_py_len, ry_py, tmp_a);
	double tmp_b[72];
	int tmp_b_len = expansionObject::Gen_Product(qy_py_len, qy_py, rx_px_len, rx_px, tmp_b);
	double m01_p[128], * m01 = m01_p;
	int m01_len = expansionObject::Gen_Diff_With_PreAlloc(tmp_a_len, tmp_a, tmp_b_len, tmp_b, &m01, 128);
	double tmq_a[72];
	int tmq_a_len = expansionObject::Gen_Product(qx_px_len, qx_px, rz_pz_len, rz_pz, tmq_a);
	double tmq_b[72];
	int tmq_b_len = expansionObject::Gen_Product(qz_pz_len, qz_pz, rx_px_len, rx_px, tmq_b);
	double m02_p[128], * m02 = m02_p;
	int m02_len = expansionObject::Gen_Diff_With_PreAlloc(tmq_a_len, tmq_a, tmq_b_len, tmq_b, &m02, 128);
	double tmr_a[72];
	int tmr_a_len = expansionObject::Gen_Product(qy_py_len, qy_py, rz_pz_len, rz_pz, tmr_a);
	double tmr_b[72];
	int tmr_b_len = expansionObject::Gen_Product(qz_pz_len, qz_pz, ry_py_len, ry_py, tmr_b);
	double m12_p[128], * m12 = m12_p;
	int m12_len = expansionObject::Gen_Diff_With_PreAlloc(tmr_a_len, tmr_a, tmr_b_len, tmr_b, &m12, 128);
	double mt1_p[128], * mt1 = mt1_p;
	int mt1_len = expansionObject::Gen_Product_With_PreAlloc(m01_len, m01, sz_pz_len, sz_pz, &mt1, 128);
	double mt2_p[128], * mt2 = mt2_p;
	int mt2_len = expansionObject::Gen_Product_With_PreAlloc(m02_len, m02, sy_py_len, sy_py, &mt2, 128);
	double mt3_p[128], * mt3 = mt3_p;
	int mt3_len = expansionObject::Gen_Product_With_PreAlloc(m12_len, m12, sx_px_len, sx_px, &mt3, 128);
	double mtt_p[128], * mtt = mtt_p;
	int mtt_len = expansionObject::Gen_Diff_With_PreAlloc(mt1_len, mt1, mt2_len, mt2, &mtt, 128);
	double m012_p[128], * m012 = m012_p;
	int m012_len = expansionObject::Gen_Sum_With_PreAlloc(mtt_len, mtt, mt3_len, mt3, &m012, 128);

	double return_value = m012[m012_len - 1];
	if (m012_p != m012) FreeDoubles(m012);
	if (mtt_p != mtt) FreeDoubles(mtt);
	if (mt3_p != mt3) FreeDoubles(mt3);
	if (mt2_p != mt2) FreeDoubles(mt2);
	if (mt1_p != mt1) FreeDoubles(mt1);
	if (m12_p != m12) FreeDoubles(m12);
	if (m02_p != m02) FreeDoubles(m02);
	if (m01_p != m01) FreeDoubles(m01);

	if (return_value > 0) return IP_Sign::POSITIVE;
	if (return_value < 0) return IP_Sign::NEGATIVE;
	if (return_value == 0) return IP_Sign::ZERO;
	return IP_Sign::UNDEFINED;
}

inline int orient3d_LEEE(double p1x, double p1y, double p1z, double p2x, double p2y, double p2z, double pt, double qx, double qy, double qz, double rx, double ry, double rz, double sx, double sy, double sz)
{
	int ret;
	ret = orient3d_LEEE_filtered(p1x, p1y, p1z, p2x, p2y, p2z, pt, qx, qy, qz, rx, ry, rz, sx, sy, sz);
	if (ret != Filtered_Sign::UNCERTAIN) return ret;
	ret = orient3d_LEEE_interval(p1x, p1y, p1z, p2x, p2y, p2z, pt, qx, qy, qz, rx, ry, rz, sx, sy, sz);
	if (ret != Filtered_Sign::UNCERTAIN) return ret;
	return orient3d_LEEE_exact(p1x, p1y, p1z, p2x, p2y, p2z, pt, qx, qy, qz, rx, ry, rz, sx, sy, sz);
}

inline int orient3d_LLEE_filtered(double p1x, double p1y, double p1z, double p2x, double p2y, double p2z, double pt, double q1x, double q1y, double q1z, double q2x, double q2y, double q2z, double qt, double rx, double ry, double rz, double sx, double sy, double sz)
{
	const double pvx = p2x - p1x;
	const double pvxt = pvx * pt;
	const double px = p1x + pvxt;
	const double pvy = p2y - p1y;
	const double pvyt = pvy * pt;
	const double py = p1y + pvyt;
	const double pvz = p2z - p1z;
	const double pvzt = pvz * pt;
	const double pz = p1z + pvzt;
	const double qvx = q2x - q1x;
	const double qvxt = qvx * qt;
	const double qx = q1x + qvxt;
	const double qvy = q2y - q1y;
	const double qvyt = qvy * qt;
	const double qy = q1y + qvyt;
	const double qvz = q2z - q1z;
	const double qvzt = qvz * qt;
	const double qz = q1z + qvzt;
	const double qx_px = qx - px;
	const double qy_py = qy - py;
	const double rx_px = rx - px;
	const double ry_py = ry - py;
	const double rz_pz = rz - pz;
	const double qz_pz = qz - pz;
	const double sx_px = sx - px;
	const double sy_py = sy - py;
	const double sz_pz = sz - pz;
	const double tmp_a = qx_px * ry_py;
	const double tmp_b = qy_py * rx_px;
	const double m01 = tmp_a - tmp_b;
	const double tmq_a = qx_px * rz_pz;
	const double tmq_b = qz_pz * rx_px;
	const double m02 = tmq_a - tmq_b;
	const double tmr_a = qy_py * rz_pz;
	const double tmr_b = qz_pz * ry_py;
	const double m12 = tmr_a - tmr_b;
	const double mt1 = m01 * sz_pz;
	const double mt2 = m02 * sy_py;
	const double mt3 = m12 * sx_px;
	const double mtt = mt1 - mt2;
	const double m012 = mtt + mt3;

	double _tmp_fabs;

	double max_var = 0.0;
	if ((_tmp_fabs = fabs(p1x)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(p1y)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(p1z)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(pt)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(q1x)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(q1y)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(q1z)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(qt)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(rx)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(ry)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(rz)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(sx)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(sy)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(sz)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(pvx)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(pvy)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(pvz)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(qvx)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(qvy)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(qvz)) > max_var) max_var = _tmp_fabs;
	double epsilon = max_var;
	epsilon *= epsilon;
	epsilon *= epsilon;
	epsilon *= max_var;
	epsilon *= max_var;
	epsilon *= 2.495781359357355e-13;
	if (m012 > epsilon) return IP_Sign::POSITIVE;
	if (-m012 > epsilon) return IP_Sign::NEGATIVE;
	return Filtered_Sign::UNCERTAIN;
}

inline int orient3d_LLEE_interval(interval_number p1x, interval_number p1y, interval_number p1z, interval_number p2x, interval_number p2y, interval_number p2z, interval_number pt, interval_number q1x, interval_number q1y, interval_number q1z, interval_number q2x, interval_number q2y, interval_number q2z, interval_number qt, interval_number rx, interval_number ry, interval_number rz, interval_number sx, interval_number sy, interval_number sz)
{
	setFPUModeToRoundUP();
	const interval_number pvx(p2x - p1x);
	const interval_number pvxt(pvx * pt);
	const interval_number px(p1x + pvxt);
	const interval_number pvy(p2y - p1y);
	const interval_number pvyt(pvy * pt);
	const interval_number py(p1y + pvyt);
	const interval_number pvz(p2z - p1z);
	const interval_number pvzt(pvz * pt);
	const interval_number pz(p1z + pvzt);
	const interval_number qvx(q2x - q1x);
	const interval_number qvxt(qvx * qt);
	const interval_number qx(q1x + qvxt);
	const interval_number qvy(q2y - q1y);
	const interval_number qvyt(qvy * qt);
	const interval_number qy(q1y + qvyt);
	const interval_number qvz(q2z - q1z);
	const interval_number qvzt(qvz * qt);
	const interval_number qz(q1z + qvzt);
	const interval_number qx_px(qx - px);
	const interval_number qy_py(qy - py);
	const interval_number rx_px(rx - px);
	const interval_number ry_py(ry - py);
	const interval_number rz_pz(rz - pz);
	const interval_number qz_pz(qz - pz);
	const interval_number sx_px(sx - px);
	const interval_number sy_py(sy - py);
	const interval_number sz_pz(sz - pz);
	const interval_number tmp_a(qx_px * ry_py);
	const interval_number tmp_b(qy_py * rx_px);
	const interval_number m01(tmp_a - tmp_b);
	const interval_number tmq_a(qx_px * rz_pz);
	const interval_number tmq_b(qz_pz * rx_px);
	const interval_number m02(tmq_a - tmq_b);
	const interval_number tmr_a(qy_py * rz_pz);
	const interval_number tmr_b(qz_pz * ry_py);
	const interval_number m12(tmr_a - tmr_b);
	const interval_number mt1(m01 * sz_pz);
	const interval_number mt2(m02 * sy_py);
	const interval_number mt3(m12 * sx_px);
	const interval_number mtt(mt1 - mt2);
	const interval_number m012(mtt + mt3);
	setFPUModeToRoundNEAR();

	if (!m012.signIsReliable()) return Filtered_Sign::UNCERTAIN;
	return m012.sign();
}

inline int orient3d_LLEE_bigfloat(bigfloat p1x, bigfloat p1y, bigfloat p1z, bigfloat p2x, bigfloat p2y, bigfloat p2z, bigfloat pt, bigfloat q1x, bigfloat q1y, bigfloat q1z, bigfloat q2x, bigfloat q2y, bigfloat q2z, bigfloat qt, bigfloat rx, bigfloat ry, bigfloat rz, bigfloat sx, bigfloat sy, bigfloat sz)
{
	const bigfloat pvx(p2x - p1x);
	const bigfloat pvxt(pvx * pt);
	const bigfloat px(p1x + pvxt);
	const bigfloat pvy(p2y - p1y);
	const bigfloat pvyt(pvy * pt);
	const bigfloat py(p1y + pvyt);
	const bigfloat pvz(p2z - p1z);
	const bigfloat pvzt(pvz * pt);
	const bigfloat pz(p1z + pvzt);
	const bigfloat qvx(q2x - q1x);
	const bigfloat qvxt(qvx * qt);
	const bigfloat qx(q1x + qvxt);
	const bigfloat qvy(q2y - q1y);
	const bigfloat qvyt(qvy * qt);
	const bigfloat qy(q1y + qvyt);
	const bigfloat qvz(q2z - q1z);
	const bigfloat qvzt(qvz * qt);
	const bigfloat qz(q1z + qvzt);
	const bigfloat qx_px(qx - px);
	const bigfloat qy_py(qy - py);
	const bigfloat rx_px(rx - px);
	const bigfloat ry_py(ry - py);
	const bigfloat rz_pz(rz - pz);
	const bigfloat qz_pz(qz - pz);
	const bigfloat sx_px(sx - px);
	const bigfloat sy_py(sy - py);
	const bigfloat sz_pz(sz - pz);
	const bigfloat tmp_a(qx_px * ry_py);
	const bigfloat tmp_b(qy_py * rx_px);
	const bigfloat m01(tmp_a - tmp_b);
	const bigfloat tmq_a(qx_px * rz_pz);
	const bigfloat tmq_b(qz_pz * rx_px);
	const bigfloat m02(tmq_a - tmq_b);
	const bigfloat tmr_a(qy_py * rz_pz);
	const bigfloat tmr_b(qz_pz * ry_py);
	const bigfloat m12(tmr_a - tmr_b);
	const bigfloat mt1(m01 * sz_pz);
	const bigfloat mt2(m02 * sy_py);
	const bigfloat mt3(m12 * sx_px);
	const bigfloat mtt(mt1 - mt2);
	const bigfloat m012(mtt + mt3);
	return sgn(m012);
}

inline int orient3d_LLEE_exact(double p1x, double p1y, double p1z, double p2x, double p2y, double p2z, double pt, double q1x, double q1y, double q1z, double q2x, double q2y, double q2z, double qt, double rx, double ry, double rz, double sx, double sy, double sz)
{
	double pvx[2];
	expansionObject::two_Diff(p2x, p1x, pvx);
	double pvxt[4];
	expansionObject::Two_One_Prod(pvx, pt, pvxt);
	double px[5];
	int px_len = expansionObject::Gen_Sum(1, &p1x, 4, pvxt, px);
	double pvy[2];
	expansionObject::two_Diff(p2y, p1y, pvy);
	double pvyt[4];
	expansionObject::Two_One_Prod(pvy, pt, pvyt);
	double py[5];
	int py_len = expansionObject::Gen_Sum(1, &p1y, 4, pvyt, py);
	double pvz[2];
	expansionObject::two_Diff(p2z, p1z, pvz);
	double pvzt[4];
	expansionObject::Two_One_Prod(pvz, pt, pvzt);
	double pz[5];
	int pz_len = expansionObject::Gen_Sum(1, &p1z, 4, pvzt, pz);
	double qvx[2];
	expansionObject::two_Diff(q2x, q1x, qvx);
	double qvxt[4];
	expansionObject::Two_One_Prod(qvx, qt, qvxt);
	double qx[5];
	int qx_len = expansionObject::Gen_Sum(1, &q1x, 4, qvxt, qx);
	double qvy[2];
	expansionObject::two_Diff(q2y, q1y, qvy);
	double qvyt[4];
	expansionObject::Two_One_Prod(qvy, qt, qvyt);
	double qy[5];
	int qy_len = expansionObject::Gen_Sum(1, &q1y, 4, qvyt, qy);
	double qvz[2];
	expansionObject::two_Diff(q2z, q1z, qvz);
	double qvzt[4];
	expansionObject::Two_One_Prod(qvz, qt, qvzt);
	double qz[5];
	int qz_len = expansionObject::Gen_Sum(1, &q1z, 4, qvzt, qz);
	double qx_px[10];
	int qx_px_len = expansionObject::Gen_Diff(qx_len, qx, px_len, px, qx_px);
	double qy_py[10];
	int qy_py_len = expansionObject::Gen_Diff(qy_len, qy, py_len, py, qy_py);
	double rx_px[6];
	int rx_px_len = expansionObject::Gen_Diff(1, &rx, px_len, px, rx_px);
	double ry_py[6];
	int ry_py_len = expansionObject::Gen_Diff(1, &ry, py_len, py, ry_py);
	double rz_pz[6];
	int rz_pz_len = expansionObject::Gen_Diff(1, &rz, pz_len, pz, rz_pz);
	double qz_pz[10];
	int qz_pz_len = expansionObject::Gen_Diff(qz_len, qz, pz_len, pz, qz_pz);
	double sx_px[6];
	int sx_px_len = expansionObject::Gen_Diff(1, &sx, px_len, px, sx_px);
	double sy_py[6];
	int sy_py_len = expansionObject::Gen_Diff(1, &sy, py_len, py, sy_py);
	double sz_pz[6];
	int sz_pz_len = expansionObject::Gen_Diff(1, &sz, pz_len, pz, sz_pz);
	double tmp_a[120];
	int tmp_a_len = expansionObject::Gen_Product(qx_px_len, qx_px, ry_py_len, ry_py, tmp_a);
	double tmp_b[120];
	int tmp_b_len = expansionObject::Gen_Product(qy_py_len, qy_py, rx_px_len, rx_px, tmp_b);
	double m01_p[128], * m01 = m01_p;
	int m01_len = expansionObject::Gen_Diff_With_PreAlloc(tmp_a_len, tmp_a, tmp_b_len, tmp_b, &m01, 128);
	double tmq_a[120];
	int tmq_a_len = expansionObject::Gen_Product(qx_px_len, qx_px, rz_pz_len, rz_pz, tmq_a);
	double tmq_b[120];
	int tmq_b_len = expansionObject::Gen_Product(qz_pz_len, qz_pz, rx_px_len, rx_px, tmq_b);
	double m02_p[128], * m02 = m02_p;
	int m02_len = expansionObject::Gen_Diff_With_PreAlloc(tmq_a_len, tmq_a, tmq_b_len, tmq_b, &m02, 128);
	double tmr_a[120];
	int tmr_a_len = expansionObject::Gen_Product(qy_py_len, qy_py, rz_pz_len, rz_pz, tmr_a);
	double tmr_b[120];
	int tmr_b_len = expansionObject::Gen_Product(qz_pz_len, qz_pz, ry_py_len, ry_py, tmr_b);
	double m12_p[128], * m12 = m12_p;
	int m12_len = expansionObject::Gen_Diff_With_PreAlloc(tmr_a_len, tmr_a, tmr_b_len, tmr_b, &m12, 128);
	double mt1_p[128], * mt1 = mt1_p;
	int mt1_len = expansionObject::Gen_Product_With_PreAlloc(m01_len, m01, sz_pz_len, sz_pz, &mt1, 128);
	double mt2_p[128], * mt2 = mt2_p;
	int mt2_len = expansionObject::Gen_Product_With_PreAlloc(m02_len, m02, sy_py_len, sy_py, &mt2, 128);
	double mt3_p[128], * mt3 = mt3_p;
	int mt3_len = expansionObject::Gen_Product_With_PreAlloc(m12_len, m12, sx_px_len, sx_px, &mt3, 128);
	double mtt_p[128], * mtt = mtt_p;
	int mtt_len = expansionObject::Gen_Diff_With_PreAlloc(mt1_len, mt1, mt2_len, mt2, &mtt, 128);
	double m012_p[128], * m012 = m012_p;
	int m012_len = expansionObject::Gen_Sum_With_PreAlloc(mtt_len, mtt, mt3_len, mt3, &m012, 128);

	double return_value = m012[m012_len - 1];
	if (m012_p != m012) FreeDoubles(m012);
	if (mtt_p != mtt) FreeDoubles(mtt);
	if (mt3_p != mt3) FreeDoubles(mt3);
	if (mt2_p != mt2) FreeDoubles(mt2);
	if (mt1_p != mt1) FreeDoubles(mt1);
	if (m12_p != m12) FreeDoubles(m12);
	if (m02_p != m02) FreeDoubles(m02);
	if (m01_p != m01) FreeDoubles(m01);

	if (return_value > 0) return IP_Sign::POSITIVE;
	if (return_value < 0) return IP_Sign::NEGATIVE;
	if (return_value == 0) return IP_Sign::ZERO;
	return IP_Sign::UNDEFINED;
}

inline int orient3d_LLEE(double p1x, double p1y, double p1z, double p2x, double p2y, double p2z, double pt, double q1x, double q1y, double q1z, double q2x, double q2y, double q2z, double qt, double rx, double ry, double rz, double sx, double sy, double sz)
{
	int ret;
	ret = orient3d_LLEE_filtered(p1x, p1y, p1z, p2x, p2y, p2z, pt, q1x, q1y, q1z, q2x, q2y, q2z, qt, rx, ry, rz, sx, sy, sz);
	if (ret != Filtered_Sign::UNCERTAIN) return ret;
	ret = orient3d_LLEE_interval(p1x, p1y, p1z, p2x, p2y, p2z, pt, q1x, q1y, q1z, q2x, q2y, q2z, qt, rx, ry, rz, sx, sy, sz);
	if (ret != Filtered_Sign::UNCERTAIN) return ret;
	return orient3d_LLEE_exact(p1x, p1y, p1z, p2x, p2y, p2z, pt, q1x, q1y, q1z, q2x, q2y, q2z, qt, rx, ry, rz, sx, sy, sz);
}

inline int orient3d_LLLE_filtered(double p1x, double p1y, double p1z, double p2x, double p2y, double p2z, double pt, double q1x, double q1y, double q1z, double q2x, double q2y, double q2z, double qt, double r1x, double r1y, double r1z, double r2x, double r2y, double r2z, double rt, double sx, double sy, double sz)
{
	const double pvx = p2x - p1x;
	const double pvxt = pvx * pt;
	const double px = p1x + pvxt;
	const double pvy = p2y - p1y;
	const double pvyt = pvy * pt;
	const double py = p1y + pvyt;
	const double pvz = p2z - p1z;
	const double pvzt = pvz * pt;
	const double pz = p1z + pvzt;
	const double qvx = q2x - q1x;
	const double qvxt = qvx * qt;
	const double qx = q1x + qvxt;
	const double qvy = q2y - q1y;
	const double qvyt = qvy * qt;
	const double qy = q1y + qvyt;
	const double qvz = q2z - q1z;
	const double qvzt = qvz * qt;
	const double qz = q1z + qvzt;
	const double rvx = r2x - r1x;
	const double rvxt = rvx * rt;
	const double rx = r1x + rvxt;
	const double rvy = r2y - r1y;
	const double rvyt = rvy * rt;
	const double ry = r1y + rvyt;
	const double rvz = r2z - r1z;
	const double rvzt = rvz * rt;
	const double rz = r1z + rvzt;
	const double qx_px = qx - px;
	const double qy_py = qy - py;
	const double rx_px = rx - px;
	const double ry_py = ry - py;
	const double rz_pz = rz - pz;
	const double qz_pz = qz - pz;
	const double sx_px = sx - px;
	const double sy_py = sy - py;
	const double sz_pz = sz - pz;
	const double tmp_a = qx_px * ry_py;
	const double tmp_b = qy_py * rx_px;
	const double m01 = tmp_a - tmp_b;
	const double tmq_a = qx_px * rz_pz;
	const double tmq_b = qz_pz * rx_px;
	const double m02 = tmq_a - tmq_b;
	const double tmr_a = qy_py * rz_pz;
	const double tmr_b = qz_pz * ry_py;
	const double m12 = tmr_a - tmr_b;
	const double mt1 = m01 * sz_pz;
	const double mt2 = m02 * sy_py;
	const double mt3 = m12 * sx_px;
	const double mtt = mt1 - mt2;
	const double m012 = mtt + mt3;

	double _tmp_fabs;

	double max_var = 0.0;
	if ((_tmp_fabs = fabs(p1x)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(p1y)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(p1z)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(pt)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(q1x)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(q1y)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(q1z)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(qt)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(r1x)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(r1y)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(r1z)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(rt)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(sx)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(sy)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(sz)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(pvx)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(pvy)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(pvz)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(qvx)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(qvy)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(qvz)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(rvx)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(rvy)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(rvz)) > max_var) max_var = _tmp_fabs;
	double epsilon = max_var;
	epsilon *= epsilon;
	epsilon *= epsilon;
	epsilon *= max_var;
	epsilon *= max_var;
	epsilon *= 3.836930773104546e-13;
	if (m012 > epsilon) return IP_Sign::POSITIVE;
	if (-m012 > epsilon) return IP_Sign::NEGATIVE;
	return Filtered_Sign::UNCERTAIN;
}

inline int orient3d_LLLE_interval(interval_number p1x, interval_number p1y, interval_number p1z, interval_number p2x, interval_number p2y, interval_number p2z, interval_number pt, interval_number q1x, interval_number q1y, interval_number q1z, interval_number q2x, interval_number q2y, interval_number q2z, interval_number qt, interval_number r1x, interval_number r1y, interval_number r1z, interval_number r2x, interval_number r2y, interval_number r2z, interval_number rt, interval_number sx, interval_number sy, interval_number sz)
{
	setFPUModeToRoundUP();
	const interval_number pvx(p2x - p1x);
	const interval_number pvxt(pvx * pt);
	const interval_number px(p1x + pvxt);
	const interval_number pvy(p2y - p1y);
	const interval_number pvyt(pvy * pt);
	const interval_number py(p1y + pvyt);
	const interval_number pvz(p2z - p1z);
	const interval_number pvzt(pvz * pt);
	const interval_number pz(p1z + pvzt);
	const interval_number qvx(q2x - q1x);
	const interval_number qvxt(qvx * qt);
	const interval_number qx(q1x + qvxt);
	const interval_number qvy(q2y - q1y);
	const interval_number qvyt(qvy * qt);
	const interval_number qy(q1y + qvyt);
	const interval_number qvz(q2z - q1z);
	const interval_number qvzt(qvz * qt);
	const interval_number qz(q1z + qvzt);
	const interval_number rvx(r2x - r1x);
	const interval_number rvxt(rvx * rt);
	const interval_number rx(r1x + rvxt);
	const interval_number rvy(r2y - r1y);
	const interval_number rvyt(rvy * rt);
	const interval_number ry(r1y + rvyt);
	const interval_number rvz(r2z - r1z);
	const interval_number rvzt(rvz * rt);
	const interval_number rz(r1z + rvzt);
	const interval_number qx_px(qx - px);
	const interval_number qy_py(qy - py);
	const interval_number rx_px(rx - px);
	const interval_number ry_py(ry - py);
	const interval_number rz_pz(rz - pz);
	const interval_number qz_pz(qz - pz);
	const interval_number sx_px(sx - px);
	const interval_number sy_py(sy - py);
	const interval_number sz_pz(sz - pz);
	const interval_number tmp_a(qx_px * ry_py);
	const interval_number tmp_b(qy_py * rx_px);
	const interval_number m01(tmp_a - tmp_b);
	const interval_number tmq_a(qx_px * rz_pz);
	const interval_number tmq_b(qz_pz * rx_px);
	const interval_number m02(tmq_a - tmq_b);
	const interval_number tmr_a(qy_py * rz_pz);
	const interval_number tmr_b(qz_pz * ry_py);
	const interval_number m12(tmr_a - tmr_b);
	const interval_number mt1(m01 * sz_pz);
	const interval_number mt2(m02 * sy_py);
	const interval_number mt3(m12 * sx_px);
	const interval_number mtt(mt1 - mt2);
	const interval_number m012(mtt + mt3);
	setFPUModeToRoundNEAR();

	if (!m012.signIsReliable()) return Filtered_Sign::UNCERTAIN;
	return m012.sign();
}

inline int orient3d_LLLE_bigfloat(bigfloat p1x, bigfloat p1y, bigfloat p1z, bigfloat p2x, bigfloat p2y, bigfloat p2z, bigfloat pt, bigfloat q1x, bigfloat q1y, bigfloat q1z, bigfloat q2x, bigfloat q2y, bigfloat q2z, bigfloat qt, bigfloat r1x, bigfloat r1y, bigfloat r1z, bigfloat r2x, bigfloat r2y, bigfloat r2z, bigfloat rt, bigfloat sx, bigfloat sy, bigfloat sz)
{
	const bigfloat pvx(p2x - p1x);
	const bigfloat pvxt(pvx * pt);
	const bigfloat px(p1x + pvxt);
	const bigfloat pvy(p2y - p1y);
	const bigfloat pvyt(pvy * pt);
	const bigfloat py(p1y + pvyt);
	const bigfloat pvz(p2z - p1z);
	const bigfloat pvzt(pvz * pt);
	const bigfloat pz(p1z + pvzt);
	const bigfloat qvx(q2x - q1x);
	const bigfloat qvxt(qvx * qt);
	const bigfloat qx(q1x + qvxt);
	const bigfloat qvy(q2y - q1y);
	const bigfloat qvyt(qvy * qt);
	const bigfloat qy(q1y + qvyt);
	const bigfloat qvz(q2z - q1z);
	const bigfloat qvzt(qvz * qt);
	const bigfloat qz(q1z + qvzt);
	const bigfloat rvx(r2x - r1x);
	const bigfloat rvxt(rvx * rt);
	const bigfloat rx(r1x + rvxt);
	const bigfloat rvy(r2y - r1y);
	const bigfloat rvyt(rvy * rt);
	const bigfloat ry(r1y + rvyt);
	const bigfloat rvz(r2z - r1z);
	const bigfloat rvzt(rvz * rt);
	const bigfloat rz(r1z + rvzt);
	const bigfloat qx_px(qx - px);
	const bigfloat qy_py(qy - py);
	const bigfloat rx_px(rx - px);
	const bigfloat ry_py(ry - py);
	const bigfloat rz_pz(rz - pz);
	const bigfloat qz_pz(qz - pz);
	const bigfloat sx_px(sx - px);
	const bigfloat sy_py(sy - py);
	const bigfloat sz_pz(sz - pz);
	const bigfloat tmp_a(qx_px * ry_py);
	const bigfloat tmp_b(qy_py * rx_px);
	const bigfloat m01(tmp_a - tmp_b);
	const bigfloat tmq_a(qx_px * rz_pz);
	const bigfloat tmq_b(qz_pz * rx_px);
	const bigfloat m02(tmq_a - tmq_b);
	const bigfloat tmr_a(qy_py * rz_pz);
	const bigfloat tmr_b(qz_pz * ry_py);
	const bigfloat m12(tmr_a - tmr_b);
	const bigfloat mt1(m01 * sz_pz);
	const bigfloat mt2(m02 * sy_py);
	const bigfloat mt3(m12 * sx_px);
	const bigfloat mtt(mt1 - mt2);
	const bigfloat m012(mtt + mt3);
	return sgn(m012);
}

inline int orient3d_LLLE_exact(double p1x, double p1y, double p1z, double p2x, double p2y, double p2z, double pt, double q1x, double q1y, double q1z, double q2x, double q2y, double q2z, double qt, double r1x, double r1y, double r1z, double r2x, double r2y, double r2z, double rt, double sx, double sy, double sz)
{
	double pvx[2];
	expansionObject::two_Diff(p2x, p1x, pvx);
	double pvxt[4];
	expansionObject::Two_One_Prod(pvx, pt, pvxt);
	double px[5];
	int px_len = expansionObject::Gen_Sum(1, &p1x, 4, pvxt, px);
	double pvy[2];
	expansionObject::two_Diff(p2y, p1y, pvy);
	double pvyt[4];
	expansionObject::Two_One_Prod(pvy, pt, pvyt);
	double py[5];
	int py_len = expansionObject::Gen_Sum(1, &p1y, 4, pvyt, py);
	double pvz[2];
	expansionObject::two_Diff(p2z, p1z, pvz);
	double pvzt[4];
	expansionObject::Two_One_Prod(pvz, pt, pvzt);
	double pz[5];
	int pz_len = expansionObject::Gen_Sum(1, &p1z, 4, pvzt, pz);
	double qvx[2];
	expansionObject::two_Diff(q2x, q1x, qvx);
	double qvxt[4];
	expansionObject::Two_One_Prod(qvx, qt, qvxt);
	double qx[5];
	int qx_len = expansionObject::Gen_Sum(1, &q1x, 4, qvxt, qx);
	double qvy[2];
	expansionObject::two_Diff(q2y, q1y, qvy);
	double qvyt[4];
	expansionObject::Two_One_Prod(qvy, qt, qvyt);
	double qy[5];
	int qy_len = expansionObject::Gen_Sum(1, &q1y, 4, qvyt, qy);
	double qvz[2];
	expansionObject::two_Diff(q2z, q1z, qvz);
	double qvzt[4];
	expansionObject::Two_One_Prod(qvz, qt, qvzt);
	double qz[5];
	int qz_len = expansionObject::Gen_Sum(1, &q1z, 4, qvzt, qz);
	double rvx[2];
	expansionObject::two_Diff(r2x, r1x, rvx);
	double rvxt[4];
	expansionObject::Two_One_Prod(rvx, rt, rvxt);
	double rx[5];
	int rx_len = expansionObject::Gen_Sum(1, &r1x, 4, rvxt, rx);
	double rvy[2];
	expansionObject::two_Diff(r2y, r1y, rvy);
	double rvyt[4];
	expansionObject::Two_One_Prod(rvy, rt, rvyt);
	double ry[5];
	int ry_len = expansionObject::Gen_Sum(1, &r1y, 4, rvyt, ry);
	double rvz[2];
	expansionObject::two_Diff(r2z, r1z, rvz);
	double rvzt[4];
	expansionObject::Two_One_Prod(rvz, rt, rvzt);
	double rz[5];
	int rz_len = expansionObject::Gen_Sum(1, &r1z, 4, rvzt, rz);
	double qx_px[10];
	int qx_px_len = expansionObject::Gen_Diff(qx_len, qx, px_len, px, qx_px);
	double qy_py[10];
	int qy_py_len = expansionObject::Gen_Diff(qy_len, qy, py_len, py, qy_py);
	double rx_px[10];
	int rx_px_len = expansionObject::Gen_Diff(rx_len, rx, px_len, px, rx_px);
	double ry_py[10];
	int ry_py_len = expansionObject::Gen_Diff(ry_len, ry, py_len, py, ry_py);
	double rz_pz[10];
	int rz_pz_len = expansionObject::Gen_Diff(rz_len, rz, pz_len, pz, rz_pz);
	double qz_pz[10];
	int qz_pz_len = expansionObject::Gen_Diff(qz_len, qz, pz_len, pz, qz_pz);
	double sx_px[6];
	int sx_px_len = expansionObject::Gen_Diff(1, &sx, px_len, px, sx_px);
	double sy_py[6];
	int sy_py_len = expansionObject::Gen_Diff(1, &sy, py_len, py, sy_py);
	double sz_pz[6];
	int sz_pz_len = expansionObject::Gen_Diff(1, &sz, pz_len, pz, sz_pz);
	double tmp_a_p[64], * tmp_a = tmp_a_p;
	int tmp_a_len = expansionObject::Gen_Product_With_PreAlloc(qx_px_len, qx_px, ry_py_len, ry_py, &tmp_a, 64);
	double tmp_b_p[64], * tmp_b = tmp_b_p;
	int tmp_b_len = expansionObject::Gen_Product_With_PreAlloc(qy_py_len, qy_py, rx_px_len, rx_px, &tmp_b, 64);
	double m01_p[64], * m01 = m01_p;
	int m01_len = expansionObject::Gen_Diff_With_PreAlloc(tmp_a_len, tmp_a, tmp_b_len, tmp_b, &m01, 64);
	double tmq_a_p[64], * tmq_a = tmq_a_p;
	int tmq_a_len = expansionObject::Gen_Product_With_PreAlloc(qx_px_len, qx_px, rz_pz_len, rz_pz, &tmq_a, 64);
	double tmq_b_p[64], * tmq_b = tmq_b_p;
	int tmq_b_len = expansionObject::Gen_Product_With_PreAlloc(qz_pz_len, qz_pz, rx_px_len, rx_px, &tmq_b, 64);
	double m02_p[64], * m02 = m02_p;
	int m02_len = expansionObject::Gen_Diff_With_PreAlloc(tmq_a_len, tmq_a, tmq_b_len, tmq_b, &m02, 64);
	double tmr_a_p[64], * tmr_a = tmr_a_p;
	int tmr_a_len = expansionObject::Gen_Product_With_PreAlloc(qy_py_len, qy_py, rz_pz_len, rz_pz, &tmr_a, 64);
	double tmr_b_p[64], * tmr_b = tmr_b_p;
	int tmr_b_len = expansionObject::Gen_Product_With_PreAlloc(qz_pz_len, qz_pz, ry_py_len, ry_py, &tmr_b, 64);
	double m12_p[64], * m12 = m12_p;
	int m12_len = expansionObject::Gen_Diff_With_PreAlloc(tmr_a_len, tmr_a, tmr_b_len, tmr_b, &m12, 64);
	double mt1_p[64], * mt1 = mt1_p;
	int mt1_len = expansionObject::Gen_Product_With_PreAlloc(m01_len, m01, sz_pz_len, sz_pz, &mt1, 64);
	double mt2_p[64], * mt2 = mt2_p;
	int mt2_len = expansionObject::Gen_Product_With_PreAlloc(m02_len, m02, sy_py_len, sy_py, &mt2, 64);
	double mt3_p[64], * mt3 = mt3_p;
	int mt3_len = expansionObject::Gen_Product_With_PreAlloc(m12_len, m12, sx_px_len, sx_px, &mt3, 64);
	double mtt_p[64], * mtt = mtt_p;
	int mtt_len = expansionObject::Gen_Diff_With_PreAlloc(mt1_len, mt1, mt2_len, mt2, &mtt, 64);
	double m012_p[64], * m012 = m012_p;
	int m012_len = expansionObject::Gen_Sum_With_PreAlloc(mtt_len, mtt, mt3_len, mt3, &m012, 64);

	double return_value = m012[m012_len - 1];
	if (m012_p != m012) FreeDoubles(m012);
	if (mtt_p != mtt) FreeDoubles(mtt);
	if (mt3_p != mt3) FreeDoubles(mt3);
	if (mt2_p != mt2) FreeDoubles(mt2);
	if (mt1_p != mt1) FreeDoubles(mt1);
	if (m12_p != m12) FreeDoubles(m12);
	if (tmr_b_p != tmr_b) FreeDoubles(tmr_b);
	if (tmr_a_p != tmr_a) FreeDoubles(tmr_a);
	if (m02_p != m02) FreeDoubles(m02);
	if (tmq_b_p != tmq_b) FreeDoubles(tmq_b);
	if (tmq_a_p != tmq_a) FreeDoubles(tmq_a);
	if (m01_p != m01) FreeDoubles(m01);
	if (tmp_b_p != tmp_b) FreeDoubles(tmp_b);
	if (tmp_a_p != tmp_a) FreeDoubles(tmp_a);

	if (return_value > 0) return IP_Sign::POSITIVE;
	if (return_value < 0) return IP_Sign::NEGATIVE;
	if (return_value == 0) return IP_Sign::ZERO;
	return IP_Sign::UNDEFINED;
}

inline int orient3d_LLLE(double p1x, double p1y, double p1z, double p2x, double p2y, double p2z, double pt, double q1x, double q1y, double q1z, double q2x, double q2y, double q2z, double qt, double r1x, double r1y, double r1z, double r2x, double r2y, double r2z, double rt, double sx, double sy, double sz)
{
	int ret;
	ret = orient3d_LLLE_filtered(p1x, p1y, p1z, p2x, p2y, p2z, pt, q1x, q1y, q1z, q2x, q2y, q2z, qt, r1x, r1y, r1z, r2x, r2y, r2z, rt, sx, sy, sz);
	if (ret != Filtered_Sign::UNCERTAIN) return ret;
	ret = orient3d_LLLE_interval(p1x, p1y, p1z, p2x, p2y, p2z, pt, q1x, q1y, q1z, q2x, q2y, q2z, qt, r1x, r1y, r1z, r2x, r2y, r2z, rt, sx, sy, sz);
	if (ret != Filtered_Sign::UNCERTAIN) return ret;
	return orient3d_LLLE_exact(p1x, p1y, p1z, p2x, p2y, p2z, pt, q1x, q1y, q1z, q2x, q2y, q2z, qt, r1x, r1y, r1z, r2x, r2y, r2z, rt, sx, sy, sz);
}

inline int orient3d_LLLL_filtered(double p1x, double p1y, double p1z, double p2x, double p2y, double p2z, double pt, double q1x, double q1y, double q1z, double q2x, double q2y, double q2z, double qt, double r1x, double r1y, double r1z, double r2x, double r2y, double r2z, double rt, double s1x, double s1y, double s1z, double s2x, double s2y, double s2z, double st)
{
	const double pvx = p2x - p1x;
	const double pvxt = pvx * pt;
	const double px = p1x + pvxt;
	const double pvy = p2y - p1y;
	const double pvyt = pvy * pt;
	const double py = p1y + pvyt;
	const double pvz = p2z - p1z;
	const double pvzt = pvz * pt;
	const double pz = p1z + pvzt;
	const double qvx = q2x - q1x;
	const double qvxt = qvx * qt;
	const double qx = q1x + qvxt;
	const double qvy = q2y - q1y;
	const double qvyt = qvy * qt;
	const double qy = q1y + qvyt;
	const double qvz = q2z - q1z;
	const double qvzt = qvz * qt;
	const double qz = q1z + qvzt;
	const double rvx = r2x - r1x;
	const double rvxt = rvx * rt;
	const double rx = r1x + rvxt;
	const double rvy = r2y - r1y;
	const double rvyt = rvy * rt;
	const double ry = r1y + rvyt;
	const double rvz = r2z - r1z;
	const double rvzt = rvz * rt;
	const double rz = r1z + rvzt;
	const double svx = s2x - s1x;
	const double svxt = svx * st;
	const double sx = s1x + svxt;
	const double svy = s2y - s1y;
	const double svyt = svy * st;
	const double sy = s1y + svyt;
	const double svz = s2z - s1z;
	const double svzt = svz * st;
	const double sz = s1z + svzt;
	const double qx_px = qx - px;
	const double qy_py = qy - py;
	const double rx_px = rx - px;
	const double ry_py = ry - py;
	const double rz_pz = rz - pz;
	const double qz_pz = qz - pz;
	const double sx_px = sx - px;
	const double sy_py = sy - py;
	const double sz_pz = sz - pz;
	const double tmp_a = qx_px * ry_py;
	const double tmp_b = qy_py * rx_px;
	const double m01 = tmp_a - tmp_b;
	const double tmq_a = qx_px * rz_pz;
	const double tmq_b = qz_pz * rx_px;
	const double m02 = tmq_a - tmq_b;
	const double tmr_a = qy_py * rz_pz;
	const double tmr_b = qz_pz * ry_py;
	const double m12 = tmr_a - tmr_b;
	const double mt1 = m01 * sz_pz;
	const double mt2 = m02 * sy_py;
	const double mt3 = m12 * sx_px;
	const double mtt = mt1 - mt2;
	const double m012 = mtt + mt3;

	double _tmp_fabs;

	double max_var = 0.0;
	if ((_tmp_fabs = fabs(p1x)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(p1y)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(p1z)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(pt)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(q1x)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(q1y)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(q1z)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(qt)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(r1x)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(r1y)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(r1z)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(rt)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(s1x)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(s1y)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(s1z)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(st)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(pvx)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(pvy)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(pvz)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(qvx)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(qvy)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(qvz)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(rvx)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(rvy)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(rvz)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(svx)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(svy)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(svz)) > max_var) max_var = _tmp_fabs;
	double epsilon = max_var;
	epsilon *= epsilon;
	epsilon *= epsilon;
	epsilon *= max_var;
	epsilon *= max_var;
	epsilon *= 5.68434188608081e-13;
	if (m012 > epsilon) return IP_Sign::POSITIVE;
	if (-m012 > epsilon) return IP_Sign::NEGATIVE;
	return Filtered_Sign::UNCERTAIN;
}

inline int orient3d_LLLL_interval(interval_number p1x, interval_number p1y, interval_number p1z, interval_number p2x, interval_number p2y, interval_number p2z, interval_number pt, interval_number q1x, interval_number q1y, interval_number q1z, interval_number q2x, interval_number q2y, interval_number q2z, interval_number qt, interval_number r1x, interval_number r1y, interval_number r1z, interval_number r2x, interval_number r2y, interval_number r2z, interval_number rt, interval_number s1x, interval_number s1y, interval_number s1z, interval_number s2x, interval_number s2y, interval_number s2z, interval_number st)
{
	setFPUModeToRoundUP();
	const interval_number pvx(p2x - p1x);
	const interval_number pvxt(pvx * pt);
	const interval_number px(p1x + pvxt);
	const interval_number pvy(p2y - p1y);
	const interval_number pvyt(pvy * pt);
	const interval_number py(p1y + pvyt);
	const interval_number pvz(p2z - p1z);
	const interval_number pvzt(pvz * pt);
	const interval_number pz(p1z + pvzt);
	const interval_number qvx(q2x - q1x);
	const interval_number qvxt(qvx * qt);
	const interval_number qx(q1x + qvxt);
	const interval_number qvy(q2y - q1y);
	const interval_number qvyt(qvy * qt);
	const interval_number qy(q1y + qvyt);
	const interval_number qvz(q2z - q1z);
	const interval_number qvzt(qvz * qt);
	const interval_number qz(q1z + qvzt);
	const interval_number rvx(r2x - r1x);
	const interval_number rvxt(rvx * rt);
	const interval_number rx(r1x + rvxt);
	const interval_number rvy(r2y - r1y);
	const interval_number rvyt(rvy * rt);
	const interval_number ry(r1y + rvyt);
	const interval_number rvz(r2z - r1z);
	const interval_number rvzt(rvz * rt);
	const interval_number rz(r1z + rvzt);
	const interval_number svx(s2x - s1x);
	const interval_number svxt(svx * st);
	const interval_number sx(s1x + svxt);
	const interval_number svy(s2y - s1y);
	const interval_number svyt(svy * st);
	const interval_number sy(s1y + svyt);
	const interval_number svz(s2z - s1z);
	const interval_number svzt(svz * st);
	const interval_number sz(s1z + svzt);
	const interval_number qx_px(qx - px);
	const interval_number qy_py(qy - py);
	const interval_number rx_px(rx - px);
	const interval_number ry_py(ry - py);
	const interval_number rz_pz(rz - pz);
	const interval_number qz_pz(qz - pz);
	const interval_number sx_px(sx - px);
	const interval_number sy_py(sy - py);
	const interval_number sz_pz(sz - pz);
	const interval_number tmp_a(qx_px * ry_py);
	const interval_number tmp_b(qy_py * rx_px);
	const interval_number m01(tmp_a - tmp_b);
	const interval_number tmq_a(qx_px * rz_pz);
	const interval_number tmq_b(qz_pz * rx_px);
	const interval_number m02(tmq_a - tmq_b);
	const interval_number tmr_a(qy_py * rz_pz);
	const interval_number tmr_b(qz_pz * ry_py);
	const interval_number m12(tmr_a - tmr_b);
	const interval_number mt1(m01 * sz_pz);
	const interval_number mt2(m02 * sy_py);
	const interval_number mt3(m12 * sx_px);
	const interval_number mtt(mt1 - mt2);
	const interval_number m012(mtt + mt3);
	setFPUModeToRoundNEAR();

	if (!m012.signIsReliable()) return Filtered_Sign::UNCERTAIN;
	return m012.sign();
}

inline int orient3d_LLLL_bigfloat(bigfloat p1x, bigfloat p1y, bigfloat p1z, bigfloat p2x, bigfloat p2y, bigfloat p2z, bigfloat pt, bigfloat q1x, bigfloat q1y, bigfloat q1z, bigfloat q2x, bigfloat q2y, bigfloat q2z, bigfloat qt, bigfloat r1x, bigfloat r1y, bigfloat r1z, bigfloat r2x, bigfloat r2y, bigfloat r2z, bigfloat rt, bigfloat s1x, bigfloat s1y, bigfloat s1z, bigfloat s2x, bigfloat s2y, bigfloat s2z, bigfloat st)
{
	const bigfloat pvx(p2x - p1x);
	const bigfloat pvxt(pvx * pt);
	const bigfloat px(p1x + pvxt);
	const bigfloat pvy(p2y - p1y);
	const bigfloat pvyt(pvy * pt);
	const bigfloat py(p1y + pvyt);
	const bigfloat pvz(p2z - p1z);
	const bigfloat pvzt(pvz * pt);
	const bigfloat pz(p1z + pvzt);
	const bigfloat qvx(q2x - q1x);
	const bigfloat qvxt(qvx * qt);
	const bigfloat qx(q1x + qvxt);
	const bigfloat qvy(q2y - q1y);
	const bigfloat qvyt(qvy * qt);
	const bigfloat qy(q1y + qvyt);
	const bigfloat qvz(q2z - q1z);
	const bigfloat qvzt(qvz * qt);
	const bigfloat qz(q1z + qvzt);
	const bigfloat rvx(r2x - r1x);
	const bigfloat rvxt(rvx * rt);
	const bigfloat rx(r1x + rvxt);
	const bigfloat rvy(r2y - r1y);
	const bigfloat rvyt(rvy * rt);
	const bigfloat ry(r1y + rvyt);
	const bigfloat rvz(r2z - r1z);
	const bigfloat rvzt(rvz * rt);
	const bigfloat rz(r1z + rvzt);
	const bigfloat svx(s2x - s1x);
	const bigfloat svxt(svx * st);
	const bigfloat sx(s1x + svxt);
	const bigfloat svy(s2y - s1y);
	const bigfloat svyt(svy * st);
	const bigfloat sy(s1y + svyt);
	const bigfloat svz(s2z - s1z);
	const bigfloat svzt(svz * st);
	const bigfloat sz(s1z + svzt);
	const bigfloat qx_px(qx - px);
	const bigfloat qy_py(qy - py);
	const bigfloat rx_px(rx - px);
	const bigfloat ry_py(ry - py);
	const bigfloat rz_pz(rz - pz);
	const bigfloat qz_pz(qz - pz);
	const bigfloat sx_px(sx - px);
	const bigfloat sy_py(sy - py);
	const bigfloat sz_pz(sz - pz);
	const bigfloat tmp_a(qx_px * ry_py);
	const bigfloat tmp_b(qy_py * rx_px);
	const bigfloat m01(tmp_a - tmp_b);
	const bigfloat tmq_a(qx_px * rz_pz);
	const bigfloat tmq_b(qz_pz * rx_px);
	const bigfloat m02(tmq_a - tmq_b);
	const bigfloat tmr_a(qy_py * rz_pz);
	const bigfloat tmr_b(qz_pz * ry_py);
	const bigfloat m12(tmr_a - tmr_b);
	const bigfloat mt1(m01 * sz_pz);
	const bigfloat mt2(m02 * sy_py);
	const bigfloat mt3(m12 * sx_px);
	const bigfloat mtt(mt1 - mt2);
	const bigfloat m012(mtt + mt3);
	return sgn(m012);
}

inline int orient3d_LLLL_exact(double p1x, double p1y, double p1z, double p2x, double p2y, double p2z, double pt, double q1x, double q1y, double q1z, double q2x, double q2y, double q2z, double qt, double r1x, double r1y, double r1z, double r2x, double r2y, double r2z, double rt, double s1x, double s1y, double s1z, double s2x, double s2y, double s2z, double st)
{
	double pvx[2];
	expansionObject::two_Diff(p2x, p1x, pvx);
	double pvxt[4];
	expansionObject::Two_One_Prod(pvx, pt, pvxt);
	double px[5];
	int px_len = expansionObject::Gen_Sum(1, &p1x, 4, pvxt, px);
	double pvy[2];
	expansionObject::two_Diff(p2y, p1y, pvy);
	double pvyt[4];
	expansionObject::Two_One_Prod(pvy, pt, pvyt);
	double py[5];
	int py_len = expansionObject::Gen_Sum(1, &p1y, 4, pvyt, py);
	double pvz[2];
	expansionObject::two_Diff(p2z, p1z, pvz);
	double pvzt[4];
	expansionObject::Two_One_Prod(pvz, pt, pvzt);
	double pz[5];
	int pz_len = expansionObject::Gen_Sum(1, &p1z, 4, pvzt, pz);
	double qvx[2];
	expansionObject::two_Diff(q2x, q1x, qvx);
	double qvxt[4];
	expansionObject::Two_One_Prod(qvx, qt, qvxt);
	double qx[5];
	int qx_len = expansionObject::Gen_Sum(1, &q1x, 4, qvxt, qx);
	double qvy[2];
	expansionObject::two_Diff(q2y, q1y, qvy);
	double qvyt[4];
	expansionObject::Two_One_Prod(qvy, qt, qvyt);
	double qy[5];
	int qy_len = expansionObject::Gen_Sum(1, &q1y, 4, qvyt, qy);
	double qvz[2];
	expansionObject::two_Diff(q2z, q1z, qvz);
	double qvzt[4];
	expansionObject::Two_One_Prod(qvz, qt, qvzt);
	double qz[5];
	int qz_len = expansionObject::Gen_Sum(1, &q1z, 4, qvzt, qz);
	double rvx[2];
	expansionObject::two_Diff(r2x, r1x, rvx);
	double rvxt[4];
	expansionObject::Two_One_Prod(rvx, rt, rvxt);
	double rx[5];
	int rx_len = expansionObject::Gen_Sum(1, &r1x, 4, rvxt, rx);
	double rvy[2];
	expansionObject::two_Diff(r2y, r1y, rvy);
	double rvyt[4];
	expansionObject::Two_One_Prod(rvy, rt, rvyt);
	double ry[5];
	int ry_len = expansionObject::Gen_Sum(1, &r1y, 4, rvyt, ry);
	double rvz[2];
	expansionObject::two_Diff(r2z, r1z, rvz);
	double rvzt[4];
	expansionObject::Two_One_Prod(rvz, rt, rvzt);
	double rz[5];
	int rz_len = expansionObject::Gen_Sum(1, &r1z, 4, rvzt, rz);
	double svx[2];
	expansionObject::two_Diff(s2x, s1x, svx);
	double svxt[4];
	expansionObject::Two_One_Prod(svx, st, svxt);
	double sx[5];
	int sx_len = expansionObject::Gen_Sum(1, &s1x, 4, svxt, sx);
	double svy[2];
	expansionObject::two_Diff(s2y, s1y, svy);
	double svyt[4];
	expansionObject::Two_One_Prod(svy, st, svyt);
	double sy[5];
	int sy_len = expansionObject::Gen_Sum(1, &s1y, 4, svyt, sy);
	double svz[2];
	expansionObject::two_Diff(s2z, s1z, svz);
	double svzt[4];
	expansionObject::Two_One_Prod(svz, st, svzt);
	double sz[5];
	int sz_len = expansionObject::Gen_Sum(1, &s1z, 4, svzt, sz);
	double qx_px[10];
	int qx_px_len = expansionObject::Gen_Diff(qx_len, qx, px_len, px, qx_px);
	double qy_py[10];
	int qy_py_len = expansionObject::Gen_Diff(qy_len, qy, py_len, py, qy_py);
	double rx_px[10];
	int rx_px_len = expansionObject::Gen_Diff(rx_len, rx, px_len, px, rx_px);
	double ry_py[10];
	int ry_py_len = expansionObject::Gen_Diff(ry_len, ry, py_len, py, ry_py);
	double rz_pz[10];
	int rz_pz_len = expansionObject::Gen_Diff(rz_len, rz, pz_len, pz, rz_pz);
	double qz_pz[10];
	int qz_pz_len = expansionObject::Gen_Diff(qz_len, qz, pz_len, pz, qz_pz);
	double sx_px[10];
	int sx_px_len = expansionObject::Gen_Diff(sx_len, sx, px_len, px, sx_px);
	double sy_py[10];
	int sy_py_len = expansionObject::Gen_Diff(sy_len, sy, py_len, py, sy_py);
	double sz_pz[10];
	int sz_pz_len = expansionObject::Gen_Diff(sz_len, sz, pz_len, pz, sz_pz);
	double tmp_a_p[64], * tmp_a = tmp_a_p;
	int tmp_a_len = expansionObject::Gen_Product_With_PreAlloc(qx_px_len, qx_px, ry_py_len, ry_py, &tmp_a, 64);
	double tmp_b_p[64], * tmp_b = tmp_b_p;
	int tmp_b_len = expansionObject::Gen_Product_With_PreAlloc(qy_py_len, qy_py, rx_px_len, rx_px, &tmp_b, 64);
	double m01_p[64], * m01 = m01_p;
	int m01_len = expansionObject::Gen_Diff_With_PreAlloc(tmp_a_len, tmp_a, tmp_b_len, tmp_b, &m01, 64);
	double tmq_a_p[64], * tmq_a = tmq_a_p;
	int tmq_a_len = expansionObject::Gen_Product_With_PreAlloc(qx_px_len, qx_px, rz_pz_len, rz_pz, &tmq_a, 64);
	double tmq_b_p[64], * tmq_b = tmq_b_p;
	int tmq_b_len = expansionObject::Gen_Product_With_PreAlloc(qz_pz_len, qz_pz, rx_px_len, rx_px, &tmq_b, 64);
	double m02_p[64], * m02 = m02_p;
	int m02_len = expansionObject::Gen_Diff_With_PreAlloc(tmq_a_len, tmq_a, tmq_b_len, tmq_b, &m02, 64);
	double tmr_a_p[64], * tmr_a = tmr_a_p;
	int tmr_a_len = expansionObject::Gen_Product_With_PreAlloc(qy_py_len, qy_py, rz_pz_len, rz_pz, &tmr_a, 64);
	double tmr_b_p[64], * tmr_b = tmr_b_p;
	int tmr_b_len = expansionObject::Gen_Product_With_PreAlloc(qz_pz_len, qz_pz, ry_py_len, ry_py, &tmr_b, 64);
	double m12_p[64], * m12 = m12_p;
	int m12_len = expansionObject::Gen_Diff_With_PreAlloc(tmr_a_len, tmr_a, tmr_b_len, tmr_b, &m12, 64);
	double mt1_p[64], * mt1 = mt1_p;
	int mt1_len = expansionObject::Gen_Product_With_PreAlloc(m01_len, m01, sz_pz_len, sz_pz, &mt1, 64);
	double mt2_p[64], * mt2 = mt2_p;
	int mt2_len = expansionObject::Gen_Product_With_PreAlloc(m02_len, m02, sy_py_len, sy_py, &mt2, 64);
	double mt3_p[64], * mt3 = mt3_p;
	int mt3_len = expansionObject::Gen_Product_With_PreAlloc(m12_len, m12, sx_px_len, sx_px, &mt3, 64);
	double mtt_p[64], * mtt = mtt_p;
	int mtt_len = expansionObject::Gen_Diff_With_PreAlloc(mt1_len, mt1, mt2_len, mt2, &mtt, 64);
	double m012_p[64], * m012 = m012_p;
	int m012_len = expansionObject::Gen_Sum_With_PreAlloc(mtt_len, mtt, mt3_len, mt3, &m012, 64);

	double return_value = m012[m012_len - 1];
	if (m012_p != m012) FreeDoubles(m012);
	if (mtt_p != mtt) FreeDoubles(mtt);
	if (mt3_p != mt3) FreeDoubles(mt3);
	if (mt2_p != mt2) FreeDoubles(mt2);
	if (mt1_p != mt1) FreeDoubles(mt1);
	if (m12_p != m12) FreeDoubles(m12);
	if (tmr_b_p != tmr_b) FreeDoubles(tmr_b);
	if (tmr_a_p != tmr_a) FreeDoubles(tmr_a);
	if (m02_p != m02) FreeDoubles(m02);
	if (tmq_b_p != tmq_b) FreeDoubles(tmq_b);
	if (tmq_a_p != tmq_a) FreeDoubles(tmq_a);
	if (m01_p != m01) FreeDoubles(m01);
	if (tmp_b_p != tmp_b) FreeDoubles(tmp_b);
	if (tmp_a_p != tmp_a) FreeDoubles(tmp_a);

	if (return_value > 0) return IP_Sign::POSITIVE;
	if (return_value < 0) return IP_Sign::NEGATIVE;
	if (return_value == 0) return IP_Sign::ZERO;
	return IP_Sign::UNDEFINED;
}

inline int orient3d_LLLL(double p1x, double p1y, double p1z, double p2x, double p2y, double p2z, double pt, double q1x, double q1y, double q1z, double q2x, double q2y, double q2z, double qt, double r1x, double r1y, double r1z, double r2x, double r2y, double r2z, double rt, double s1x, double s1y, double s1z, double s2x, double s2y, double s2z, double st)
{
	int ret;
	ret = orient3d_LLLL_filtered(p1x, p1y, p1z, p2x, p2y, p2z, pt, q1x, q1y, q1z, q2x, q2y, q2z, qt, r1x, r1y, r1z, r2x, r2y, r2z, rt, s1x, s1y, s1z, s2x, s2y, s2z, st);
	if (ret != Filtered_Sign::UNCERTAIN) return ret;
	ret = orient3d_LLLL_interval(p1x, p1y, p1z, p2x, p2y, p2z, pt, q1x, q1y, q1z, q2x, q2y, q2z, qt, r1x, r1y, r1z, r2x, r2y, r2z, rt, s1x, s1y, s1z, s2x, s2y, s2z, st);
	if (ret != Filtered_Sign::UNCERTAIN) return ret;
	return orient3d_LLLL_exact(p1x, p1y, p1z, p2x, p2y, p2z, pt, q1x, q1y, q1z, q2x, q2y, q2z, qt, r1x, r1y, r1z, r2x, r2y, r2z, rt, s1x, s1y, s1z, s2x, s2y, s2z, st);
}

inline int inSphere_LEEEE_filtered(double a1x, double a1y, double a1z, double a2x, double a2y, double a2z, double at, double bx, double by, double bz, double cx, double cy, double cz, double dx, double dy, double dz, double ex, double ey, double ez)
{
	const double avx = a2x - a1x;
	const double avxt = avx * at;
	const double ax = a1x + avxt;
	const double avy = a2y - a1y;
	const double avyt = avy * at;
	const double ay = a1y + avyt;
	const double avz = a2z - a1z;
	const double avzt = avz * at;
	const double az = a1z + avzt;
	const double aex = ax - ex;
	const double aey = ay - ey;
	const double aez = az - ez;
	const double bex = bx - ex;
	const double bey = by - ey;
	const double bez = bz - ez;
	const double cex = cx - ex;
	const double cey = cy - ey;
	const double cez = cz - ez;
	const double dex = dx - ex;
	const double dey = dy - ey;
	const double dez = dz - ez;
	const double aexbey = aex * bey;
	const double bexaey = bex * aey;
	const double ab = aexbey - bexaey;
	const double bexcey = bex * cey;
	const double cexbey = cex * bey;
	const double bc = bexcey - cexbey;
	const double cexdey = cex * dey;
	const double dexcey = dex * cey;
	const double cd = cexdey - dexcey;
	const double dexaey = dex * aey;
	const double aexdey = aex * dey;
	const double da = dexaey - aexdey;
	const double aexcey = aex * cey;
	const double cexaey = cex * aey;
	const double ac = aexcey - cexaey;
	const double bexdey = bex * dey;
	const double dexbey = dex * bey;
	const double bd = bexdey - dexbey;
	const double abc1 = aez * bc;
	const double abc2 = bez * ac;
	const double abc3 = cez * ab;
	const double abc4 = abc1 + abc3;
	const double abc = abc4 - abc2;
	const double bcd1 = bez * cd;
	const double bcd2 = cez * bd;
	const double bcd3 = dez * bc;
	const double bcd4 = bcd1 + bcd3;
	const double bcd = bcd4 - bcd2;
	const double cda1 = cez * da;
	const double cda2 = dez * ac;
	const double cda3 = aez * cd;
	const double cda4 = cda1 + cda3;
	const double cda = cda4 + cda2;
	const double dab1 = dez * ab;
	const double dab2 = aez * bd;
	const double dab3 = bez * da;
	const double dab4 = dab1 + dab3;
	const double dab = dab4 + dab2;
	const double al1 = aex * aex;
	const double al2 = aey * aey;
	const double al3 = aez * aez;
	const double al4 = al1 + al2;
	const double alift = al4 + al3;
	const double bl1 = bex * bex;
	const double bl2 = bey * bey;
	const double bl3 = bez * bez;
	const double bl4 = bl1 + bl2;
	const double blift = bl4 + bl3;
	const double cl1 = cex * cex;
	const double cl2 = cey * cey;
	const double cl3 = cez * cez;
	const double cl4 = cl1 + cl2;
	const double clift = cl4 + cl3;
	const double dl1 = dex * dex;
	const double dl2 = dey * dey;
	const double dl3 = dez * dez;
	const double dl4 = dl1 + dl2;
	const double dlift = dl4 + dl3;
	const double ds1 = dlift * abc;
	const double ds2 = clift * dab;
	const double dl = ds2 - ds1;
	const double dr1 = blift * cda;
	const double dr2 = alift * bcd;
	const double dr = dr2 - dr1;
	const double det = dl + dr;

	double _tmp_fabs;

	double max_var = 0.0;
	if ((_tmp_fabs = fabs(a1x)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(a1y)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(a1z)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(at)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(ex)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(ey)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(ez)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(avx)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(avy)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(avz)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(bex)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(bey)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(bez)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(cex)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(cey)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(cez)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(dex)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(dey)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(dez)) > max_var) max_var = _tmp_fabs;
	double epsilon = max_var;
	epsilon *= epsilon;
	epsilon *= epsilon;
	epsilon *= max_var;
	epsilon *= max_var;
	epsilon *= max_var;
	epsilon *= 5.295763827462003e-13;
	if (det > epsilon) return IP_Sign::POSITIVE;
	if (-det > epsilon) return IP_Sign::NEGATIVE;
	return Filtered_Sign::UNCERTAIN;
}

inline int inSphere_LEEEE_interval(interval_number a1x, interval_number a1y, interval_number a1z, interval_number a2x, interval_number a2y, interval_number a2z, interval_number at, interval_number bx, interval_number by, interval_number bz, interval_number cx, interval_number cy, interval_number cz, interval_number dx, interval_number dy, interval_number dz, interval_number ex, interval_number ey, interval_number ez)
{
	setFPUModeToRoundUP();
	const interval_number avx(a2x - a1x);
	const interval_number avxt(avx * at);
	const interval_number ax(a1x + avxt);
	const interval_number avy(a2y - a1y);
	const interval_number avyt(avy * at);
	const interval_number ay(a1y + avyt);
	const interval_number avz(a2z - a1z);
	const interval_number avzt(avz * at);
	const interval_number az(a1z + avzt);
	const interval_number aex(ax - ex);
	const interval_number aey(ay - ey);
	const interval_number aez(az - ez);
	const interval_number bex(bx - ex);
	const interval_number bey(by - ey);
	const interval_number bez(bz - ez);
	const interval_number cex(cx - ex);
	const interval_number cey(cy - ey);
	const interval_number cez(cz - ez);
	const interval_number dex(dx - ex);
	const interval_number dey(dy - ey);
	const interval_number dez(dz - ez);
	const interval_number aexbey(aex * bey);
	const interval_number bexaey(bex * aey);
	const interval_number ab(aexbey - bexaey);
	const interval_number bexcey(bex * cey);
	const interval_number cexbey(cex * bey);
	const interval_number bc(bexcey - cexbey);
	const interval_number cexdey(cex * dey);
	const interval_number dexcey(dex * cey);
	const interval_number cd(cexdey - dexcey);
	const interval_number dexaey(dex * aey);
	const interval_number aexdey(aex * dey);
	const interval_number da(dexaey - aexdey);
	const interval_number aexcey(aex * cey);
	const interval_number cexaey(cex * aey);
	const interval_number ac(aexcey - cexaey);
	const interval_number bexdey(bex * dey);
	const interval_number dexbey(dex * bey);
	const interval_number bd(bexdey - dexbey);
	const interval_number abc1(aez * bc);
	const interval_number abc2(bez * ac);
	const interval_number abc3(cez * ab);
	const interval_number abc4(abc1 + abc3);
	const interval_number abc(abc4 - abc2);
	const interval_number bcd1(bez * cd);
	const interval_number bcd2(cez * bd);
	const interval_number bcd3(dez * bc);
	const interval_number bcd4(bcd1 + bcd3);
	const interval_number bcd(bcd4 - bcd2);
	const interval_number cda1(cez * da);
	const interval_number cda2(dez * ac);
	const interval_number cda3(aez * cd);
	const interval_number cda4(cda1 + cda3);
	const interval_number cda(cda4 + cda2);
	const interval_number dab1(dez * ab);
	const interval_number dab2(aez * bd);
	const interval_number dab3(bez * da);
	const interval_number dab4(dab1 + dab3);
	const interval_number dab(dab4 + dab2);
	const interval_number al1(aex * aex);
	const interval_number al2(aey * aey);
	const interval_number al3(aez * aez);
	const interval_number al4(al1 + al2);
	const interval_number alift(al4 + al3);
	const interval_number bl1(bex * bex);
	const interval_number bl2(bey * bey);
	const interval_number bl3(bez * bez);
	const interval_number bl4(bl1 + bl2);
	const interval_number blift(bl4 + bl3);
	const interval_number cl1(cex * cex);
	const interval_number cl2(cey * cey);
	const interval_number cl3(cez * cez);
	const interval_number cl4(cl1 + cl2);
	const interval_number clift(cl4 + cl3);
	const interval_number dl1(dex * dex);
	const interval_number dl2(dey * dey);
	const interval_number dl3(dez * dez);
	const interval_number dl4(dl1 + dl2);
	const interval_number dlift(dl4 + dl3);
	const interval_number ds1(dlift * abc);
	const interval_number ds2(clift * dab);
	const interval_number dl(ds2 - ds1);
	const interval_number dr1(blift * cda);
	const interval_number dr2(alift * bcd);
	const interval_number dr(dr2 - dr1);
	const interval_number det(dl + dr);
	setFPUModeToRoundNEAR();

	if (!det.signIsReliable()) return Filtered_Sign::UNCERTAIN;
	return det.sign();
}

inline int inSphere_LEEEE_bigfloat(bigfloat a1x, bigfloat a1y, bigfloat a1z, bigfloat a2x, bigfloat a2y, bigfloat a2z, bigfloat at, bigfloat bx, bigfloat by, bigfloat bz, bigfloat cx, bigfloat cy, bigfloat cz, bigfloat dx, bigfloat dy, bigfloat dz, bigfloat ex, bigfloat ey, bigfloat ez)
{
	const bigfloat avx(a2x - a1x);
	const bigfloat avxt(avx * at);
	const bigfloat ax(a1x + avxt);
	const bigfloat avy(a2y - a1y);
	const bigfloat avyt(avy * at);
	const bigfloat ay(a1y + avyt);
	const bigfloat avz(a2z - a1z);
	const bigfloat avzt(avz * at);
	const bigfloat az(a1z + avzt);
	const bigfloat aex(ax - ex);
	const bigfloat aey(ay - ey);
	const bigfloat aez(az - ez);
	const bigfloat bex(bx - ex);
	const bigfloat bey(by - ey);
	const bigfloat bez(bz - ez);
	const bigfloat cex(cx - ex);
	const bigfloat cey(cy - ey);
	const bigfloat cez(cz - ez);
	const bigfloat dex(dx - ex);
	const bigfloat dey(dy - ey);
	const bigfloat dez(dz - ez);
	const bigfloat aexbey(aex * bey);
	const bigfloat bexaey(bex * aey);
	const bigfloat ab(aexbey - bexaey);
	const bigfloat bexcey(bex * cey);
	const bigfloat cexbey(cex * bey);
	const bigfloat bc(bexcey - cexbey);
	const bigfloat cexdey(cex * dey);
	const bigfloat dexcey(dex * cey);
	const bigfloat cd(cexdey - dexcey);
	const bigfloat dexaey(dex * aey);
	const bigfloat aexdey(aex * dey);
	const bigfloat da(dexaey - aexdey);
	const bigfloat aexcey(aex * cey);
	const bigfloat cexaey(cex * aey);
	const bigfloat ac(aexcey - cexaey);
	const bigfloat bexdey(bex * dey);
	const bigfloat dexbey(dex * bey);
	const bigfloat bd(bexdey - dexbey);
	const bigfloat abc1(aez * bc);
	const bigfloat abc2(bez * ac);
	const bigfloat abc3(cez * ab);
	const bigfloat abc4(abc1 + abc3);
	const bigfloat abc(abc4 - abc2);
	const bigfloat bcd1(bez * cd);
	const bigfloat bcd2(cez * bd);
	const bigfloat bcd3(dez * bc);
	const bigfloat bcd4(bcd1 + bcd3);
	const bigfloat bcd(bcd4 - bcd2);
	const bigfloat cda1(cez * da);
	const bigfloat cda2(dez * ac);
	const bigfloat cda3(aez * cd);
	const bigfloat cda4(cda1 + cda3);
	const bigfloat cda(cda4 + cda2);
	const bigfloat dab1(dez * ab);
	const bigfloat dab2(aez * bd);
	const bigfloat dab3(bez * da);
	const bigfloat dab4(dab1 + dab3);
	const bigfloat dab(dab4 + dab2);
	const bigfloat al1(aex * aex);
	const bigfloat al2(aey * aey);
	const bigfloat al3(aez * aez);
	const bigfloat al4(al1 + al2);
	const bigfloat alift(al4 + al3);
	const bigfloat bl1(bex * bex);
	const bigfloat bl2(bey * bey);
	const bigfloat bl3(bez * bez);
	const bigfloat bl4(bl1 + bl2);
	const bigfloat blift(bl4 + bl3);
	const bigfloat cl1(cex * cex);
	const bigfloat cl2(cey * cey);
	const bigfloat cl3(cez * cez);
	const bigfloat cl4(cl1 + cl2);
	const bigfloat clift(cl4 + cl3);
	const bigfloat dl1(dex * dex);
	const bigfloat dl2(dey * dey);
	const bigfloat dl3(dez * dez);
	const bigfloat dl4(dl1 + dl2);
	const bigfloat dlift(dl4 + dl3);
	const bigfloat ds1(dlift * abc);
	const bigfloat ds2(clift * dab);
	const bigfloat dl(ds2 - ds1);
	const bigfloat dr1(blift * cda);
	const bigfloat dr2(alift * bcd);
	const bigfloat dr(dr2 - dr1);
	const bigfloat det(dl + dr);
	return sgn(det);
}

inline int inSphere_LEEEE_exact(double a1x, double a1y, double a1z, double a2x, double a2y, double a2z, double at, double bx, double by, double bz, double cx, double cy, double cz, double dx, double dy, double dz, double ex, double ey, double ez)
{
	double avx[2];
	expansionObject::two_Diff(a2x, a1x, avx);
	double avxt[4];
	expansionObject::Two_One_Prod(avx, at, avxt);
	double ax[5];
	int ax_len = expansionObject::Gen_Sum(1, &a1x, 4, avxt, ax);
	double avy[2];
	expansionObject::two_Diff(a2y, a1y, avy);
	double avyt[4];
	expansionObject::Two_One_Prod(avy, at, avyt);
	double ay[5];
	int ay_len = expansionObject::Gen_Sum(1, &a1y, 4, avyt, ay);
	double avz[2];
	expansionObject::two_Diff(a2z, a1z, avz);
	double avzt[4];
	expansionObject::Two_One_Prod(avz, at, avzt);
	double az[5];
	int az_len = expansionObject::Gen_Sum(1, &a1z, 4, avzt, az);
	double aex[6];
	int aex_len = expansionObject::Gen_Diff(ax_len, ax, 1, &ex, aex);
	double aey[6];
	int aey_len = expansionObject::Gen_Diff(ay_len, ay, 1, &ey, aey);
	double aez[6];
	int aez_len = expansionObject::Gen_Diff(az_len, az, 1, &ez, aez);
	double bex[2];
	expansionObject::two_Diff(bx, ex, bex);
	double bey[2];
	expansionObject::two_Diff(by, ey, bey);
	double bez[2];
	expansionObject::two_Diff(bz, ez, bez);
	double cex[2];
	expansionObject::two_Diff(cx, ex, cex);
	double cey[2];
	expansionObject::two_Diff(cy, ey, cey);
	double cez[2];
	expansionObject::two_Diff(cz, ez, cez);
	double dex[2];
	expansionObject::two_Diff(dx, ex, dex);
	double dey[2];
	expansionObject::two_Diff(dy, ey, dey);
	double dez[2];
	expansionObject::two_Diff(dz, ez, dez);
	double aexbey[24];
	int aexbey_len = expansionObject::Gen_Product(aex_len, aex, 2, bey, aexbey);
	double bexaey[24];
	int bexaey_len = expansionObject::Gen_Product(2, bex, aey_len, aey, bexaey);
	double ab_p[32], * ab = ab_p;
	int ab_len = expansionObject::Gen_Diff_With_PreAlloc(aexbey_len, aexbey, bexaey_len, bexaey, &ab, 32);
	double bexcey[8];
	int bexcey_len = expansionObject::Gen_Product(2, bex, 2, cey, bexcey);
	double cexbey[8];
	int cexbey_len = expansionObject::Gen_Product(2, cex, 2, bey, cexbey);
	double bc[16];
	int bc_len = expansionObject::Gen_Diff(bexcey_len, bexcey, cexbey_len, cexbey, bc);
	double cexdey[8];
	int cexdey_len = expansionObject::Gen_Product(2, cex, 2, dey, cexdey);
	double dexcey[8];
	int dexcey_len = expansionObject::Gen_Product(2, dex, 2, cey, dexcey);
	double cd[16];
	int cd_len = expansionObject::Gen_Diff(cexdey_len, cexdey, dexcey_len, dexcey, cd);
	double dexaey[24];
	int dexaey_len = expansionObject::Gen_Product(2, dex, aey_len, aey, dexaey);
	double aexdey[24];
	int aexdey_len = expansionObject::Gen_Product(aex_len, aex, 2, dey, aexdey);
	double da_p[32], * da = da_p;
	int da_len = expansionObject::Gen_Diff_With_PreAlloc(dexaey_len, dexaey, aexdey_len, aexdey, &da, 32);
	double aexcey[24];
	int aexcey_len = expansionObject::Gen_Product(aex_len, aex, 2, cey, aexcey);
	double cexaey[24];
	int cexaey_len = expansionObject::Gen_Product(2, cex, aey_len, aey, cexaey);
	double ac_p[32], * ac = ac_p;
	int ac_len = expansionObject::Gen_Diff_With_PreAlloc(aexcey_len, aexcey, cexaey_len, cexaey, &ac, 32);
	double bexdey[8];
	int bexdey_len = expansionObject::Gen_Product(2, bex, 2, dey, bexdey);
	double dexbey[8];
	int dexbey_len = expansionObject::Gen_Product(2, dex, 2, bey, dexbey);
	double bd[16];
	int bd_len = expansionObject::Gen_Diff(bexdey_len, bexdey, dexbey_len, dexbey, bd);
	double abc1_p[32], * abc1 = abc1_p;
	int abc1_len = expansionObject::Gen_Product_With_PreAlloc(aez_len, aez, bc_len, bc, &abc1, 32);
	double abc2_p[32], * abc2 = abc2_p;
	int abc2_len = expansionObject::Gen_Product_With_PreAlloc(2, bez, ac_len, ac, &abc2, 32);
	double abc3_p[32], * abc3 = abc3_p;
	int abc3_len = expansionObject::Gen_Product_With_PreAlloc(2, cez, ab_len, ab, &abc3, 32);
	double abc4_p[32], * abc4 = abc4_p;
	int abc4_len = expansionObject::Gen_Sum_With_PreAlloc(abc1_len, abc1, abc3_len, abc3, &abc4, 32);
	double abc_p[32], * abc = abc_p;
	int abc_len = expansionObject::Gen_Diff_With_PreAlloc(abc4_len, abc4, abc2_len, abc2, &abc, 32);
	double bcd1_p[32], * bcd1 = bcd1_p;
	int bcd1_len = expansionObject::Gen_Product_With_PreAlloc(2, bez, cd_len, cd, &bcd1, 32);
	double bcd2_p[32], * bcd2 = bcd2_p;
	int bcd2_len = expansionObject::Gen_Product_With_PreAlloc(2, cez, bd_len, bd, &bcd2, 32);
	double bcd3_p[32], * bcd3 = bcd3_p;
	int bcd3_len = expansionObject::Gen_Product_With_PreAlloc(2, dez, bc_len, bc, &bcd3, 32);
	double bcd4_p[32], * bcd4 = bcd4_p;
	int bcd4_len = expansionObject::Gen_Sum_With_PreAlloc(bcd1_len, bcd1, bcd3_len, bcd3, &bcd4, 32);
	double bcd_p[32], * bcd = bcd_p;
	int bcd_len = expansionObject::Gen_Diff_With_PreAlloc(bcd4_len, bcd4, bcd2_len, bcd2, &bcd, 32);
	double cda1_p[32], * cda1 = cda1_p;
	int cda1_len = expansionObject::Gen_Product_With_PreAlloc(2, cez, da_len, da, &cda1, 32);
	double cda2_p[32], * cda2 = cda2_p;
	int cda2_len = expansionObject::Gen_Product_With_PreAlloc(2, dez, ac_len, ac, &cda2, 32);
	double cda3_p[32], * cda3 = cda3_p;
	int cda3_len = expansionObject::Gen_Product_With_PreAlloc(aez_len, aez, cd_len, cd, &cda3, 32);
	double cda4_p[32], * cda4 = cda4_p;
	int cda4_len = expansionObject::Gen_Sum_With_PreAlloc(cda1_len, cda1, cda3_len, cda3, &cda4, 32);
	double cda_p[32], * cda = cda_p;
	int cda_len = expansionObject::Gen_Sum_With_PreAlloc(cda4_len, cda4, cda2_len, cda2, &cda, 32);
	double dab1_p[32], * dab1 = dab1_p;
	int dab1_len = expansionObject::Gen_Product_With_PreAlloc(2, dez, ab_len, ab, &dab1, 32);
	double dab2_p[32], * dab2 = dab2_p;
	int dab2_len = expansionObject::Gen_Product_With_PreAlloc(aez_len, aez, bd_len, bd, &dab2, 32);
	double dab3_p[32], * dab3 = dab3_p;
	int dab3_len = expansionObject::Gen_Product_With_PreAlloc(2, bez, da_len, da, &dab3, 32);
	double dab4_p[32], * dab4 = dab4_p;
	int dab4_len = expansionObject::Gen_Sum_With_PreAlloc(dab1_len, dab1, dab3_len, dab3, &dab4, 32);
	double dab_p[32], * dab = dab_p;
	int dab_len = expansionObject::Gen_Sum_With_PreAlloc(dab4_len, dab4, dab2_len, dab2, &dab, 32);
	double al1_p[32], * al1 = al1_p;
	int al1_len = expansionObject::Gen_Product_With_PreAlloc(aex_len, aex, aex_len, aex, &al1, 32);
	double al2_p[32], * al2 = al2_p;
	int al2_len = expansionObject::Gen_Product_With_PreAlloc(aey_len, aey, aey_len, aey, &al2, 32);
	double al3_p[32], * al3 = al3_p;
	int al3_len = expansionObject::Gen_Product_With_PreAlloc(aez_len, aez, aez_len, aez, &al3, 32);
	double al4_p[32], * al4 = al4_p;
	int al4_len = expansionObject::Gen_Sum_With_PreAlloc(al1_len, al1, al2_len, al2, &al4, 32);
	double alift_p[32], * alift = alift_p;
	int alift_len = expansionObject::Gen_Sum_With_PreAlloc(al4_len, al4, al3_len, al3, &alift, 32);
	double bl1[8];
	int bl1_len = expansionObject::Gen_Product(2, bex, 2, bex, bl1);
	double bl2[8];
	int bl2_len = expansionObject::Gen_Product(2, bey, 2, bey, bl2);
	double bl3[8];
	int bl3_len = expansionObject::Gen_Product(2, bez, 2, bez, bl3);
	double bl4[16];
	int bl4_len = expansionObject::Gen_Sum(bl1_len, bl1, bl2_len, bl2, bl4);
	double blift[24];
	int blift_len = expansionObject::Gen_Sum(bl4_len, bl4, bl3_len, bl3, blift);
	double cl1[8];
	int cl1_len = expansionObject::Gen_Product(2, cex, 2, cex, cl1);
	double cl2[8];
	int cl2_len = expansionObject::Gen_Product(2, cey, 2, cey, cl2);
	double cl3[8];
	int cl3_len = expansionObject::Gen_Product(2, cez, 2, cez, cl3);
	double cl4[16];
	int cl4_len = expansionObject::Gen_Sum(cl1_len, cl1, cl2_len, cl2, cl4);
	double clift[24];
	int clift_len = expansionObject::Gen_Sum(cl4_len, cl4, cl3_len, cl3, clift);
	double dl1[8];
	int dl1_len = expansionObject::Gen_Product(2, dex, 2, dex, dl1);
	double dl2[8];
	int dl2_len = expansionObject::Gen_Product(2, dey, 2, dey, dl2);
	double dl3[8];
	int dl3_len = expansionObject::Gen_Product(2, dez, 2, dez, dl3);
	double dl4[16];
	int dl4_len = expansionObject::Gen_Sum(dl1_len, dl1, dl2_len, dl2, dl4);
	double dlift[24];
	int dlift_len = expansionObject::Gen_Sum(dl4_len, dl4, dl3_len, dl3, dlift);
	double ds1_p[32], * ds1 = ds1_p;
	int ds1_len = expansionObject::Gen_Product_With_PreAlloc(dlift_len, dlift, abc_len, abc, &ds1, 32);
	double ds2_p[32], * ds2 = ds2_p;
	int ds2_len = expansionObject::Gen_Product_With_PreAlloc(clift_len, clift, dab_len, dab, &ds2, 32);
	double dl_p[32], * dl = dl_p;
	int dl_len = expansionObject::Gen_Diff_With_PreAlloc(ds2_len, ds2, ds1_len, ds1, &dl, 32);
	double dr1_p[32], * dr1 = dr1_p;
	int dr1_len = expansionObject::Gen_Product_With_PreAlloc(blift_len, blift, cda_len, cda, &dr1, 32);
	double dr2_p[32], * dr2 = dr2_p;
	int dr2_len = expansionObject::Gen_Product_With_PreAlloc(alift_len, alift, bcd_len, bcd, &dr2, 32);
	double dr_p[32], * dr = dr_p;
	int dr_len = expansionObject::Gen_Diff_With_PreAlloc(dr2_len, dr2, dr1_len, dr1, &dr, 32);
	double det_p[32], * det = det_p;
	int det_len = expansionObject::Gen_Sum_With_PreAlloc(dl_len, dl, dr_len, dr, &det, 32);

	double return_value = det[det_len - 1];
	if (det_p != det) FreeDoubles(det);
	if (dr_p != dr) FreeDoubles(dr);
	if (dr2_p != dr2) FreeDoubles(dr2);
	if (dr1_p != dr1) FreeDoubles(dr1);
	if (dl_p != dl) FreeDoubles(dl);
	if (ds2_p != ds2) FreeDoubles(ds2);
	if (ds1_p != ds1) FreeDoubles(ds1);
	if (alift_p != alift) FreeDoubles(alift);
	if (al4_p != al4) FreeDoubles(al4);
	if (al3_p != al3) FreeDoubles(al3);
	if (al2_p != al2) FreeDoubles(al2);
	if (al1_p != al1) FreeDoubles(al1);
	if (dab_p != dab) FreeDoubles(dab);
	if (dab4_p != dab4) FreeDoubles(dab4);
	if (dab3_p != dab3) FreeDoubles(dab3);
	if (dab2_p != dab2) FreeDoubles(dab2);
	if (dab1_p != dab1) FreeDoubles(dab1);
	if (cda_p != cda) FreeDoubles(cda);
	if (cda4_p != cda4) FreeDoubles(cda4);
	if (cda3_p != cda3) FreeDoubles(cda3);
	if (cda2_p != cda2) FreeDoubles(cda2);
	if (cda1_p != cda1) FreeDoubles(cda1);
	if (bcd_p != bcd) FreeDoubles(bcd);
	if (bcd4_p != bcd4) FreeDoubles(bcd4);
	if (bcd3_p != bcd3) FreeDoubles(bcd3);
	if (bcd2_p != bcd2) FreeDoubles(bcd2);
	if (bcd1_p != bcd1) FreeDoubles(bcd1);
	if (abc_p != abc) FreeDoubles(abc);
	if (abc4_p != abc4) FreeDoubles(abc4);
	if (abc3_p != abc3) FreeDoubles(abc3);
	if (abc2_p != abc2) FreeDoubles(abc2);
	if (abc1_p != abc1) FreeDoubles(abc1);
	if (ac_p != ac) FreeDoubles(ac);
	if (da_p != da) FreeDoubles(da);
	if (ab_p != ab) FreeDoubles(ab);

	if (return_value > 0) return IP_Sign::POSITIVE;
	if (return_value < 0) return IP_Sign::NEGATIVE;
	if (return_value == 0) return IP_Sign::ZERO;
	return IP_Sign::UNDEFINED;
}

inline int inSphere_LEEEE(double a1x, double a1y, double a1z, double a2x, double a2y, double a2z, double at, double bx, double by, double bz, double cx, double cy, double cz, double dx, double dy, double dz, double ex, double ey, double ez)
{
	int ret;
	ret = inSphere_LEEEE_filtered(a1x, a1y, a1z, a2x, a2y, a2z, at, bx, by, bz, cx, cy, cz, dx, dy, dz, ex, ey, ez);
	if (ret != Filtered_Sign::UNCERTAIN) return ret;
	ret = inSphere_LEEEE_interval(a1x, a1y, a1z, a2x, a2y, a2z, at, bx, by, bz, cx, cy, cz, dx, dy, dz, ex, ey, ez);
	if (ret != Filtered_Sign::UNCERTAIN) return ret;
	return inSphere_LEEEE_exact(a1x, a1y, a1z, a2x, a2y, a2z, at, bx, by, bz, cx, cy, cz, dx, dy, dz, ex, ey, ez);
}

inline int inSphere_LLEEE_filtered(double a1x, double a1y, double a1z, double a2x, double a2y, double a2z, double at, double b1x, double b1y, double b1z, double b2x, double b2y, double b2z, double bt, double cx, double cy, double cz, double dx, double dy, double dz, double ex, double ey, double ez)
{
	const double avx = a2x - a1x;
	const double avxt = avx * at;
	const double ax = a1x + avxt;
	const double avy = a2y - a1y;
	const double avyt = avy * at;
	const double ay = a1y + avyt;
	const double avz = a2z - a1z;
	const double avzt = avz * at;
	const double az = a1z + avzt;
	const double bvx = b2x - b1x;
	const double bvxt = bvx * bt;
	const double bx = b1x + bvxt;
	const double bvy = b2y - b1y;
	const double bvyt = bvy * bt;
	const double by = b1y + bvyt;
	const double bvz = b2z - b1z;
	const double bvzt = bvz * bt;
	const double bz = b1z + bvzt;
	const double aex = ax - ex;
	const double aey = ay - ey;
	const double aez = az - ez;
	const double bex = bx - ex;
	const double bey = by - ey;
	const double bez = bz - ez;
	const double cex = cx - ex;
	const double cey = cy - ey;
	const double cez = cz - ez;
	const double dex = dx - ex;
	const double dey = dy - ey;
	const double dez = dz - ez;
	const double aexbey = aex * bey;
	const double bexaey = bex * aey;
	const double ab = aexbey - bexaey;
	const double bexcey = bex * cey;
	const double cexbey = cex * bey;
	const double bc = bexcey - cexbey;
	const double cexdey = cex * dey;
	const double dexcey = dex * cey;
	const double cd = cexdey - dexcey;
	const double dexaey = dex * aey;
	const double aexdey = aex * dey;
	const double da = dexaey - aexdey;
	const double aexcey = aex * cey;
	const double cexaey = cex * aey;
	const double ac = aexcey - cexaey;
	const double bexdey = bex * dey;
	const double dexbey = dex * bey;
	const double bd = bexdey - dexbey;
	const double abc1 = aez * bc;
	const double abc2 = bez * ac;
	const double abc3 = cez * ab;
	const double abc4 = abc1 + abc3;
	const double abc = abc4 - abc2;
	const double bcd1 = bez * cd;
	const double bcd2 = cez * bd;
	const double bcd3 = dez * bc;
	const double bcd4 = bcd1 + bcd3;
	const double bcd = bcd4 - bcd2;
	const double cda1 = cez * da;
	const double cda2 = dez * ac;
	const double cda3 = aez * cd;
	const double cda4 = cda1 + cda3;
	const double cda = cda4 + cda2;
	const double dab1 = dez * ab;
	const double dab2 = aez * bd;
	const double dab3 = bez * da;
	const double dab4 = dab1 + dab3;
	const double dab = dab4 + dab2;
	const double al1 = aex * aex;
	const double al2 = aey * aey;
	const double al3 = aez * aez;
	const double al4 = al1 + al2;
	const double alift = al4 + al3;
	const double bl1 = bex * bex;
	const double bl2 = bey * bey;
	const double bl3 = bez * bez;
	const double bl4 = bl1 + bl2;
	const double blift = bl4 + bl3;
	const double cl1 = cex * cex;
	const double cl2 = cey * cey;
	const double cl3 = cez * cez;
	const double cl4 = cl1 + cl2;
	const double clift = cl4 + cl3;
	const double dl1 = dex * dex;
	const double dl2 = dey * dey;
	const double dl3 = dez * dez;
	const double dl4 = dl1 + dl2;
	const double dlift = dl4 + dl3;
	const double ds1 = dlift * abc;
	const double ds2 = clift * dab;
	const double dl = ds2 - ds1;
	const double dr1 = blift * cda;
	const double dr2 = alift * bcd;
	const double dr = dr2 - dr1;
	const double det = dl + dr;

	double _tmp_fabs;

	double max_var = 0.0;
	if ((_tmp_fabs = fabs(a1x)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(a1y)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(a1z)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(at)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(b1x)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(b1y)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(b1z)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(bt)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(ex)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(ey)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(ez)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(avx)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(avy)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(avz)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(bvx)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(bvy)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(bvz)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(cex)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(cey)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(cez)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(dex)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(dey)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(dez)) > max_var) max_var = _tmp_fabs;
	double epsilon = max_var;
	epsilon *= epsilon;
	epsilon *= epsilon;
	epsilon *= epsilon;
	epsilon *= 2.218669692410916e-12;
	if (det > epsilon) return IP_Sign::POSITIVE;
	if (-det > epsilon) return IP_Sign::NEGATIVE;
	return Filtered_Sign::UNCERTAIN;
}

inline int inSphere_LLEEE_interval(interval_number a1x, interval_number a1y, interval_number a1z, interval_number a2x, interval_number a2y, interval_number a2z, interval_number at, interval_number b1x, interval_number b1y, interval_number b1z, interval_number b2x, interval_number b2y, interval_number b2z, interval_number bt, interval_number cx, interval_number cy, interval_number cz, interval_number dx, interval_number dy, interval_number dz, interval_number ex, interval_number ey, interval_number ez)
{
	setFPUModeToRoundUP();
	const interval_number avx(a2x - a1x);
	const interval_number avxt(avx * at);
	const interval_number ax(a1x + avxt);
	const interval_number avy(a2y - a1y);
	const interval_number avyt(avy * at);
	const interval_number ay(a1y + avyt);
	const interval_number avz(a2z - a1z);
	const interval_number avzt(avz * at);
	const interval_number az(a1z + avzt);
	const interval_number bvx(b2x - b1x);
	const interval_number bvxt(bvx * bt);
	const interval_number bx(b1x + bvxt);
	const interval_number bvy(b2y - b1y);
	const interval_number bvyt(bvy * bt);
	const interval_number by(b1y + bvyt);
	const interval_number bvz(b2z - b1z);
	const interval_number bvzt(bvz * bt);
	const interval_number bz(b1z + bvzt);
	const interval_number aex(ax - ex);
	const interval_number aey(ay - ey);
	const interval_number aez(az - ez);
	const interval_number bex(bx - ex);
	const interval_number bey(by - ey);
	const interval_number bez(bz - ez);
	const interval_number cex(cx - ex);
	const interval_number cey(cy - ey);
	const interval_number cez(cz - ez);
	const interval_number dex(dx - ex);
	const interval_number dey(dy - ey);
	const interval_number dez(dz - ez);
	const interval_number aexbey(aex * bey);
	const interval_number bexaey(bex * aey);
	const interval_number ab(aexbey - bexaey);
	const interval_number bexcey(bex * cey);
	const interval_number cexbey(cex * bey);
	const interval_number bc(bexcey - cexbey);
	const interval_number cexdey(cex * dey);
	const interval_number dexcey(dex * cey);
	const interval_number cd(cexdey - dexcey);
	const interval_number dexaey(dex * aey);
	const interval_number aexdey(aex * dey);
	const interval_number da(dexaey - aexdey);
	const interval_number aexcey(aex * cey);
	const interval_number cexaey(cex * aey);
	const interval_number ac(aexcey - cexaey);
	const interval_number bexdey(bex * dey);
	const interval_number dexbey(dex * bey);
	const interval_number bd(bexdey - dexbey);
	const interval_number abc1(aez * bc);
	const interval_number abc2(bez * ac);
	const interval_number abc3(cez * ab);
	const interval_number abc4(abc1 + abc3);
	const interval_number abc(abc4 - abc2);
	const interval_number bcd1(bez * cd);
	const interval_number bcd2(cez * bd);
	const interval_number bcd3(dez * bc);
	const interval_number bcd4(bcd1 + bcd3);
	const interval_number bcd(bcd4 - bcd2);
	const interval_number cda1(cez * da);
	const interval_number cda2(dez * ac);
	const interval_number cda3(aez * cd);
	const interval_number cda4(cda1 + cda3);
	const interval_number cda(cda4 + cda2);
	const interval_number dab1(dez * ab);
	const interval_number dab2(aez * bd);
	const interval_number dab3(bez * da);
	const interval_number dab4(dab1 + dab3);
	const interval_number dab(dab4 + dab2);
	const interval_number al1(aex * aex);
	const interval_number al2(aey * aey);
	const interval_number al3(aez * aez);
	const interval_number al4(al1 + al2);
	const interval_number alift(al4 + al3);
	const interval_number bl1(bex * bex);
	const interval_number bl2(bey * bey);
	const interval_number bl3(bez * bez);
	const interval_number bl4(bl1 + bl2);
	const interval_number blift(bl4 + bl3);
	const interval_number cl1(cex * cex);
	const interval_number cl2(cey * cey);
	const interval_number cl3(cez * cez);
	const interval_number cl4(cl1 + cl2);
	const interval_number clift(cl4 + cl3);
	const interval_number dl1(dex * dex);
	const interval_number dl2(dey * dey);
	const interval_number dl3(dez * dez);
	const interval_number dl4(dl1 + dl2);
	const interval_number dlift(dl4 + dl3);
	const interval_number ds1(dlift * abc);
	const interval_number ds2(clift * dab);
	const interval_number dl(ds2 - ds1);
	const interval_number dr1(blift * cda);
	const interval_number dr2(alift * bcd);
	const interval_number dr(dr2 - dr1);
	const interval_number det(dl + dr);
	setFPUModeToRoundNEAR();

	if (!det.signIsReliable()) return Filtered_Sign::UNCERTAIN;
	return det.sign();
}

inline int inSphere_LLEEE_bigfloat(bigfloat a1x, bigfloat a1y, bigfloat a1z, bigfloat a2x, bigfloat a2y, bigfloat a2z, bigfloat at, bigfloat b1x, bigfloat b1y, bigfloat b1z, bigfloat b2x, bigfloat b2y, bigfloat b2z, bigfloat bt, bigfloat cx, bigfloat cy, bigfloat cz, bigfloat dx, bigfloat dy, bigfloat dz, bigfloat ex, bigfloat ey, bigfloat ez)
{
	const bigfloat avx(a2x - a1x);
	const bigfloat avxt(avx * at);
	const bigfloat ax(a1x + avxt);
	const bigfloat avy(a2y - a1y);
	const bigfloat avyt(avy * at);
	const bigfloat ay(a1y + avyt);
	const bigfloat avz(a2z - a1z);
	const bigfloat avzt(avz * at);
	const bigfloat az(a1z + avzt);
	const bigfloat bvx(b2x - b1x);
	const bigfloat bvxt(bvx * bt);
	const bigfloat bx(b1x + bvxt);
	const bigfloat bvy(b2y - b1y);
	const bigfloat bvyt(bvy * bt);
	const bigfloat by(b1y + bvyt);
	const bigfloat bvz(b2z - b1z);
	const bigfloat bvzt(bvz * bt);
	const bigfloat bz(b1z + bvzt);
	const bigfloat aex(ax - ex);
	const bigfloat aey(ay - ey);
	const bigfloat aez(az - ez);
	const bigfloat bex(bx - ex);
	const bigfloat bey(by - ey);
	const bigfloat bez(bz - ez);
	const bigfloat cex(cx - ex);
	const bigfloat cey(cy - ey);
	const bigfloat cez(cz - ez);
	const bigfloat dex(dx - ex);
	const bigfloat dey(dy - ey);
	const bigfloat dez(dz - ez);
	const bigfloat aexbey(aex * bey);
	const bigfloat bexaey(bex * aey);
	const bigfloat ab(aexbey - bexaey);
	const bigfloat bexcey(bex * cey);
	const bigfloat cexbey(cex * bey);
	const bigfloat bc(bexcey - cexbey);
	const bigfloat cexdey(cex * dey);
	const bigfloat dexcey(dex * cey);
	const bigfloat cd(cexdey - dexcey);
	const bigfloat dexaey(dex * aey);
	const bigfloat aexdey(aex * dey);
	const bigfloat da(dexaey - aexdey);
	const bigfloat aexcey(aex * cey);
	const bigfloat cexaey(cex * aey);
	const bigfloat ac(aexcey - cexaey);
	const bigfloat bexdey(bex * dey);
	const bigfloat dexbey(dex * bey);
	const bigfloat bd(bexdey - dexbey);
	const bigfloat abc1(aez * bc);
	const bigfloat abc2(bez * ac);
	const bigfloat abc3(cez * ab);
	const bigfloat abc4(abc1 + abc3);
	const bigfloat abc(abc4 - abc2);
	const bigfloat bcd1(bez * cd);
	const bigfloat bcd2(cez * bd);
	const bigfloat bcd3(dez * bc);
	const bigfloat bcd4(bcd1 + bcd3);
	const bigfloat bcd(bcd4 - bcd2);
	const bigfloat cda1(cez * da);
	const bigfloat cda2(dez * ac);
	const bigfloat cda3(aez * cd);
	const bigfloat cda4(cda1 + cda3);
	const bigfloat cda(cda4 + cda2);
	const bigfloat dab1(dez * ab);
	const bigfloat dab2(aez * bd);
	const bigfloat dab3(bez * da);
	const bigfloat dab4(dab1 + dab3);
	const bigfloat dab(dab4 + dab2);
	const bigfloat al1(aex * aex);
	const bigfloat al2(aey * aey);
	const bigfloat al3(aez * aez);
	const bigfloat al4(al1 + al2);
	const bigfloat alift(al4 + al3);
	const bigfloat bl1(bex * bex);
	const bigfloat bl2(bey * bey);
	const bigfloat bl3(bez * bez);
	const bigfloat bl4(bl1 + bl2);
	const bigfloat blift(bl4 + bl3);
	const bigfloat cl1(cex * cex);
	const bigfloat cl2(cey * cey);
	const bigfloat cl3(cez * cez);
	const bigfloat cl4(cl1 + cl2);
	const bigfloat clift(cl4 + cl3);
	const bigfloat dl1(dex * dex);
	const bigfloat dl2(dey * dey);
	const bigfloat dl3(dez * dez);
	const bigfloat dl4(dl1 + dl2);
	const bigfloat dlift(dl4 + dl3);
	const bigfloat ds1(dlift * abc);
	const bigfloat ds2(clift * dab);
	const bigfloat dl(ds2 - ds1);
	const bigfloat dr1(blift * cda);
	const bigfloat dr2(alift * bcd);
	const bigfloat dr(dr2 - dr1);
	const bigfloat det(dl + dr);
	return sgn(det);
}

inline int inSphere_LLEEE_exact(double a1x, double a1y, double a1z, double a2x, double a2y, double a2z, double at, double b1x, double b1y, double b1z, double b2x, double b2y, double b2z, double bt, double cx, double cy, double cz, double dx, double dy, double dz, double ex, double ey, double ez)
{
	double avx[2];
	expansionObject::two_Diff(a2x, a1x, avx);
	double avxt[4];
	expansionObject::Two_One_Prod(avx, at, avxt);
	double ax[5];
	int ax_len = expansionObject::Gen_Sum(1, &a1x, 4, avxt, ax);
	double avy[2];
	expansionObject::two_Diff(a2y, a1y, avy);
	double avyt[4];
	expansionObject::Two_One_Prod(avy, at, avyt);
	double ay[5];
	int ay_len = expansionObject::Gen_Sum(1, &a1y, 4, avyt, ay);
	double avz[2];
	expansionObject::two_Diff(a2z, a1z, avz);
	double avzt[4];
	expansionObject::Two_One_Prod(avz, at, avzt);
	double az[5];
	int az_len = expansionObject::Gen_Sum(1, &a1z, 4, avzt, az);
	double bvx[2];
	expansionObject::two_Diff(b2x, b1x, bvx);
	double bvxt[4];
	expansionObject::Two_One_Prod(bvx, bt, bvxt);
	double bx[5];
	int bx_len = expansionObject::Gen_Sum(1, &b1x, 4, bvxt, bx);
	double bvy[2];
	expansionObject::two_Diff(b2y, b1y, bvy);
	double bvyt[4];
	expansionObject::Two_One_Prod(bvy, bt, bvyt);
	double by[5];
	int by_len = expansionObject::Gen_Sum(1, &b1y, 4, bvyt, by);
	double bvz[2];
	expansionObject::two_Diff(b2z, b1z, bvz);
	double bvzt[4];
	expansionObject::Two_One_Prod(bvz, bt, bvzt);
	double bz[5];
	int bz_len = expansionObject::Gen_Sum(1, &b1z, 4, bvzt, bz);
	double aex[6];
	int aex_len = expansionObject::Gen_Diff(ax_len, ax, 1, &ex, aex);
	double aey[6];
	int aey_len = expansionObject::Gen_Diff(ay_len, ay, 1, &ey, aey);
	double aez[6];
	int aez_len = expansionObject::Gen_Diff(az_len, az, 1, &ez, aez);
	double bex[6];
	int bex_len = expansionObject::Gen_Diff(bx_len, bx, 1, &ex, bex);
	double bey[6];
	int bey_len = expansionObject::Gen_Diff(by_len, by, 1, &ey, bey);
	double bez[6];
	int bez_len = expansionObject::Gen_Diff(bz_len, bz, 1, &ez, bez);
	double cex[2];
	expansionObject::two_Diff(cx, ex, cex);
	double cey[2];
	expansionObject::two_Diff(cy, ey, cey);
	double cez[2];
	expansionObject::two_Diff(cz, ez, cez);
	double dex[2];
	expansionObject::two_Diff(dx, ex, dex);
	double dey[2];
	expansionObject::two_Diff(dy, ey, dey);
	double dez[2];
	expansionObject::two_Diff(dz, ez, dez);
	double aexbey_p[32], * aexbey = aexbey_p;
	int aexbey_len = expansionObject::Gen_Product_With_PreAlloc(aex_len, aex, bey_len, bey, &aexbey, 32);
	double bexaey_p[32], * bexaey = bexaey_p;
	int bexaey_len = expansionObject::Gen_Product_With_PreAlloc(bex_len, bex, aey_len, aey, &bexaey, 32);
	double ab_p[32], * ab = ab_p;
	int ab_len = expansionObject::Gen_Diff_With_PreAlloc(aexbey_len, aexbey, bexaey_len, bexaey, &ab, 32);
	double bexcey[24];
	int bexcey_len = expansionObject::Gen_Product(bex_len, bex, 2, cey, bexcey);
	double cexbey[24];
	int cexbey_len = expansionObject::Gen_Product(2, cex, bey_len, bey, cexbey);
	double bc_p[32], * bc = bc_p;
	int bc_len = expansionObject::Gen_Diff_With_PreAlloc(bexcey_len, bexcey, cexbey_len, cexbey, &bc, 32);
	double cexdey[8];
	int cexdey_len = expansionObject::Gen_Product(2, cex, 2, dey, cexdey);
	double dexcey[8];
	int dexcey_len = expansionObject::Gen_Product(2, dex, 2, cey, dexcey);
	double cd[16];
	int cd_len = expansionObject::Gen_Diff(cexdey_len, cexdey, dexcey_len, dexcey, cd);
	double dexaey[24];
	int dexaey_len = expansionObject::Gen_Product(2, dex, aey_len, aey, dexaey);
	double aexdey[24];
	int aexdey_len = expansionObject::Gen_Product(aex_len, aex, 2, dey, aexdey);
	double da_p[32], * da = da_p;
	int da_len = expansionObject::Gen_Diff_With_PreAlloc(dexaey_len, dexaey, aexdey_len, aexdey, &da, 32);
	double aexcey[24];
	int aexcey_len = expansionObject::Gen_Product(aex_len, aex, 2, cey, aexcey);
	double cexaey[24];
	int cexaey_len = expansionObject::Gen_Product(2, cex, aey_len, aey, cexaey);
	double ac_p[32], * ac = ac_p;
	int ac_len = expansionObject::Gen_Diff_With_PreAlloc(aexcey_len, aexcey, cexaey_len, cexaey, &ac, 32);
	double bexdey[24];
	int bexdey_len = expansionObject::Gen_Product(bex_len, bex, 2, dey, bexdey);
	double dexbey[24];
	int dexbey_len = expansionObject::Gen_Product(2, dex, bey_len, bey, dexbey);
	double bd_p[32], * bd = bd_p;
	int bd_len = expansionObject::Gen_Diff_With_PreAlloc(bexdey_len, bexdey, dexbey_len, dexbey, &bd, 32);
	double abc1_p[32], * abc1 = abc1_p;
	int abc1_len = expansionObject::Gen_Product_With_PreAlloc(aez_len, aez, bc_len, bc, &abc1, 32);
	double abc2_p[32], * abc2 = abc2_p;
	int abc2_len = expansionObject::Gen_Product_With_PreAlloc(bez_len, bez, ac_len, ac, &abc2, 32);
	double abc3_p[32], * abc3 = abc3_p;
	int abc3_len = expansionObject::Gen_Product_With_PreAlloc(2, cez, ab_len, ab, &abc3, 32);
	double abc4_p[32], * abc4 = abc4_p;
	int abc4_len = expansionObject::Gen_Sum_With_PreAlloc(abc1_len, abc1, abc3_len, abc3, &abc4, 32);
	double abc_p[32], * abc = abc_p;
	int abc_len = expansionObject::Gen_Diff_With_PreAlloc(abc4_len, abc4, abc2_len, abc2, &abc, 32);
	double bcd1_p[32], * bcd1 = bcd1_p;
	int bcd1_len = expansionObject::Gen_Product_With_PreAlloc(bez_len, bez, cd_len, cd, &bcd1, 32);
	double bcd2_p[32], * bcd2 = bcd2_p;
	int bcd2_len = expansionObject::Gen_Product_With_PreAlloc(2, cez, bd_len, bd, &bcd2, 32);
	double bcd3_p[32], * bcd3 = bcd3_p;
	int bcd3_len = expansionObject::Gen_Product_With_PreAlloc(2, dez, bc_len, bc, &bcd3, 32);
	double bcd4_p[32], * bcd4 = bcd4_p;
	int bcd4_len = expansionObject::Gen_Sum_With_PreAlloc(bcd1_len, bcd1, bcd3_len, bcd3, &bcd4, 32);
	double bcd_p[32], * bcd = bcd_p;
	int bcd_len = expansionObject::Gen_Diff_With_PreAlloc(bcd4_len, bcd4, bcd2_len, bcd2, &bcd, 32);
	double cda1_p[32], * cda1 = cda1_p;
	int cda1_len = expansionObject::Gen_Product_With_PreAlloc(2, cez, da_len, da, &cda1, 32);
	double cda2_p[32], * cda2 = cda2_p;
	int cda2_len = expansionObject::Gen_Product_With_PreAlloc(2, dez, ac_len, ac, &cda2, 32);
	double cda3_p[32], * cda3 = cda3_p;
	int cda3_len = expansionObject::Gen_Product_With_PreAlloc(aez_len, aez, cd_len, cd, &cda3, 32);
	double cda4_p[32], * cda4 = cda4_p;
	int cda4_len = expansionObject::Gen_Sum_With_PreAlloc(cda1_len, cda1, cda3_len, cda3, &cda4, 32);
	double cda_p[32], * cda = cda_p;
	int cda_len = expansionObject::Gen_Sum_With_PreAlloc(cda4_len, cda4, cda2_len, cda2, &cda, 32);
	double dab1_p[32], * dab1 = dab1_p;
	int dab1_len = expansionObject::Gen_Product_With_PreAlloc(2, dez, ab_len, ab, &dab1, 32);
	double dab2_p[32], * dab2 = dab2_p;
	int dab2_len = expansionObject::Gen_Product_With_PreAlloc(aez_len, aez, bd_len, bd, &dab2, 32);
	double dab3_p[32], * dab3 = dab3_p;
	int dab3_len = expansionObject::Gen_Product_With_PreAlloc(bez_len, bez, da_len, da, &dab3, 32);
	double dab4_p[32], * dab4 = dab4_p;
	int dab4_len = expansionObject::Gen_Sum_With_PreAlloc(dab1_len, dab1, dab3_len, dab3, &dab4, 32);
	double dab_p[32], * dab = dab_p;
	int dab_len = expansionObject::Gen_Sum_With_PreAlloc(dab4_len, dab4, dab2_len, dab2, &dab, 32);
	double al1_p[32], * al1 = al1_p;
	int al1_len = expansionObject::Gen_Product_With_PreAlloc(aex_len, aex, aex_len, aex, &al1, 32);
	double al2_p[32], * al2 = al2_p;
	int al2_len = expansionObject::Gen_Product_With_PreAlloc(aey_len, aey, aey_len, aey, &al2, 32);
	double al3_p[32], * al3 = al3_p;
	int al3_len = expansionObject::Gen_Product_With_PreAlloc(aez_len, aez, aez_len, aez, &al3, 32);
	double al4_p[32], * al4 = al4_p;
	int al4_len = expansionObject::Gen_Sum_With_PreAlloc(al1_len, al1, al2_len, al2, &al4, 32);
	double alift_p[32], * alift = alift_p;
	int alift_len = expansionObject::Gen_Sum_With_PreAlloc(al4_len, al4, al3_len, al3, &alift, 32);
	double bl1_p[32], * bl1 = bl1_p;
	int bl1_len = expansionObject::Gen_Product_With_PreAlloc(bex_len, bex, bex_len, bex, &bl1, 32);
	double bl2_p[32], * bl2 = bl2_p;
	int bl2_len = expansionObject::Gen_Product_With_PreAlloc(bey_len, bey, bey_len, bey, &bl2, 32);
	double bl3_p[32], * bl3 = bl3_p;
	int bl3_len = expansionObject::Gen_Product_With_PreAlloc(bez_len, bez, bez_len, bez, &bl3, 32);
	double bl4_p[32], * bl4 = bl4_p;
	int bl4_len = expansionObject::Gen_Sum_With_PreAlloc(bl1_len, bl1, bl2_len, bl2, &bl4, 32);
	double blift_p[32], * blift = blift_p;
	int blift_len = expansionObject::Gen_Sum_With_PreAlloc(bl4_len, bl4, bl3_len, bl3, &blift, 32);
	double cl1[8];
	int cl1_len = expansionObject::Gen_Product(2, cex, 2, cex, cl1);
	double cl2[8];
	int cl2_len = expansionObject::Gen_Product(2, cey, 2, cey, cl2);
	double cl3[8];
	int cl3_len = expansionObject::Gen_Product(2, cez, 2, cez, cl3);
	double cl4[16];
	int cl4_len = expansionObject::Gen_Sum(cl1_len, cl1, cl2_len, cl2, cl4);
	double clift[24];
	int clift_len = expansionObject::Gen_Sum(cl4_len, cl4, cl3_len, cl3, clift);
	double dl1[8];
	int dl1_len = expansionObject::Gen_Product(2, dex, 2, dex, dl1);
	double dl2[8];
	int dl2_len = expansionObject::Gen_Product(2, dey, 2, dey, dl2);
	double dl3[8];
	int dl3_len = expansionObject::Gen_Product(2, dez, 2, dez, dl3);
	double dl4[16];
	int dl4_len = expansionObject::Gen_Sum(dl1_len, dl1, dl2_len, dl2, dl4);
	double dlift[24];
	int dlift_len = expansionObject::Gen_Sum(dl4_len, dl4, dl3_len, dl3, dlift);
	double ds1_p[32], * ds1 = ds1_p;
	int ds1_len = expansionObject::Gen_Product_With_PreAlloc(dlift_len, dlift, abc_len, abc, &ds1, 32);
	double ds2_p[32], * ds2 = ds2_p;
	int ds2_len = expansionObject::Gen_Product_With_PreAlloc(clift_len, clift, dab_len, dab, &ds2, 32);
	double dl_p[32], * dl = dl_p;
	int dl_len = expansionObject::Gen_Diff_With_PreAlloc(ds2_len, ds2, ds1_len, ds1, &dl, 32);
	double dr1_p[32], * dr1 = dr1_p;
	int dr1_len = expansionObject::Gen_Product_With_PreAlloc(blift_len, blift, cda_len, cda, &dr1, 32);
	double dr2_p[32], * dr2 = dr2_p;
	int dr2_len = expansionObject::Gen_Product_With_PreAlloc(alift_len, alift, bcd_len, bcd, &dr2, 32);
	double dr_p[32], * dr = dr_p;
	int dr_len = expansionObject::Gen_Diff_With_PreAlloc(dr2_len, dr2, dr1_len, dr1, &dr, 32);
	double det_p[32], * det = det_p;
	int det_len = expansionObject::Gen_Sum_With_PreAlloc(dl_len, dl, dr_len, dr, &det, 32);

	double return_value = det[det_len - 1];
	if (det_p != det) FreeDoubles(det);
	if (dr_p != dr) FreeDoubles(dr);
	if (dr2_p != dr2) FreeDoubles(dr2);
	if (dr1_p != dr1) FreeDoubles(dr1);
	if (dl_p != dl) FreeDoubles(dl);
	if (ds2_p != ds2) FreeDoubles(ds2);
	if (ds1_p != ds1) FreeDoubles(ds1);
	if (blift_p != blift) FreeDoubles(blift);
	if (bl4_p != bl4) FreeDoubles(bl4);
	if (bl3_p != bl3) FreeDoubles(bl3);
	if (bl2_p != bl2) FreeDoubles(bl2);
	if (bl1_p != bl1) FreeDoubles(bl1);
	if (alift_p != alift) FreeDoubles(alift);
	if (al4_p != al4) FreeDoubles(al4);
	if (al3_p != al3) FreeDoubles(al3);
	if (al2_p != al2) FreeDoubles(al2);
	if (al1_p != al1) FreeDoubles(al1);
	if (dab_p != dab) FreeDoubles(dab);
	if (dab4_p != dab4) FreeDoubles(dab4);
	if (dab3_p != dab3) FreeDoubles(dab3);
	if (dab2_p != dab2) FreeDoubles(dab2);
	if (dab1_p != dab1) FreeDoubles(dab1);
	if (cda_p != cda) FreeDoubles(cda);
	if (cda4_p != cda4) FreeDoubles(cda4);
	if (cda3_p != cda3) FreeDoubles(cda3);
	if (cda2_p != cda2) FreeDoubles(cda2);
	if (cda1_p != cda1) FreeDoubles(cda1);
	if (bcd_p != bcd) FreeDoubles(bcd);
	if (bcd4_p != bcd4) FreeDoubles(bcd4);
	if (bcd3_p != bcd3) FreeDoubles(bcd3);
	if (bcd2_p != bcd2) FreeDoubles(bcd2);
	if (bcd1_p != bcd1) FreeDoubles(bcd1);
	if (abc_p != abc) FreeDoubles(abc);
	if (abc4_p != abc4) FreeDoubles(abc4);
	if (abc3_p != abc3) FreeDoubles(abc3);
	if (abc2_p != abc2) FreeDoubles(abc2);
	if (abc1_p != abc1) FreeDoubles(abc1);
	if (bd_p != bd) FreeDoubles(bd);
	if (ac_p != ac) FreeDoubles(ac);
	if (da_p != da) FreeDoubles(da);
	if (bc_p != bc) FreeDoubles(bc);
	if (ab_p != ab) FreeDoubles(ab);
	if (bexaey_p != bexaey) FreeDoubles(bexaey);
	if (aexbey_p != aexbey) FreeDoubles(aexbey);

	if (return_value > 0) return IP_Sign::POSITIVE;
	if (return_value < 0) return IP_Sign::NEGATIVE;
	if (return_value == 0) return IP_Sign::ZERO;
	return IP_Sign::UNDEFINED;
}

inline int inSphere_LLEEE(double a1x, double a1y, double a1z, double a2x, double a2y, double a2z, double at, double b1x, double b1y, double b1z, double b2x, double b2y, double b2z, double bt, double cx, double cy, double cz, double dx, double dy, double dz, double ex, double ey, double ez)
{
	int ret;
	ret = inSphere_LLEEE_filtered(a1x, a1y, a1z, a2x, a2y, a2z, at, b1x, b1y, b1z, b2x, b2y, b2z, bt, cx, cy, cz, dx, dy, dz, ex, ey, ez);
	if (ret != Filtered_Sign::UNCERTAIN) return ret;
	ret = inSphere_LLEEE_interval(a1x, a1y, a1z, a2x, a2y, a2z, at, b1x, b1y, b1z, b2x, b2y, b2z, bt, cx, cy, cz, dx, dy, dz, ex, ey, ez);
	if (ret != Filtered_Sign::UNCERTAIN) return ret;
	return inSphere_LLEEE_exact(a1x, a1y, a1z, a2x, a2y, a2z, at, b1x, b1y, b1z, b2x, b2y, b2z, bt, cx, cy, cz, dx, dy, dz, ex, ey, ez);
}

inline int inSphere_LLLEE_filtered(double a1x, double a1y, double a1z, double a2x, double a2y, double a2z, double at, double b1x, double b1y, double b1z, double b2x, double b2y, double b2z, double bt, double c1x, double c1y, double c1z, double c2x, double c2y, double c2z, double ct, double dx, double dy, double dz, double ex, double ey, double ez)
{
	const double avx = a2x - a1x;
	const double avxt = avx * at;
	const double ax = a1x + avxt;
	const double avy = a2y - a1y;
	const double avyt = avy * at;
	const double ay = a1y + avyt;
	const double avz = a2z - a1z;
	const double avzt = avz * at;
	const double az = a1z + avzt;
	const double bvx = b2x - b1x;
	const double bvxt = bvx * bt;
	const double bx = b1x + bvxt;
	const double bvy = b2y - b1y;
	const double bvyt = bvy * bt;
	const double by = b1y + bvyt;
	const double bvz = b2z - b1z;
	const double bvzt = bvz * bt;
	const double bz = b1z + bvzt;
	const double cvx = c2x - c1x;
	const double cvxt = cvx * ct;
	const double cx = c1x + cvxt;
	const double cvy = c2y - c1y;
	const double cvyt = cvy * ct;
	const double cy = c1y + cvyt;
	const double cvz = c2z - c1z;
	const double cvzt = cvz * ct;
	const double cz = c1z + cvzt;
	const double aex = ax - ex;
	const double aey = ay - ey;
	const double aez = az - ez;
	const double bex = bx - ex;
	const double bey = by - ey;
	const double bez = bz - ez;
	const double cex = cx - ex;
	const double cey = cy - ey;
	const double cez = cz - ez;
	const double dex = dx - ex;
	const double dey = dy - ey;
	const double dez = dz - ez;
	const double aexbey = aex * bey;
	const double bexaey = bex * aey;
	const double ab = aexbey - bexaey;
	const double bexcey = bex * cey;
	const double cexbey = cex * bey;
	const double bc = bexcey - cexbey;
	const double cexdey = cex * dey;
	const double dexcey = dex * cey;
	const double cd = cexdey - dexcey;
	const double dexaey = dex * aey;
	const double aexdey = aex * dey;
	const double da = dexaey - aexdey;
	const double aexcey = aex * cey;
	const double cexaey = cex * aey;
	const double ac = aexcey - cexaey;
	const double bexdey = bex * dey;
	const double dexbey = dex * bey;
	const double bd = bexdey - dexbey;
	const double abc1 = aez * bc;
	const double abc2 = bez * ac;
	const double abc3 = cez * ab;
	const double abc4 = abc1 + abc3;
	const double abc = abc4 - abc2;
	const double bcd1 = bez * cd;
	const double bcd2 = cez * bd;
	const double bcd3 = dez * bc;
	const double bcd4 = bcd1 + bcd3;
	const double bcd = bcd4 - bcd2;
	const double cda1 = cez * da;
	const double cda2 = dez * ac;
	const double cda3 = aez * cd;
	const double cda4 = cda1 + cda3;
	const double cda = cda4 + cda2;
	const double dab1 = dez * ab;
	const double dab2 = aez * bd;
	const double dab3 = bez * da;
	const double dab4 = dab1 + dab3;
	const double dab = dab4 + dab2;
	const double al1 = aex * aex;
	const double al2 = aey * aey;
	const double al3 = aez * aez;
	const double al4 = al1 + al2;
	const double alift = al4 + al3;
	const double bl1 = bex * bex;
	const double bl2 = bey * bey;
	const double bl3 = bez * bez;
	const double bl4 = bl1 + bl2;
	const double blift = bl4 + bl3;
	const double cl1 = cex * cex;
	const double cl2 = cey * cey;
	const double cl3 = cez * cez;
	const double cl4 = cl1 + cl2;
	const double clift = cl4 + cl3;
	const double dl1 = dex * dex;
	const double dl2 = dey * dey;
	const double dl3 = dez * dez;
	const double dl4 = dl1 + dl2;
	const double dlift = dl4 + dl3;
	const double ds1 = dlift * abc;
	const double ds2 = clift * dab;
	const double dl = ds2 - ds1;
	const double dr1 = blift * cda;
	const double dr2 = alift * bcd;
	const double dr = dr2 - dr1;
	const double det = dl + dr;

	double _tmp_fabs;

	double max_var = 0.0;
	if ((_tmp_fabs = fabs(a1x)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(a1y)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(a1z)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(at)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(b1x)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(b1y)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(b1z)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(bt)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(c1x)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(c1y)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(c1z)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(ct)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(ex)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(ey)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(ez)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(avx)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(avy)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(avz)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(bvx)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(bvy)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(bvz)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(cvx)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(cvy)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(cvz)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(dex)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(dey)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(dez)) > max_var) max_var = _tmp_fabs;
	double epsilon = max_var;
	epsilon *= epsilon;
	epsilon *= epsilon;
	epsilon *= epsilon;
	epsilon *= max_var;
	epsilon *= 9.019007762844938e-12;
	if (det > epsilon) return IP_Sign::POSITIVE;
	if (-det > epsilon) return IP_Sign::NEGATIVE;
	return Filtered_Sign::UNCERTAIN;
}

inline int inSphere_LLLEE_interval(interval_number a1x, interval_number a1y, interval_number a1z, interval_number a2x, interval_number a2y, interval_number a2z, interval_number at, interval_number b1x, interval_number b1y, interval_number b1z, interval_number b2x, interval_number b2y, interval_number b2z, interval_number bt, interval_number c1x, interval_number c1y, interval_number c1z, interval_number c2x, interval_number c2y, interval_number c2z, interval_number ct, interval_number dx, interval_number dy, interval_number dz, interval_number ex, interval_number ey, interval_number ez)
{
	setFPUModeToRoundUP();
	const interval_number avx(a2x - a1x);
	const interval_number avxt(avx * at);
	const interval_number ax(a1x + avxt);
	const interval_number avy(a2y - a1y);
	const interval_number avyt(avy * at);
	const interval_number ay(a1y + avyt);
	const interval_number avz(a2z - a1z);
	const interval_number avzt(avz * at);
	const interval_number az(a1z + avzt);
	const interval_number bvx(b2x - b1x);
	const interval_number bvxt(bvx * bt);
	const interval_number bx(b1x + bvxt);
	const interval_number bvy(b2y - b1y);
	const interval_number bvyt(bvy * bt);
	const interval_number by(b1y + bvyt);
	const interval_number bvz(b2z - b1z);
	const interval_number bvzt(bvz * bt);
	const interval_number bz(b1z + bvzt);
	const interval_number cvx(c2x - c1x);
	const interval_number cvxt(cvx * ct);
	const interval_number cx(c1x + cvxt);
	const interval_number cvy(c2y - c1y);
	const interval_number cvyt(cvy * ct);
	const interval_number cy(c1y + cvyt);
	const interval_number cvz(c2z - c1z);
	const interval_number cvzt(cvz * ct);
	const interval_number cz(c1z + cvzt);
	const interval_number aex(ax - ex);
	const interval_number aey(ay - ey);
	const interval_number aez(az - ez);
	const interval_number bex(bx - ex);
	const interval_number bey(by - ey);
	const interval_number bez(bz - ez);
	const interval_number cex(cx - ex);
	const interval_number cey(cy - ey);
	const interval_number cez(cz - ez);
	const interval_number dex(dx - ex);
	const interval_number dey(dy - ey);
	const interval_number dez(dz - ez);
	const interval_number aexbey(aex * bey);
	const interval_number bexaey(bex * aey);
	const interval_number ab(aexbey - bexaey);
	const interval_number bexcey(bex * cey);
	const interval_number cexbey(cex * bey);
	const interval_number bc(bexcey - cexbey);
	const interval_number cexdey(cex * dey);
	const interval_number dexcey(dex * cey);
	const interval_number cd(cexdey - dexcey);
	const interval_number dexaey(dex * aey);
	const interval_number aexdey(aex * dey);
	const interval_number da(dexaey - aexdey);
	const interval_number aexcey(aex * cey);
	const interval_number cexaey(cex * aey);
	const interval_number ac(aexcey - cexaey);
	const interval_number bexdey(bex * dey);
	const interval_number dexbey(dex * bey);
	const interval_number bd(bexdey - dexbey);
	const interval_number abc1(aez * bc);
	const interval_number abc2(bez * ac);
	const interval_number abc3(cez * ab);
	const interval_number abc4(abc1 + abc3);
	const interval_number abc(abc4 - abc2);
	const interval_number bcd1(bez * cd);
	const interval_number bcd2(cez * bd);
	const interval_number bcd3(dez * bc);
	const interval_number bcd4(bcd1 + bcd3);
	const interval_number bcd(bcd4 - bcd2);
	const interval_number cda1(cez * da);
	const interval_number cda2(dez * ac);
	const interval_number cda3(aez * cd);
	const interval_number cda4(cda1 + cda3);
	const interval_number cda(cda4 + cda2);
	const interval_number dab1(dez * ab);
	const interval_number dab2(aez * bd);
	const interval_number dab3(bez * da);
	const interval_number dab4(dab1 + dab3);
	const interval_number dab(dab4 + dab2);
	const interval_number al1(aex * aex);
	const interval_number al2(aey * aey);
	const interval_number al3(aez * aez);
	const interval_number al4(al1 + al2);
	const interval_number alift(al4 + al3);
	const interval_number bl1(bex * bex);
	const interval_number bl2(bey * bey);
	const interval_number bl3(bez * bez);
	const interval_number bl4(bl1 + bl2);
	const interval_number blift(bl4 + bl3);
	const interval_number cl1(cex * cex);
	const interval_number cl2(cey * cey);
	const interval_number cl3(cez * cez);
	const interval_number cl4(cl1 + cl2);
	const interval_number clift(cl4 + cl3);
	const interval_number dl1(dex * dex);
	const interval_number dl2(dey * dey);
	const interval_number dl3(dez * dez);
	const interval_number dl4(dl1 + dl2);
	const interval_number dlift(dl4 + dl3);
	const interval_number ds1(dlift * abc);
	const interval_number ds2(clift * dab);
	const interval_number dl(ds2 - ds1);
	const interval_number dr1(blift * cda);
	const interval_number dr2(alift * bcd);
	const interval_number dr(dr2 - dr1);
	const interval_number det(dl + dr);
	setFPUModeToRoundNEAR();

	if (!det.signIsReliable()) return Filtered_Sign::UNCERTAIN;
	return det.sign();
}

inline int inSphere_LLLEE_bigfloat(bigfloat a1x, bigfloat a1y, bigfloat a1z, bigfloat a2x, bigfloat a2y, bigfloat a2z, bigfloat at, bigfloat b1x, bigfloat b1y, bigfloat b1z, bigfloat b2x, bigfloat b2y, bigfloat b2z, bigfloat bt, bigfloat c1x, bigfloat c1y, bigfloat c1z, bigfloat c2x, bigfloat c2y, bigfloat c2z, bigfloat ct, bigfloat dx, bigfloat dy, bigfloat dz, bigfloat ex, bigfloat ey, bigfloat ez)
{
	const bigfloat avx(a2x - a1x);
	const bigfloat avxt(avx * at);
	const bigfloat ax(a1x + avxt);
	const bigfloat avy(a2y - a1y);
	const bigfloat avyt(avy * at);
	const bigfloat ay(a1y + avyt);
	const bigfloat avz(a2z - a1z);
	const bigfloat avzt(avz * at);
	const bigfloat az(a1z + avzt);
	const bigfloat bvx(b2x - b1x);
	const bigfloat bvxt(bvx * bt);
	const bigfloat bx(b1x + bvxt);
	const bigfloat bvy(b2y - b1y);
	const bigfloat bvyt(bvy * bt);
	const bigfloat by(b1y + bvyt);
	const bigfloat bvz(b2z - b1z);
	const bigfloat bvzt(bvz * bt);
	const bigfloat bz(b1z + bvzt);
	const bigfloat cvx(c2x - c1x);
	const bigfloat cvxt(cvx * ct);
	const bigfloat cx(c1x + cvxt);
	const bigfloat cvy(c2y - c1y);
	const bigfloat cvyt(cvy * ct);
	const bigfloat cy(c1y + cvyt);
	const bigfloat cvz(c2z - c1z);
	const bigfloat cvzt(cvz * ct);
	const bigfloat cz(c1z + cvzt);
	const bigfloat aex(ax - ex);
	const bigfloat aey(ay - ey);
	const bigfloat aez(az - ez);
	const bigfloat bex(bx - ex);
	const bigfloat bey(by - ey);
	const bigfloat bez(bz - ez);
	const bigfloat cex(cx - ex);
	const bigfloat cey(cy - ey);
	const bigfloat cez(cz - ez);
	const bigfloat dex(dx - ex);
	const bigfloat dey(dy - ey);
	const bigfloat dez(dz - ez);
	const bigfloat aexbey(aex * bey);
	const bigfloat bexaey(bex * aey);
	const bigfloat ab(aexbey - bexaey);
	const bigfloat bexcey(bex * cey);
	const bigfloat cexbey(cex * bey);
	const bigfloat bc(bexcey - cexbey);
	const bigfloat cexdey(cex * dey);
	const bigfloat dexcey(dex * cey);
	const bigfloat cd(cexdey - dexcey);
	const bigfloat dexaey(dex * aey);
	const bigfloat aexdey(aex * dey);
	const bigfloat da(dexaey - aexdey);
	const bigfloat aexcey(aex * cey);
	const bigfloat cexaey(cex * aey);
	const bigfloat ac(aexcey - cexaey);
	const bigfloat bexdey(bex * dey);
	const bigfloat dexbey(dex * bey);
	const bigfloat bd(bexdey - dexbey);
	const bigfloat abc1(aez * bc);
	const bigfloat abc2(bez * ac);
	const bigfloat abc3(cez * ab);
	const bigfloat abc4(abc1 + abc3);
	const bigfloat abc(abc4 - abc2);
	const bigfloat bcd1(bez * cd);
	const bigfloat bcd2(cez * bd);
	const bigfloat bcd3(dez * bc);
	const bigfloat bcd4(bcd1 + bcd3);
	const bigfloat bcd(bcd4 - bcd2);
	const bigfloat cda1(cez * da);
	const bigfloat cda2(dez * ac);
	const bigfloat cda3(aez * cd);
	const bigfloat cda4(cda1 + cda3);
	const bigfloat cda(cda4 + cda2);
	const bigfloat dab1(dez * ab);
	const bigfloat dab2(aez * bd);
	const bigfloat dab3(bez * da);
	const bigfloat dab4(dab1 + dab3);
	const bigfloat dab(dab4 + dab2);
	const bigfloat al1(aex * aex);
	const bigfloat al2(aey * aey);
	const bigfloat al3(aez * aez);
	const bigfloat al4(al1 + al2);
	const bigfloat alift(al4 + al3);
	const bigfloat bl1(bex * bex);
	const bigfloat bl2(bey * bey);
	const bigfloat bl3(bez * bez);
	const bigfloat bl4(bl1 + bl2);
	const bigfloat blift(bl4 + bl3);
	const bigfloat cl1(cex * cex);
	const bigfloat cl2(cey * cey);
	const bigfloat cl3(cez * cez);
	const bigfloat cl4(cl1 + cl2);
	const bigfloat clift(cl4 + cl3);
	const bigfloat dl1(dex * dex);
	const bigfloat dl2(dey * dey);
	const bigfloat dl3(dez * dez);
	const bigfloat dl4(dl1 + dl2);
	const bigfloat dlift(dl4 + dl3);
	const bigfloat ds1(dlift * abc);
	const bigfloat ds2(clift * dab);
	const bigfloat dl(ds2 - ds1);
	const bigfloat dr1(blift * cda);
	const bigfloat dr2(alift * bcd);
	const bigfloat dr(dr2 - dr1);
	const bigfloat det(dl + dr);
	return sgn(det);
}

inline int inSphere_LLLEE_exact(double a1x, double a1y, double a1z, double a2x, double a2y, double a2z, double at, double b1x, double b1y, double b1z, double b2x, double b2y, double b2z, double bt, double c1x, double c1y, double c1z, double c2x, double c2y, double c2z, double ct, double dx, double dy, double dz, double ex, double ey, double ez)
{
	double avx[2];
	expansionObject::two_Diff(a2x, a1x, avx);
	double avxt[4];
	expansionObject::Two_One_Prod(avx, at, avxt);
	double ax[5];
	int ax_len = expansionObject::Gen_Sum(1, &a1x, 4, avxt, ax);
	double avy[2];
	expansionObject::two_Diff(a2y, a1y, avy);
	double avyt[4];
	expansionObject::Two_One_Prod(avy, at, avyt);
	double ay[5];
	int ay_len = expansionObject::Gen_Sum(1, &a1y, 4, avyt, ay);
	double avz[2];
	expansionObject::two_Diff(a2z, a1z, avz);
	double avzt[4];
	expansionObject::Two_One_Prod(avz, at, avzt);
	double az[5];
	int az_len = expansionObject::Gen_Sum(1, &a1z, 4, avzt, az);
	double bvx[2];
	expansionObject::two_Diff(b2x, b1x, bvx);
	double bvxt[4];
	expansionObject::Two_One_Prod(bvx, bt, bvxt);
	double bx[5];
	int bx_len = expansionObject::Gen_Sum(1, &b1x, 4, bvxt, bx);
	double bvy[2];
	expansionObject::two_Diff(b2y, b1y, bvy);
	double bvyt[4];
	expansionObject::Two_One_Prod(bvy, bt, bvyt);
	double by[5];
	int by_len = expansionObject::Gen_Sum(1, &b1y, 4, bvyt, by);
	double bvz[2];
	expansionObject::two_Diff(b2z, b1z, bvz);
	double bvzt[4];
	expansionObject::Two_One_Prod(bvz, bt, bvzt);
	double bz[5];
	int bz_len = expansionObject::Gen_Sum(1, &b1z, 4, bvzt, bz);
	double cvx[2];
	expansionObject::two_Diff(c2x, c1x, cvx);
	double cvxt[4];
	expansionObject::Two_One_Prod(cvx, ct, cvxt);
	double cx[5];
	int cx_len = expansionObject::Gen_Sum(1, &c1x, 4, cvxt, cx);
	double cvy[2];
	expansionObject::two_Diff(c2y, c1y, cvy);
	double cvyt[4];
	expansionObject::Two_One_Prod(cvy, ct, cvyt);
	double cy[5];
	int cy_len = expansionObject::Gen_Sum(1, &c1y, 4, cvyt, cy);
	double cvz[2];
	expansionObject::two_Diff(c2z, c1z, cvz);
	double cvzt[4];
	expansionObject::Two_One_Prod(cvz, ct, cvzt);
	double cz[5];
	int cz_len = expansionObject::Gen_Sum(1, &c1z, 4, cvzt, cz);
	double aex[6];
	int aex_len = expansionObject::Gen_Diff(ax_len, ax, 1, &ex, aex);
	double aey[6];
	int aey_len = expansionObject::Gen_Diff(ay_len, ay, 1, &ey, aey);
	double aez[6];
	int aez_len = expansionObject::Gen_Diff(az_len, az, 1, &ez, aez);
	double bex[6];
	int bex_len = expansionObject::Gen_Diff(bx_len, bx, 1, &ex, bex);
	double bey[6];
	int bey_len = expansionObject::Gen_Diff(by_len, by, 1, &ey, bey);
	double bez[6];
	int bez_len = expansionObject::Gen_Diff(bz_len, bz, 1, &ez, bez);
	double cex[6];
	int cex_len = expansionObject::Gen_Diff(cx_len, cx, 1, &ex, cex);
	double cey[6];
	int cey_len = expansionObject::Gen_Diff(cy_len, cy, 1, &ey, cey);
	double cez[6];
	int cez_len = expansionObject::Gen_Diff(cz_len, cz, 1, &ez, cez);
	double dex[2];
	expansionObject::two_Diff(dx, ex, dex);
	double dey[2];
	expansionObject::two_Diff(dy, ey, dey);
	double dez[2];
	expansionObject::two_Diff(dz, ez, dez);
	double aexbey_p[16], * aexbey = aexbey_p;
	int aexbey_len = expansionObject::Gen_Product_With_PreAlloc(aex_len, aex, bey_len, bey, &aexbey, 16);
	double bexaey_p[16], * bexaey = bexaey_p;
	int bexaey_len = expansionObject::Gen_Product_With_PreAlloc(bex_len, bex, aey_len, aey, &bexaey, 16);
	double ab_p[16], * ab = ab_p;
	int ab_len = expansionObject::Gen_Diff_With_PreAlloc(aexbey_len, aexbey, bexaey_len, bexaey, &ab, 16);
	double bexcey_p[16], * bexcey = bexcey_p;
	int bexcey_len = expansionObject::Gen_Product_With_PreAlloc(bex_len, bex, cey_len, cey, &bexcey, 16);
	double cexbey_p[16], * cexbey = cexbey_p;
	int cexbey_len = expansionObject::Gen_Product_With_PreAlloc(cex_len, cex, bey_len, bey, &cexbey, 16);
	double bc_p[16], * bc = bc_p;
	int bc_len = expansionObject::Gen_Diff_With_PreAlloc(bexcey_len, bexcey, cexbey_len, cexbey, &bc, 16);
	double cexdey_p[16], * cexdey = cexdey_p;
	int cexdey_len = expansionObject::Gen_Product_With_PreAlloc(cex_len, cex, 2, dey, &cexdey, 16);
	double dexcey_p[16], * dexcey = dexcey_p;
	int dexcey_len = expansionObject::Gen_Product_With_PreAlloc(2, dex, cey_len, cey, &dexcey, 16);
	double cd_p[16], * cd = cd_p;
	int cd_len = expansionObject::Gen_Diff_With_PreAlloc(cexdey_len, cexdey, dexcey_len, dexcey, &cd, 16);
	double dexaey_p[16], * dexaey = dexaey_p;
	int dexaey_len = expansionObject::Gen_Product_With_PreAlloc(2, dex, aey_len, aey, &dexaey, 16);
	double aexdey_p[16], * aexdey = aexdey_p;
	int aexdey_len = expansionObject::Gen_Product_With_PreAlloc(aex_len, aex, 2, dey, &aexdey, 16);
	double da_p[16], * da = da_p;
	int da_len = expansionObject::Gen_Diff_With_PreAlloc(dexaey_len, dexaey, aexdey_len, aexdey, &da, 16);
	double aexcey_p[16], * aexcey = aexcey_p;
	int aexcey_len = expansionObject::Gen_Product_With_PreAlloc(aex_len, aex, cey_len, cey, &aexcey, 16);
	double cexaey_p[16], * cexaey = cexaey_p;
	int cexaey_len = expansionObject::Gen_Product_With_PreAlloc(cex_len, cex, aey_len, aey, &cexaey, 16);
	double ac_p[16], * ac = ac_p;
	int ac_len = expansionObject::Gen_Diff_With_PreAlloc(aexcey_len, aexcey, cexaey_len, cexaey, &ac, 16);
	double bexdey_p[16], * bexdey = bexdey_p;
	int bexdey_len = expansionObject::Gen_Product_With_PreAlloc(bex_len, bex, 2, dey, &bexdey, 16);
	double dexbey_p[16], * dexbey = dexbey_p;
	int dexbey_len = expansionObject::Gen_Product_With_PreAlloc(2, dex, bey_len, bey, &dexbey, 16);
	double bd_p[16], * bd = bd_p;
	int bd_len = expansionObject::Gen_Diff_With_PreAlloc(bexdey_len, bexdey, dexbey_len, dexbey, &bd, 16);
	double abc1_p[16], * abc1 = abc1_p;
	int abc1_len = expansionObject::Gen_Product_With_PreAlloc(aez_len, aez, bc_len, bc, &abc1, 16);
	double abc2_p[16], * abc2 = abc2_p;
	int abc2_len = expansionObject::Gen_Product_With_PreAlloc(bez_len, bez, ac_len, ac, &abc2, 16);
	double abc3_p[16], * abc3 = abc3_p;
	int abc3_len = expansionObject::Gen_Product_With_PreAlloc(cez_len, cez, ab_len, ab, &abc3, 16);
	double abc4_p[16], * abc4 = abc4_p;
	int abc4_len = expansionObject::Gen_Sum_With_PreAlloc(abc1_len, abc1, abc3_len, abc3, &abc4, 16);
	double abc_p[16], * abc = abc_p;
	int abc_len = expansionObject::Gen_Diff_With_PreAlloc(abc4_len, abc4, abc2_len, abc2, &abc, 16);
	double bcd1_p[16], * bcd1 = bcd1_p;
	int bcd1_len = expansionObject::Gen_Product_With_PreAlloc(bez_len, bez, cd_len, cd, &bcd1, 16);
	double bcd2_p[16], * bcd2 = bcd2_p;
	int bcd2_len = expansionObject::Gen_Product_With_PreAlloc(cez_len, cez, bd_len, bd, &bcd2, 16);
	double bcd3_p[16], * bcd3 = bcd3_p;
	int bcd3_len = expansionObject::Gen_Product_With_PreAlloc(2, dez, bc_len, bc, &bcd3, 16);
	double bcd4_p[16], * bcd4 = bcd4_p;
	int bcd4_len = expansionObject::Gen_Sum_With_PreAlloc(bcd1_len, bcd1, bcd3_len, bcd3, &bcd4, 16);
	double bcd_p[16], * bcd = bcd_p;
	int bcd_len = expansionObject::Gen_Diff_With_PreAlloc(bcd4_len, bcd4, bcd2_len, bcd2, &bcd, 16);
	double cda1_p[16], * cda1 = cda1_p;
	int cda1_len = expansionObject::Gen_Product_With_PreAlloc(cez_len, cez, da_len, da, &cda1, 16);
	double cda2_p[16], * cda2 = cda2_p;
	int cda2_len = expansionObject::Gen_Product_With_PreAlloc(2, dez, ac_len, ac, &cda2, 16);
	double cda3_p[16], * cda3 = cda3_p;
	int cda3_len = expansionObject::Gen_Product_With_PreAlloc(aez_len, aez, cd_len, cd, &cda3, 16);
	double cda4_p[16], * cda4 = cda4_p;
	int cda4_len = expansionObject::Gen_Sum_With_PreAlloc(cda1_len, cda1, cda3_len, cda3, &cda4, 16);
	double cda_p[16], * cda = cda_p;
	int cda_len = expansionObject::Gen_Sum_With_PreAlloc(cda4_len, cda4, cda2_len, cda2, &cda, 16);
	double dab1_p[16], * dab1 = dab1_p;
	int dab1_len = expansionObject::Gen_Product_With_PreAlloc(2, dez, ab_len, ab, &dab1, 16);
	double dab2_p[16], * dab2 = dab2_p;
	int dab2_len = expansionObject::Gen_Product_With_PreAlloc(aez_len, aez, bd_len, bd, &dab2, 16);
	double dab3_p[16], * dab3 = dab3_p;
	int dab3_len = expansionObject::Gen_Product_With_PreAlloc(bez_len, bez, da_len, da, &dab3, 16);
	double dab4_p[16], * dab4 = dab4_p;
	int dab4_len = expansionObject::Gen_Sum_With_PreAlloc(dab1_len, dab1, dab3_len, dab3, &dab4, 16);
	double dab_p[16], * dab = dab_p;
	int dab_len = expansionObject::Gen_Sum_With_PreAlloc(dab4_len, dab4, dab2_len, dab2, &dab, 16);
	double al1_p[16], * al1 = al1_p;
	int al1_len = expansionObject::Gen_Product_With_PreAlloc(aex_len, aex, aex_len, aex, &al1, 16);
	double al2_p[16], * al2 = al2_p;
	int al2_len = expansionObject::Gen_Product_With_PreAlloc(aey_len, aey, aey_len, aey, &al2, 16);
	double al3_p[16], * al3 = al3_p;
	int al3_len = expansionObject::Gen_Product_With_PreAlloc(aez_len, aez, aez_len, aez, &al3, 16);
	double al4_p[16], * al4 = al4_p;
	int al4_len = expansionObject::Gen_Sum_With_PreAlloc(al1_len, al1, al2_len, al2, &al4, 16);
	double alift_p[16], * alift = alift_p;
	int alift_len = expansionObject::Gen_Sum_With_PreAlloc(al4_len, al4, al3_len, al3, &alift, 16);
	double bl1_p[16], * bl1 = bl1_p;
	int bl1_len = expansionObject::Gen_Product_With_PreAlloc(bex_len, bex, bex_len, bex, &bl1, 16);
	double bl2_p[16], * bl2 = bl2_p;
	int bl2_len = expansionObject::Gen_Product_With_PreAlloc(bey_len, bey, bey_len, bey, &bl2, 16);
	double bl3_p[16], * bl3 = bl3_p;
	int bl3_len = expansionObject::Gen_Product_With_PreAlloc(bez_len, bez, bez_len, bez, &bl3, 16);
	double bl4_p[16], * bl4 = bl4_p;
	int bl4_len = expansionObject::Gen_Sum_With_PreAlloc(bl1_len, bl1, bl2_len, bl2, &bl4, 16);
	double blift_p[16], * blift = blift_p;
	int blift_len = expansionObject::Gen_Sum_With_PreAlloc(bl4_len, bl4, bl3_len, bl3, &blift, 16);
	double cl1_p[16], * cl1 = cl1_p;
	int cl1_len = expansionObject::Gen_Product_With_PreAlloc(cex_len, cex, cex_len, cex, &cl1, 16);
	double cl2_p[16], * cl2 = cl2_p;
	int cl2_len = expansionObject::Gen_Product_With_PreAlloc(cey_len, cey, cey_len, cey, &cl2, 16);
	double cl3_p[16], * cl3 = cl3_p;
	int cl3_len = expansionObject::Gen_Product_With_PreAlloc(cez_len, cez, cez_len, cez, &cl3, 16);
	double cl4_p[16], * cl4 = cl4_p;
	int cl4_len = expansionObject::Gen_Sum_With_PreAlloc(cl1_len, cl1, cl2_len, cl2, &cl4, 16);
	double clift_p[16], * clift = clift_p;
	int clift_len = expansionObject::Gen_Sum_With_PreAlloc(cl4_len, cl4, cl3_len, cl3, &clift, 16);
	double dl1[8];
	int dl1_len = expansionObject::Gen_Product(2, dex, 2, dex, dl1);
	double dl2[8];
	int dl2_len = expansionObject::Gen_Product(2, dey, 2, dey, dl2);
	double dl3[8];
	int dl3_len = expansionObject::Gen_Product(2, dez, 2, dez, dl3);
	double dl4[16];
	int dl4_len = expansionObject::Gen_Sum(dl1_len, dl1, dl2_len, dl2, dl4);
	double dlift_p[16], * dlift = dlift_p;
	int dlift_len = expansionObject::Gen_Sum_With_PreAlloc(dl4_len, dl4, dl3_len, dl3, &dlift, 16);
	double ds1_p[16], * ds1 = ds1_p;
	int ds1_len = expansionObject::Gen_Product_With_PreAlloc(dlift_len, dlift, abc_len, abc, &ds1, 16);
	double ds2_p[16], * ds2 = ds2_p;
	int ds2_len = expansionObject::Gen_Product_With_PreAlloc(clift_len, clift, dab_len, dab, &ds2, 16);
	double dl_p[16], * dl = dl_p;
	int dl_len = expansionObject::Gen_Diff_With_PreAlloc(ds2_len, ds2, ds1_len, ds1, &dl, 16);
	double dr1_p[16], * dr1 = dr1_p;
	int dr1_len = expansionObject::Gen_Product_With_PreAlloc(blift_len, blift, cda_len, cda, &dr1, 16);
	double dr2_p[16], * dr2 = dr2_p;
	int dr2_len = expansionObject::Gen_Product_With_PreAlloc(alift_len, alift, bcd_len, bcd, &dr2, 16);
	double dr_p[16], * dr = dr_p;
	int dr_len = expansionObject::Gen_Diff_With_PreAlloc(dr2_len, dr2, dr1_len, dr1, &dr, 16);
	double det_p[16], * det = det_p;
	int det_len = expansionObject::Gen_Sum_With_PreAlloc(dl_len, dl, dr_len, dr, &det, 16);

	double return_value = det[det_len - 1];
	if (det_p != det) FreeDoubles(det);
	if (dr_p != dr) FreeDoubles(dr);
	if (dr2_p != dr2) FreeDoubles(dr2);
	if (dr1_p != dr1) FreeDoubles(dr1);
	if (dl_p != dl) FreeDoubles(dl);
	if (ds2_p != ds2) FreeDoubles(ds2);
	if (ds1_p != ds1) FreeDoubles(ds1);
	if (dlift_p != dlift) FreeDoubles(dlift);
	if (clift_p != clift) FreeDoubles(clift);
	if (cl4_p != cl4) FreeDoubles(cl4);
	if (cl3_p != cl3) FreeDoubles(cl3);
	if (cl2_p != cl2) FreeDoubles(cl2);
	if (cl1_p != cl1) FreeDoubles(cl1);
	if (blift_p != blift) FreeDoubles(blift);
	if (bl4_p != bl4) FreeDoubles(bl4);
	if (bl3_p != bl3) FreeDoubles(bl3);
	if (bl2_p != bl2) FreeDoubles(bl2);
	if (bl1_p != bl1) FreeDoubles(bl1);
	if (alift_p != alift) FreeDoubles(alift);
	if (al4_p != al4) FreeDoubles(al4);
	if (al3_p != al3) FreeDoubles(al3);
	if (al2_p != al2) FreeDoubles(al2);
	if (al1_p != al1) FreeDoubles(al1);
	if (dab_p != dab) FreeDoubles(dab);
	if (dab4_p != dab4) FreeDoubles(dab4);
	if (dab3_p != dab3) FreeDoubles(dab3);
	if (dab2_p != dab2) FreeDoubles(dab2);
	if (dab1_p != dab1) FreeDoubles(dab1);
	if (cda_p != cda) FreeDoubles(cda);
	if (cda4_p != cda4) FreeDoubles(cda4);
	if (cda3_p != cda3) FreeDoubles(cda3);
	if (cda2_p != cda2) FreeDoubles(cda2);
	if (cda1_p != cda1) FreeDoubles(cda1);
	if (bcd_p != bcd) FreeDoubles(bcd);
	if (bcd4_p != bcd4) FreeDoubles(bcd4);
	if (bcd3_p != bcd3) FreeDoubles(bcd3);
	if (bcd2_p != bcd2) FreeDoubles(bcd2);
	if (bcd1_p != bcd1) FreeDoubles(bcd1);
	if (abc_p != abc) FreeDoubles(abc);
	if (abc4_p != abc4) FreeDoubles(abc4);
	if (abc3_p != abc3) FreeDoubles(abc3);
	if (abc2_p != abc2) FreeDoubles(abc2);
	if (abc1_p != abc1) FreeDoubles(abc1);
	if (bd_p != bd) FreeDoubles(bd);
	if (dexbey_p != dexbey) FreeDoubles(dexbey);
	if (bexdey_p != bexdey) FreeDoubles(bexdey);
	if (ac_p != ac) FreeDoubles(ac);
	if (cexaey_p != cexaey) FreeDoubles(cexaey);
	if (aexcey_p != aexcey) FreeDoubles(aexcey);
	if (da_p != da) FreeDoubles(da);
	if (aexdey_p != aexdey) FreeDoubles(aexdey);
	if (dexaey_p != dexaey) FreeDoubles(dexaey);
	if (cd_p != cd) FreeDoubles(cd);
	if (dexcey_p != dexcey) FreeDoubles(dexcey);
	if (cexdey_p != cexdey) FreeDoubles(cexdey);
	if (bc_p != bc) FreeDoubles(bc);
	if (cexbey_p != cexbey) FreeDoubles(cexbey);
	if (bexcey_p != bexcey) FreeDoubles(bexcey);
	if (ab_p != ab) FreeDoubles(ab);
	if (bexaey_p != bexaey) FreeDoubles(bexaey);
	if (aexbey_p != aexbey) FreeDoubles(aexbey);

	if (return_value > 0) return IP_Sign::POSITIVE;
	if (return_value < 0) return IP_Sign::NEGATIVE;
	if (return_value == 0) return IP_Sign::ZERO;
	return IP_Sign::UNDEFINED;
}

inline int inSphere_LLLEE(double a1x, double a1y, double a1z, double a2x, double a2y, double a2z, double at, double b1x, double b1y, double b1z, double b2x, double b2y, double b2z, double bt, double c1x, double c1y, double c1z, double c2x, double c2y, double c2z, double ct, double dx, double dy, double dz, double ex, double ey, double ez)
{
	int ret;
	ret = inSphere_LLLEE_filtered(a1x, a1y, a1z, a2x, a2y, a2z, at, b1x, b1y, b1z, b2x, b2y, b2z, bt, c1x, c1y, c1z, c2x, c2y, c2z, ct, dx, dy, dz, ex, ey, ez);
	if (ret != Filtered_Sign::UNCERTAIN) return ret;
	ret = inSphere_LLLEE_interval(a1x, a1y, a1z, a2x, a2y, a2z, at, b1x, b1y, b1z, b2x, b2y, b2z, bt, c1x, c1y, c1z, c2x, c2y, c2z, ct, dx, dy, dz, ex, ey, ez);
	if (ret != Filtered_Sign::UNCERTAIN) return ret;
	return inSphere_LLLEE_exact(a1x, a1y, a1z, a2x, a2y, a2z, at, b1x, b1y, b1z, b2x, b2y, b2z, bt, c1x, c1y, c1z, c2x, c2y, c2z, ct, dx, dy, dz, ex, ey, ez);
}

inline int inSphere_LLLLE_filtered(double a1x, double a1y, double a1z, double a2x, double a2y, double a2z, double at, double b1x, double b1y, double b1z, double b2x, double b2y, double b2z, double bt, double c1x, double c1y, double c1z, double c2x, double c2y, double c2z, double ct, double d1x, double d1y, double d1z, double d2x, double d2y, double d2z, double dt, double ex, double ey, double ez)
{
	const double avx = a2x - a1x;
	const double avxt = avx * at;
	const double ax = a1x + avxt;
	const double avy = a2y - a1y;
	const double avyt = avy * at;
	const double ay = a1y + avyt;
	const double avz = a2z - a1z;
	const double avzt = avz * at;
	const double az = a1z + avzt;
	const double bvx = b2x - b1x;
	const double bvxt = bvx * bt;
	const double bx = b1x + bvxt;
	const double bvy = b2y - b1y;
	const double bvyt = bvy * bt;
	const double by = b1y + bvyt;
	const double bvz = b2z - b1z;
	const double bvzt = bvz * bt;
	const double bz = b1z + bvzt;
	const double cvx = c2x - c1x;
	const double cvxt = cvx * ct;
	const double cx = c1x + cvxt;
	const double cvy = c2y - c1y;
	const double cvyt = cvy * ct;
	const double cy = c1y + cvyt;
	const double cvz = c2z - c1z;
	const double cvzt = cvz * ct;
	const double cz = c1z + cvzt;
	const double dvx = d2x - d1x;
	const double dvxt = dvx * dt;
	const double dx = d1x + dvxt;
	const double dvy = d2y - d1y;
	const double dvyt = dvy * dt;
	const double dy = d1y + dvyt;
	const double dvz = d2z - d1z;
	const double dvzt = dvz * dt;
	const double dz = d1z + dvzt;
	const double aex = ax - ex;
	const double aey = ay - ey;
	const double aez = az - ez;
	const double bex = bx - ex;
	const double bey = by - ey;
	const double bez = bz - ez;
	const double cex = cx - ex;
	const double cey = cy - ey;
	const double cez = cz - ez;
	const double dex = dx - ex;
	const double dey = dy - ey;
	const double dez = dz - ez;
	const double aexbey = aex * bey;
	const double bexaey = bex * aey;
	const double ab = aexbey - bexaey;
	const double bexcey = bex * cey;
	const double cexbey = cex * bey;
	const double bc = bexcey - cexbey;
	const double cexdey = cex * dey;
	const double dexcey = dex * cey;
	const double cd = cexdey - dexcey;
	const double dexaey = dex * aey;
	const double aexdey = aex * dey;
	const double da = dexaey - aexdey;
	const double aexcey = aex * cey;
	const double cexaey = cex * aey;
	const double ac = aexcey - cexaey;
	const double bexdey = bex * dey;
	const double dexbey = dex * bey;
	const double bd = bexdey - dexbey;
	const double abc1 = aez * bc;
	const double abc2 = bez * ac;
	const double abc3 = cez * ab;
	const double abc4 = abc1 + abc3;
	const double abc = abc4 - abc2;
	const double bcd1 = bez * cd;
	const double bcd2 = cez * bd;
	const double bcd3 = dez * bc;
	const double bcd4 = bcd1 + bcd3;
	const double bcd = bcd4 - bcd2;
	const double cda1 = cez * da;
	const double cda2 = dez * ac;
	const double cda3 = aez * cd;
	const double cda4 = cda1 + cda3;
	const double cda = cda4 + cda2;
	const double dab1 = dez * ab;
	const double dab2 = aez * bd;
	const double dab3 = bez * da;
	const double dab4 = dab1 + dab3;
	const double dab = dab4 + dab2;
	const double al1 = aex * aex;
	const double al2 = aey * aey;
	const double al3 = aez * aez;
	const double al4 = al1 + al2;
	const double alift = al4 + al3;
	const double bl1 = bex * bex;
	const double bl2 = bey * bey;
	const double bl3 = bez * bez;
	const double bl4 = bl1 + bl2;
	const double blift = bl4 + bl3;
	const double cl1 = cex * cex;
	const double cl2 = cey * cey;
	const double cl3 = cez * cez;
	const double cl4 = cl1 + cl2;
	const double clift = cl4 + cl3;
	const double dl1 = dex * dex;
	const double dl2 = dey * dey;
	const double dl3 = dez * dez;
	const double dl4 = dl1 + dl2;
	const double dlift = dl4 + dl3;
	const double ds1 = dlift * abc;
	const double ds2 = clift * dab;
	const double dl = ds2 - ds1;
	const double dr1 = blift * cda;
	const double dr2 = alift * bcd;
	const double dr = dr2 - dr1;
	const double det = dl + dr;

	double _tmp_fabs;

	double max_var = 0.0;
	if ((_tmp_fabs = fabs(a1x)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(a1y)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(a1z)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(at)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(b1x)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(b1y)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(b1z)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(bt)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(c1x)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(c1y)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(c1z)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(ct)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(d1x)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(d1y)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(d1z)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(dt)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(ex)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(ey)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(ez)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(avx)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(avy)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(avz)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(bvx)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(bvy)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(bvz)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(cvx)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(cvy)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(cvz)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(dvx)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(dvy)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(dvz)) > max_var) max_var = _tmp_fabs;
	double epsilon = max_var;
	epsilon *= epsilon;
	epsilon *= epsilon;
	epsilon *= epsilon;
	epsilon *= max_var;
	epsilon *= max_var;
	epsilon *= 3.581668295282733e-11;
	if (det > epsilon) return IP_Sign::POSITIVE;
	if (-det > epsilon) return IP_Sign::NEGATIVE;
	return Filtered_Sign::UNCERTAIN;
}

inline int inSphere_LLLLE_interval(interval_number a1x, interval_number a1y, interval_number a1z, interval_number a2x, interval_number a2y, interval_number a2z, interval_number at, interval_number b1x, interval_number b1y, interval_number b1z, interval_number b2x, interval_number b2y, interval_number b2z, interval_number bt, interval_number c1x, interval_number c1y, interval_number c1z, interval_number c2x, interval_number c2y, interval_number c2z, interval_number ct, interval_number d1x, interval_number d1y, interval_number d1z, interval_number d2x, interval_number d2y, interval_number d2z, interval_number dt, interval_number ex, interval_number ey, interval_number ez)
{
	setFPUModeToRoundUP();
	const interval_number avx(a2x - a1x);
	const interval_number avxt(avx * at);
	const interval_number ax(a1x + avxt);
	const interval_number avy(a2y - a1y);
	const interval_number avyt(avy * at);
	const interval_number ay(a1y + avyt);
	const interval_number avz(a2z - a1z);
	const interval_number avzt(avz * at);
	const interval_number az(a1z + avzt);
	const interval_number bvx(b2x - b1x);
	const interval_number bvxt(bvx * bt);
	const interval_number bx(b1x + bvxt);
	const interval_number bvy(b2y - b1y);
	const interval_number bvyt(bvy * bt);
	const interval_number by(b1y + bvyt);
	const interval_number bvz(b2z - b1z);
	const interval_number bvzt(bvz * bt);
	const interval_number bz(b1z + bvzt);
	const interval_number cvx(c2x - c1x);
	const interval_number cvxt(cvx * ct);
	const interval_number cx(c1x + cvxt);
	const interval_number cvy(c2y - c1y);
	const interval_number cvyt(cvy * ct);
	const interval_number cy(c1y + cvyt);
	const interval_number cvz(c2z - c1z);
	const interval_number cvzt(cvz * ct);
	const interval_number cz(c1z + cvzt);
	const interval_number dvx(d2x - d1x);
	const interval_number dvxt(dvx * dt);
	const interval_number dx(d1x + dvxt);
	const interval_number dvy(d2y - d1y);
	const interval_number dvyt(dvy * dt);
	const interval_number dy(d1y + dvyt);
	const interval_number dvz(d2z - d1z);
	const interval_number dvzt(dvz * dt);
	const interval_number dz(d1z + dvzt);
	const interval_number aex(ax - ex);
	const interval_number aey(ay - ey);
	const interval_number aez(az - ez);
	const interval_number bex(bx - ex);
	const interval_number bey(by - ey);
	const interval_number bez(bz - ez);
	const interval_number cex(cx - ex);
	const interval_number cey(cy - ey);
	const interval_number cez(cz - ez);
	const interval_number dex(dx - ex);
	const interval_number dey(dy - ey);
	const interval_number dez(dz - ez);
	const interval_number aexbey(aex * bey);
	const interval_number bexaey(bex * aey);
	const interval_number ab(aexbey - bexaey);
	const interval_number bexcey(bex * cey);
	const interval_number cexbey(cex * bey);
	const interval_number bc(bexcey - cexbey);
	const interval_number cexdey(cex * dey);
	const interval_number dexcey(dex * cey);
	const interval_number cd(cexdey - dexcey);
	const interval_number dexaey(dex * aey);
	const interval_number aexdey(aex * dey);
	const interval_number da(dexaey - aexdey);
	const interval_number aexcey(aex * cey);
	const interval_number cexaey(cex * aey);
	const interval_number ac(aexcey - cexaey);
	const interval_number bexdey(bex * dey);
	const interval_number dexbey(dex * bey);
	const interval_number bd(bexdey - dexbey);
	const interval_number abc1(aez * bc);
	const interval_number abc2(bez * ac);
	const interval_number abc3(cez * ab);
	const interval_number abc4(abc1 + abc3);
	const interval_number abc(abc4 - abc2);
	const interval_number bcd1(bez * cd);
	const interval_number bcd2(cez * bd);
	const interval_number bcd3(dez * bc);
	const interval_number bcd4(bcd1 + bcd3);
	const interval_number bcd(bcd4 - bcd2);
	const interval_number cda1(cez * da);
	const interval_number cda2(dez * ac);
	const interval_number cda3(aez * cd);
	const interval_number cda4(cda1 + cda3);
	const interval_number cda(cda4 + cda2);
	const interval_number dab1(dez * ab);
	const interval_number dab2(aez * bd);
	const interval_number dab3(bez * da);
	const interval_number dab4(dab1 + dab3);
	const interval_number dab(dab4 + dab2);
	const interval_number al1(aex * aex);
	const interval_number al2(aey * aey);
	const interval_number al3(aez * aez);
	const interval_number al4(al1 + al2);
	const interval_number alift(al4 + al3);
	const interval_number bl1(bex * bex);
	const interval_number bl2(bey * bey);
	const interval_number bl3(bez * bez);
	const interval_number bl4(bl1 + bl2);
	const interval_number blift(bl4 + bl3);
	const interval_number cl1(cex * cex);
	const interval_number cl2(cey * cey);
	const interval_number cl3(cez * cez);
	const interval_number cl4(cl1 + cl2);
	const interval_number clift(cl4 + cl3);
	const interval_number dl1(dex * dex);
	const interval_number dl2(dey * dey);
	const interval_number dl3(dez * dez);
	const interval_number dl4(dl1 + dl2);
	const interval_number dlift(dl4 + dl3);
	const interval_number ds1(dlift * abc);
	const interval_number ds2(clift * dab);
	const interval_number dl(ds2 - ds1);
	const interval_number dr1(blift * cda);
	const interval_number dr2(alift * bcd);
	const interval_number dr(dr2 - dr1);
	const interval_number det(dl + dr);
	setFPUModeToRoundNEAR();

	if (!det.signIsReliable()) return Filtered_Sign::UNCERTAIN;
	return det.sign();
}

inline int inSphere_LLLLE_bigfloat(bigfloat a1x, bigfloat a1y, bigfloat a1z, bigfloat a2x, bigfloat a2y, bigfloat a2z, bigfloat at, bigfloat b1x, bigfloat b1y, bigfloat b1z, bigfloat b2x, bigfloat b2y, bigfloat b2z, bigfloat bt, bigfloat c1x, bigfloat c1y, bigfloat c1z, bigfloat c2x, bigfloat c2y, bigfloat c2z, bigfloat ct, bigfloat d1x, bigfloat d1y, bigfloat d1z, bigfloat d2x, bigfloat d2y, bigfloat d2z, bigfloat dt, bigfloat ex, bigfloat ey, bigfloat ez)
{
	const bigfloat avx(a2x - a1x);
	const bigfloat avxt(avx * at);
	const bigfloat ax(a1x + avxt);
	const bigfloat avy(a2y - a1y);
	const bigfloat avyt(avy * at);
	const bigfloat ay(a1y + avyt);
	const bigfloat avz(a2z - a1z);
	const bigfloat avzt(avz * at);
	const bigfloat az(a1z + avzt);
	const bigfloat bvx(b2x - b1x);
	const bigfloat bvxt(bvx * bt);
	const bigfloat bx(b1x + bvxt);
	const bigfloat bvy(b2y - b1y);
	const bigfloat bvyt(bvy * bt);
	const bigfloat by(b1y + bvyt);
	const bigfloat bvz(b2z - b1z);
	const bigfloat bvzt(bvz * bt);
	const bigfloat bz(b1z + bvzt);
	const bigfloat cvx(c2x - c1x);
	const bigfloat cvxt(cvx * ct);
	const bigfloat cx(c1x + cvxt);
	const bigfloat cvy(c2y - c1y);
	const bigfloat cvyt(cvy * ct);
	const bigfloat cy(c1y + cvyt);
	const bigfloat cvz(c2z - c1z);
	const bigfloat cvzt(cvz * ct);
	const bigfloat cz(c1z + cvzt);
	const bigfloat dvx(d2x - d1x);
	const bigfloat dvxt(dvx * dt);
	const bigfloat dx(d1x + dvxt);
	const bigfloat dvy(d2y - d1y);
	const bigfloat dvyt(dvy * dt);
	const bigfloat dy(d1y + dvyt);
	const bigfloat dvz(d2z - d1z);
	const bigfloat dvzt(dvz * dt);
	const bigfloat dz(d1z + dvzt);
	const bigfloat aex(ax - ex);
	const bigfloat aey(ay - ey);
	const bigfloat aez(az - ez);
	const bigfloat bex(bx - ex);
	const bigfloat bey(by - ey);
	const bigfloat bez(bz - ez);
	const bigfloat cex(cx - ex);
	const bigfloat cey(cy - ey);
	const bigfloat cez(cz - ez);
	const bigfloat dex(dx - ex);
	const bigfloat dey(dy - ey);
	const bigfloat dez(dz - ez);
	const bigfloat aexbey(aex * bey);
	const bigfloat bexaey(bex * aey);
	const bigfloat ab(aexbey - bexaey);
	const bigfloat bexcey(bex * cey);
	const bigfloat cexbey(cex * bey);
	const bigfloat bc(bexcey - cexbey);
	const bigfloat cexdey(cex * dey);
	const bigfloat dexcey(dex * cey);
	const bigfloat cd(cexdey - dexcey);
	const bigfloat dexaey(dex * aey);
	const bigfloat aexdey(aex * dey);
	const bigfloat da(dexaey - aexdey);
	const bigfloat aexcey(aex * cey);
	const bigfloat cexaey(cex * aey);
	const bigfloat ac(aexcey - cexaey);
	const bigfloat bexdey(bex * dey);
	const bigfloat dexbey(dex * bey);
	const bigfloat bd(bexdey - dexbey);
	const bigfloat abc1(aez * bc);
	const bigfloat abc2(bez * ac);
	const bigfloat abc3(cez * ab);
	const bigfloat abc4(abc1 + abc3);
	const bigfloat abc(abc4 - abc2);
	const bigfloat bcd1(bez * cd);
	const bigfloat bcd2(cez * bd);
	const bigfloat bcd3(dez * bc);
	const bigfloat bcd4(bcd1 + bcd3);
	const bigfloat bcd(bcd4 - bcd2);
	const bigfloat cda1(cez * da);
	const bigfloat cda2(dez * ac);
	const bigfloat cda3(aez * cd);
	const bigfloat cda4(cda1 + cda3);
	const bigfloat cda(cda4 + cda2);
	const bigfloat dab1(dez * ab);
	const bigfloat dab2(aez * bd);
	const bigfloat dab3(bez * da);
	const bigfloat dab4(dab1 + dab3);
	const bigfloat dab(dab4 + dab2);
	const bigfloat al1(aex * aex);
	const bigfloat al2(aey * aey);
	const bigfloat al3(aez * aez);
	const bigfloat al4(al1 + al2);
	const bigfloat alift(al4 + al3);
	const bigfloat bl1(bex * bex);
	const bigfloat bl2(bey * bey);
	const bigfloat bl3(bez * bez);
	const bigfloat bl4(bl1 + bl2);
	const bigfloat blift(bl4 + bl3);
	const bigfloat cl1(cex * cex);
	const bigfloat cl2(cey * cey);
	const bigfloat cl3(cez * cez);
	const bigfloat cl4(cl1 + cl2);
	const bigfloat clift(cl4 + cl3);
	const bigfloat dl1(dex * dex);
	const bigfloat dl2(dey * dey);
	const bigfloat dl3(dez * dez);
	const bigfloat dl4(dl1 + dl2);
	const bigfloat dlift(dl4 + dl3);
	const bigfloat ds1(dlift * abc);
	const bigfloat ds2(clift * dab);
	const bigfloat dl(ds2 - ds1);
	const bigfloat dr1(blift * cda);
	const bigfloat dr2(alift * bcd);
	const bigfloat dr(dr2 - dr1);
	const bigfloat det(dl + dr);
	return sgn(det);
}

inline int inSphere_LLLLE_exact(double a1x, double a1y, double a1z, double a2x, double a2y, double a2z, double at, double b1x, double b1y, double b1z, double b2x, double b2y, double b2z, double bt, double c1x, double c1y, double c1z, double c2x, double c2y, double c2z, double ct, double d1x, double d1y, double d1z, double d2x, double d2y, double d2z, double dt, double ex, double ey, double ez)
{
	double avx[2];
	expansionObject::two_Diff(a2x, a1x, avx);
	double avxt[4];
	expansionObject::Two_One_Prod(avx, at, avxt);
	double ax[5];
	int ax_len = expansionObject::Gen_Sum(1, &a1x, 4, avxt, ax);
	double avy[2];
	expansionObject::two_Diff(a2y, a1y, avy);
	double avyt[4];
	expansionObject::Two_One_Prod(avy, at, avyt);
	double ay[5];
	int ay_len = expansionObject::Gen_Sum(1, &a1y, 4, avyt, ay);
	double avz[2];
	expansionObject::two_Diff(a2z, a1z, avz);
	double avzt[4];
	expansionObject::Two_One_Prod(avz, at, avzt);
	double az[5];
	int az_len = expansionObject::Gen_Sum(1, &a1z, 4, avzt, az);
	double bvx[2];
	expansionObject::two_Diff(b2x, b1x, bvx);
	double bvxt[4];
	expansionObject::Two_One_Prod(bvx, bt, bvxt);
	double bx[5];
	int bx_len = expansionObject::Gen_Sum(1, &b1x, 4, bvxt, bx);
	double bvy[2];
	expansionObject::two_Diff(b2y, b1y, bvy);
	double bvyt[4];
	expansionObject::Two_One_Prod(bvy, bt, bvyt);
	double by[5];
	int by_len = expansionObject::Gen_Sum(1, &b1y, 4, bvyt, by);
	double bvz[2];
	expansionObject::two_Diff(b2z, b1z, bvz);
	double bvzt[4];
	expansionObject::Two_One_Prod(bvz, bt, bvzt);
	double bz[5];
	int bz_len = expansionObject::Gen_Sum(1, &b1z, 4, bvzt, bz);
	double cvx[2];
	expansionObject::two_Diff(c2x, c1x, cvx);
	double cvxt[4];
	expansionObject::Two_One_Prod(cvx, ct, cvxt);
	double cx[5];
	int cx_len = expansionObject::Gen_Sum(1, &c1x, 4, cvxt, cx);
	double cvy[2];
	expansionObject::two_Diff(c2y, c1y, cvy);
	double cvyt[4];
	expansionObject::Two_One_Prod(cvy, ct, cvyt);
	double cy[5];
	int cy_len = expansionObject::Gen_Sum(1, &c1y, 4, cvyt, cy);
	double cvz[2];
	expansionObject::two_Diff(c2z, c1z, cvz);
	double cvzt[4];
	expansionObject::Two_One_Prod(cvz, ct, cvzt);
	double cz[5];
	int cz_len = expansionObject::Gen_Sum(1, &c1z, 4, cvzt, cz);
	double dvx[2];
	expansionObject::two_Diff(d2x, d1x, dvx);
	double dvxt[4];
	expansionObject::Two_One_Prod(dvx, dt, dvxt);
	double dx[5];
	int dx_len = expansionObject::Gen_Sum(1, &d1x, 4, dvxt, dx);
	double dvy[2];
	expansionObject::two_Diff(d2y, d1y, dvy);
	double dvyt[4];
	expansionObject::Two_One_Prod(dvy, dt, dvyt);
	double dy[5];
	int dy_len = expansionObject::Gen_Sum(1, &d1y, 4, dvyt, dy);
	double dvz[2];
	expansionObject::two_Diff(d2z, d1z, dvz);
	double dvzt[4];
	expansionObject::Two_One_Prod(dvz, dt, dvzt);
	double dz[5];
	int dz_len = expansionObject::Gen_Sum(1, &d1z, 4, dvzt, dz);
	double aex[6];
	int aex_len = expansionObject::Gen_Diff(ax_len, ax, 1, &ex, aex);
	double aey[6];
	int aey_len = expansionObject::Gen_Diff(ay_len, ay, 1, &ey, aey);
	double aez[6];
	int aez_len = expansionObject::Gen_Diff(az_len, az, 1, &ez, aez);
	double bex[6];
	int bex_len = expansionObject::Gen_Diff(bx_len, bx, 1, &ex, bex);
	double bey[6];
	int bey_len = expansionObject::Gen_Diff(by_len, by, 1, &ey, bey);
	double bez[6];
	int bez_len = expansionObject::Gen_Diff(bz_len, bz, 1, &ez, bez);
	double cex[6];
	int cex_len = expansionObject::Gen_Diff(cx_len, cx, 1, &ex, cex);
	double cey[6];
	int cey_len = expansionObject::Gen_Diff(cy_len, cy, 1, &ey, cey);
	double cez[6];
	int cez_len = expansionObject::Gen_Diff(cz_len, cz, 1, &ez, cez);
	double dex[6];
	int dex_len = expansionObject::Gen_Diff(dx_len, dx, 1, &ex, dex);
	double dey[6];
	int dey_len = expansionObject::Gen_Diff(dy_len, dy, 1, &ey, dey);
	double dez[6];
	int dez_len = expansionObject::Gen_Diff(dz_len, dz, 1, &ez, dez);
	double aexbey_p[16], * aexbey = aexbey_p;
	int aexbey_len = expansionObject::Gen_Product_With_PreAlloc(aex_len, aex, bey_len, bey, &aexbey, 16);
	double bexaey_p[16], * bexaey = bexaey_p;
	int bexaey_len = expansionObject::Gen_Product_With_PreAlloc(bex_len, bex, aey_len, aey, &bexaey, 16);
	double ab_p[16], * ab = ab_p;
	int ab_len = expansionObject::Gen_Diff_With_PreAlloc(aexbey_len, aexbey, bexaey_len, bexaey, &ab, 16);
	double bexcey_p[16], * bexcey = bexcey_p;
	int bexcey_len = expansionObject::Gen_Product_With_PreAlloc(bex_len, bex, cey_len, cey, &bexcey, 16);
	double cexbey_p[16], * cexbey = cexbey_p;
	int cexbey_len = expansionObject::Gen_Product_With_PreAlloc(cex_len, cex, bey_len, bey, &cexbey, 16);
	double bc_p[16], * bc = bc_p;
	int bc_len = expansionObject::Gen_Diff_With_PreAlloc(bexcey_len, bexcey, cexbey_len, cexbey, &bc, 16);
	double cexdey_p[16], * cexdey = cexdey_p;
	int cexdey_len = expansionObject::Gen_Product_With_PreAlloc(cex_len, cex, dey_len, dey, &cexdey, 16);
	double dexcey_p[16], * dexcey = dexcey_p;
	int dexcey_len = expansionObject::Gen_Product_With_PreAlloc(dex_len, dex, cey_len, cey, &dexcey, 16);
	double cd_p[16], * cd = cd_p;
	int cd_len = expansionObject::Gen_Diff_With_PreAlloc(cexdey_len, cexdey, dexcey_len, dexcey, &cd, 16);
	double dexaey_p[16], * dexaey = dexaey_p;
	int dexaey_len = expansionObject::Gen_Product_With_PreAlloc(dex_len, dex, aey_len, aey, &dexaey, 16);
	double aexdey_p[16], * aexdey = aexdey_p;
	int aexdey_len = expansionObject::Gen_Product_With_PreAlloc(aex_len, aex, dey_len, dey, &aexdey, 16);
	double da_p[16], * da = da_p;
	int da_len = expansionObject::Gen_Diff_With_PreAlloc(dexaey_len, dexaey, aexdey_len, aexdey, &da, 16);
	double aexcey_p[16], * aexcey = aexcey_p;
	int aexcey_len = expansionObject::Gen_Product_With_PreAlloc(aex_len, aex, cey_len, cey, &aexcey, 16);
	double cexaey_p[16], * cexaey = cexaey_p;
	int cexaey_len = expansionObject::Gen_Product_With_PreAlloc(cex_len, cex, aey_len, aey, &cexaey, 16);
	double ac_p[16], * ac = ac_p;
	int ac_len = expansionObject::Gen_Diff_With_PreAlloc(aexcey_len, aexcey, cexaey_len, cexaey, &ac, 16);
	double bexdey_p[16], * bexdey = bexdey_p;
	int bexdey_len = expansionObject::Gen_Product_With_PreAlloc(bex_len, bex, dey_len, dey, &bexdey, 16);
	double dexbey_p[16], * dexbey = dexbey_p;
	int dexbey_len = expansionObject::Gen_Product_With_PreAlloc(dex_len, dex, bey_len, bey, &dexbey, 16);
	double bd_p[16], * bd = bd_p;
	int bd_len = expansionObject::Gen_Diff_With_PreAlloc(bexdey_len, bexdey, dexbey_len, dexbey, &bd, 16);
	double abc1_p[16], * abc1 = abc1_p;
	int abc1_len = expansionObject::Gen_Product_With_PreAlloc(aez_len, aez, bc_len, bc, &abc1, 16);
	double abc2_p[16], * abc2 = abc2_p;
	int abc2_len = expansionObject::Gen_Product_With_PreAlloc(bez_len, bez, ac_len, ac, &abc2, 16);
	double abc3_p[16], * abc3 = abc3_p;
	int abc3_len = expansionObject::Gen_Product_With_PreAlloc(cez_len, cez, ab_len, ab, &abc3, 16);
	double abc4_p[16], * abc4 = abc4_p;
	int abc4_len = expansionObject::Gen_Sum_With_PreAlloc(abc1_len, abc1, abc3_len, abc3, &abc4, 16);
	double abc_p[16], * abc = abc_p;
	int abc_len = expansionObject::Gen_Diff_With_PreAlloc(abc4_len, abc4, abc2_len, abc2, &abc, 16);
	double bcd1_p[16], * bcd1 = bcd1_p;
	int bcd1_len = expansionObject::Gen_Product_With_PreAlloc(bez_len, bez, cd_len, cd, &bcd1, 16);
	double bcd2_p[16], * bcd2 = bcd2_p;
	int bcd2_len = expansionObject::Gen_Product_With_PreAlloc(cez_len, cez, bd_len, bd, &bcd2, 16);
	double bcd3_p[16], * bcd3 = bcd3_p;
	int bcd3_len = expansionObject::Gen_Product_With_PreAlloc(dez_len, dez, bc_len, bc, &bcd3, 16);
	double bcd4_p[16], * bcd4 = bcd4_p;
	int bcd4_len = expansionObject::Gen_Sum_With_PreAlloc(bcd1_len, bcd1, bcd3_len, bcd3, &bcd4, 16);
	double bcd_p[16], * bcd = bcd_p;
	int bcd_len = expansionObject::Gen_Diff_With_PreAlloc(bcd4_len, bcd4, bcd2_len, bcd2, &bcd, 16);
	double cda1_p[16], * cda1 = cda1_p;
	int cda1_len = expansionObject::Gen_Product_With_PreAlloc(cez_len, cez, da_len, da, &cda1, 16);
	double cda2_p[16], * cda2 = cda2_p;
	int cda2_len = expansionObject::Gen_Product_With_PreAlloc(dez_len, dez, ac_len, ac, &cda2, 16);
	double cda3_p[16], * cda3 = cda3_p;
	int cda3_len = expansionObject::Gen_Product_With_PreAlloc(aez_len, aez, cd_len, cd, &cda3, 16);
	double cda4_p[16], * cda4 = cda4_p;
	int cda4_len = expansionObject::Gen_Sum_With_PreAlloc(cda1_len, cda1, cda3_len, cda3, &cda4, 16);
	double cda_p[16], * cda = cda_p;
	int cda_len = expansionObject::Gen_Sum_With_PreAlloc(cda4_len, cda4, cda2_len, cda2, &cda, 16);
	double dab1_p[16], * dab1 = dab1_p;
	int dab1_len = expansionObject::Gen_Product_With_PreAlloc(dez_len, dez, ab_len, ab, &dab1, 16);
	double dab2_p[16], * dab2 = dab2_p;
	int dab2_len = expansionObject::Gen_Product_With_PreAlloc(aez_len, aez, bd_len, bd, &dab2, 16);
	double dab3_p[16], * dab3 = dab3_p;
	int dab3_len = expansionObject::Gen_Product_With_PreAlloc(bez_len, bez, da_len, da, &dab3, 16);
	double dab4_p[16], * dab4 = dab4_p;
	int dab4_len = expansionObject::Gen_Sum_With_PreAlloc(dab1_len, dab1, dab3_len, dab3, &dab4, 16);
	double dab_p[16], * dab = dab_p;
	int dab_len = expansionObject::Gen_Sum_With_PreAlloc(dab4_len, dab4, dab2_len, dab2, &dab, 16);
	double al1_p[16], * al1 = al1_p;
	int al1_len = expansionObject::Gen_Product_With_PreAlloc(aex_len, aex, aex_len, aex, &al1, 16);
	double al2_p[16], * al2 = al2_p;
	int al2_len = expansionObject::Gen_Product_With_PreAlloc(aey_len, aey, aey_len, aey, &al2, 16);
	double al3_p[16], * al3 = al3_p;
	int al3_len = expansionObject::Gen_Product_With_PreAlloc(aez_len, aez, aez_len, aez, &al3, 16);
	double al4_p[16], * al4 = al4_p;
	int al4_len = expansionObject::Gen_Sum_With_PreAlloc(al1_len, al1, al2_len, al2, &al4, 16);
	double alift_p[16], * alift = alift_p;
	int alift_len = expansionObject::Gen_Sum_With_PreAlloc(al4_len, al4, al3_len, al3, &alift, 16);
	double bl1_p[16], * bl1 = bl1_p;
	int bl1_len = expansionObject::Gen_Product_With_PreAlloc(bex_len, bex, bex_len, bex, &bl1, 16);
	double bl2_p[16], * bl2 = bl2_p;
	int bl2_len = expansionObject::Gen_Product_With_PreAlloc(bey_len, bey, bey_len, bey, &bl2, 16);
	double bl3_p[16], * bl3 = bl3_p;
	int bl3_len = expansionObject::Gen_Product_With_PreAlloc(bez_len, bez, bez_len, bez, &bl3, 16);
	double bl4_p[16], * bl4 = bl4_p;
	int bl4_len = expansionObject::Gen_Sum_With_PreAlloc(bl1_len, bl1, bl2_len, bl2, &bl4, 16);
	double blift_p[16], * blift = blift_p;
	int blift_len = expansionObject::Gen_Sum_With_PreAlloc(bl4_len, bl4, bl3_len, bl3, &blift, 16);
	double cl1_p[16], * cl1 = cl1_p;
	int cl1_len = expansionObject::Gen_Product_With_PreAlloc(cex_len, cex, cex_len, cex, &cl1, 16);
	double cl2_p[16], * cl2 = cl2_p;
	int cl2_len = expansionObject::Gen_Product_With_PreAlloc(cey_len, cey, cey_len, cey, &cl2, 16);
	double cl3_p[16], * cl3 = cl3_p;
	int cl3_len = expansionObject::Gen_Product_With_PreAlloc(cez_len, cez, cez_len, cez, &cl3, 16);
	double cl4_p[16], * cl4 = cl4_p;
	int cl4_len = expansionObject::Gen_Sum_With_PreAlloc(cl1_len, cl1, cl2_len, cl2, &cl4, 16);
	double clift_p[16], * clift = clift_p;
	int clift_len = expansionObject::Gen_Sum_With_PreAlloc(cl4_len, cl4, cl3_len, cl3, &clift, 16);
	double dl1_p[16], * dl1 = dl1_p;
	int dl1_len = expansionObject::Gen_Product_With_PreAlloc(dex_len, dex, dex_len, dex, &dl1, 16);
	double dl2_p[16], * dl2 = dl2_p;
	int dl2_len = expansionObject::Gen_Product_With_PreAlloc(dey_len, dey, dey_len, dey, &dl2, 16);
	double dl3_p[16], * dl3 = dl3_p;
	int dl3_len = expansionObject::Gen_Product_With_PreAlloc(dez_len, dez, dez_len, dez, &dl3, 16);
	double dl4_p[16], * dl4 = dl4_p;
	int dl4_len = expansionObject::Gen_Sum_With_PreAlloc(dl1_len, dl1, dl2_len, dl2, &dl4, 16);
	double dlift_p[16], * dlift = dlift_p;
	int dlift_len = expansionObject::Gen_Sum_With_PreAlloc(dl4_len, dl4, dl3_len, dl3, &dlift, 16);
	double ds1_p[16], * ds1 = ds1_p;
	int ds1_len = expansionObject::Gen_Product_With_PreAlloc(dlift_len, dlift, abc_len, abc, &ds1, 16);
	double ds2_p[16], * ds2 = ds2_p;
	int ds2_len = expansionObject::Gen_Product_With_PreAlloc(clift_len, clift, dab_len, dab, &ds2, 16);
	double dl_p[16], * dl = dl_p;
	int dl_len = expansionObject::Gen_Diff_With_PreAlloc(ds2_len, ds2, ds1_len, ds1, &dl, 16);
	double dr1_p[16], * dr1 = dr1_p;
	int dr1_len = expansionObject::Gen_Product_With_PreAlloc(blift_len, blift, cda_len, cda, &dr1, 16);
	double dr2_p[16], * dr2 = dr2_p;
	int dr2_len = expansionObject::Gen_Product_With_PreAlloc(alift_len, alift, bcd_len, bcd, &dr2, 16);
	double dr_p[16], * dr = dr_p;
	int dr_len = expansionObject::Gen_Diff_With_PreAlloc(dr2_len, dr2, dr1_len, dr1, &dr, 16);
	double det_p[16], * det = det_p;
	int det_len = expansionObject::Gen_Sum_With_PreAlloc(dl_len, dl, dr_len, dr, &det, 16);

	double return_value = det[det_len - 1];
	if (det_p != det) FreeDoubles(det);
	if (dr_p != dr) FreeDoubles(dr);
	if (dr2_p != dr2) FreeDoubles(dr2);
	if (dr1_p != dr1) FreeDoubles(dr1);
	if (dl_p != dl) FreeDoubles(dl);
	if (ds2_p != ds2) FreeDoubles(ds2);
	if (ds1_p != ds1) FreeDoubles(ds1);
	if (dlift_p != dlift) FreeDoubles(dlift);
	if (dl4_p != dl4) FreeDoubles(dl4);
	if (dl3_p != dl3) FreeDoubles(dl3);
	if (dl2_p != dl2) FreeDoubles(dl2);
	if (dl1_p != dl1) FreeDoubles(dl1);
	if (clift_p != clift) FreeDoubles(clift);
	if (cl4_p != cl4) FreeDoubles(cl4);
	if (cl3_p != cl3) FreeDoubles(cl3);
	if (cl2_p != cl2) FreeDoubles(cl2);
	if (cl1_p != cl1) FreeDoubles(cl1);
	if (blift_p != blift) FreeDoubles(blift);
	if (bl4_p != bl4) FreeDoubles(bl4);
	if (bl3_p != bl3) FreeDoubles(bl3);
	if (bl2_p != bl2) FreeDoubles(bl2);
	if (bl1_p != bl1) FreeDoubles(bl1);
	if (alift_p != alift) FreeDoubles(alift);
	if (al4_p != al4) FreeDoubles(al4);
	if (al3_p != al3) FreeDoubles(al3);
	if (al2_p != al2) FreeDoubles(al2);
	if (al1_p != al1) FreeDoubles(al1);
	if (dab_p != dab) FreeDoubles(dab);
	if (dab4_p != dab4) FreeDoubles(dab4);
	if (dab3_p != dab3) FreeDoubles(dab3);
	if (dab2_p != dab2) FreeDoubles(dab2);
	if (dab1_p != dab1) FreeDoubles(dab1);
	if (cda_p != cda) FreeDoubles(cda);
	if (cda4_p != cda4) FreeDoubles(cda4);
	if (cda3_p != cda3) FreeDoubles(cda3);
	if (cda2_p != cda2) FreeDoubles(cda2);
	if (cda1_p != cda1) FreeDoubles(cda1);
	if (bcd_p != bcd) FreeDoubles(bcd);
	if (bcd4_p != bcd4) FreeDoubles(bcd4);
	if (bcd3_p != bcd3) FreeDoubles(bcd3);
	if (bcd2_p != bcd2) FreeDoubles(bcd2);
	if (bcd1_p != bcd1) FreeDoubles(bcd1);
	if (abc_p != abc) FreeDoubles(abc);
	if (abc4_p != abc4) FreeDoubles(abc4);
	if (abc3_p != abc3) FreeDoubles(abc3);
	if (abc2_p != abc2) FreeDoubles(abc2);
	if (abc1_p != abc1) FreeDoubles(abc1);
	if (bd_p != bd) FreeDoubles(bd);
	if (dexbey_p != dexbey) FreeDoubles(dexbey);
	if (bexdey_p != bexdey) FreeDoubles(bexdey);
	if (ac_p != ac) FreeDoubles(ac);
	if (cexaey_p != cexaey) FreeDoubles(cexaey);
	if (aexcey_p != aexcey) FreeDoubles(aexcey);
	if (da_p != da) FreeDoubles(da);
	if (aexdey_p != aexdey) FreeDoubles(aexdey);
	if (dexaey_p != dexaey) FreeDoubles(dexaey);
	if (cd_p != cd) FreeDoubles(cd);
	if (dexcey_p != dexcey) FreeDoubles(dexcey);
	if (cexdey_p != cexdey) FreeDoubles(cexdey);
	if (bc_p != bc) FreeDoubles(bc);
	if (cexbey_p != cexbey) FreeDoubles(cexbey);
	if (bexcey_p != bexcey) FreeDoubles(bexcey);
	if (ab_p != ab) FreeDoubles(ab);
	if (bexaey_p != bexaey) FreeDoubles(bexaey);
	if (aexbey_p != aexbey) FreeDoubles(aexbey);

	if (return_value > 0) return IP_Sign::POSITIVE;
	if (return_value < 0) return IP_Sign::NEGATIVE;
	if (return_value == 0) return IP_Sign::ZERO;
	return IP_Sign::UNDEFINED;
}

inline int inSphere_LLLLE(double a1x, double a1y, double a1z, double a2x, double a2y, double a2z, double at, double b1x, double b1y, double b1z, double b2x, double b2y, double b2z, double bt, double c1x, double c1y, double c1z, double c2x, double c2y, double c2z, double ct, double d1x, double d1y, double d1z, double d2x, double d2y, double d2z, double dt, double ex, double ey, double ez)
{
	int ret;
	ret = inSphere_LLLLE_filtered(a1x, a1y, a1z, a2x, a2y, a2z, at, b1x, b1y, b1z, b2x, b2y, b2z, bt, c1x, c1y, c1z, c2x, c2y, c2z, ct, d1x, d1y, d1z, d2x, d2y, d2z, dt, ex, ey, ez);
	if (ret != Filtered_Sign::UNCERTAIN) return ret;
	ret = inSphere_LLLLE_interval(a1x, a1y, a1z, a2x, a2y, a2z, at, b1x, b1y, b1z, b2x, b2y, b2z, bt, c1x, c1y, c1z, c2x, c2y, c2z, ct, d1x, d1y, d1z, d2x, d2y, d2z, dt, ex, ey, ez);
	if (ret != Filtered_Sign::UNCERTAIN) return ret;
	return inSphere_LLLLE_exact(a1x, a1y, a1z, a2x, a2y, a2z, at, b1x, b1y, b1z, b2x, b2y, b2z, bt, c1x, c1y, c1z, c2x, c2y, c2z, ct, d1x, d1y, d1z, d2x, d2y, d2z, dt, ex, ey, ez);
}

inline int inSphere_LLLLL_filtered(double a1x, double a1y, double a1z, double a2x, double a2y, double a2z, double at, double b1x, double b1y, double b1z, double b2x, double b2y, double b2z, double bt, double c1x, double c1y, double c1z, double c2x, double c2y, double c2z, double ct, double d1x, double d1y, double d1z, double d2x, double d2y, double d2z, double dt, double e1x, double e1y, double e1z, double e2x, double e2y, double e2z, double et)
{
	const double evx = e2x - e1x;
	const double evxt = evx * et;
	const double ex = e1x + evxt;
	const double evy = e2y - e1y;
	const double evyt = evy * et;
	const double ey = e1y + evyt;
	const double evz = e2z - e1z;
	const double evzt = evz * et;
	const double ez = e1z + evzt;
	const double avx = a2x - a1x;
	const double avxt = avx * at;
	const double ax = a1x + avxt;
	const double avy = a2y - a1y;
	const double avyt = avy * at;
	const double ay = a1y + avyt;
	const double avz = a2z - a1z;
	const double avzt = avz * at;
	const double az = a1z + avzt;
	const double bvx = b2x - b1x;
	const double bvxt = bvx * bt;
	const double bx = b1x + bvxt;
	const double bvy = b2y - b1y;
	const double bvyt = bvy * bt;
	const double by = b1y + bvyt;
	const double bvz = b2z - b1z;
	const double bvzt = bvz * bt;
	const double bz = b1z + bvzt;
	const double cvx = c2x - c1x;
	const double cvxt = cvx * ct;
	const double cx = c1x + cvxt;
	const double cvy = c2y - c1y;
	const double cvyt = cvy * ct;
	const double cy = c1y + cvyt;
	const double cvz = c2z - c1z;
	const double cvzt = cvz * ct;
	const double cz = c1z + cvzt;
	const double dvx = d2x - d1x;
	const double dvxt = dvx * dt;
	const double dx = d1x + dvxt;
	const double dvy = d2y - d1y;
	const double dvyt = dvy * dt;
	const double dy = d1y + dvyt;
	const double dvz = d2z - d1z;
	const double dvzt = dvz * dt;
	const double dz = d1z + dvzt;
	const double aex = ax - ex;
	const double aey = ay - ey;
	const double aez = az - ez;
	const double bex = bx - ex;
	const double bey = by - ey;
	const double bez = bz - ez;
	const double cex = cx - ex;
	const double cey = cy - ey;
	const double cez = cz - ez;
	const double dex = dx - ex;
	const double dey = dy - ey;
	const double dez = dz - ez;
	const double aexbey = aex * bey;
	const double bexaey = bex * aey;
	const double ab = aexbey - bexaey;
	const double bexcey = bex * cey;
	const double cexbey = cex * bey;
	const double bc = bexcey - cexbey;
	const double cexdey = cex * dey;
	const double dexcey = dex * cey;
	const double cd = cexdey - dexcey;
	const double dexaey = dex * aey;
	const double aexdey = aex * dey;
	const double da = dexaey - aexdey;
	const double aexcey = aex * cey;
	const double cexaey = cex * aey;
	const double ac = aexcey - cexaey;
	const double bexdey = bex * dey;
	const double dexbey = dex * bey;
	const double bd = bexdey - dexbey;
	const double abc1 = aez * bc;
	const double abc2 = bez * ac;
	const double abc3 = cez * ab;
	const double abc4 = abc1 + abc3;
	const double abc = abc4 - abc2;
	const double bcd1 = bez * cd;
	const double bcd2 = cez * bd;
	const double bcd3 = dez * bc;
	const double bcd4 = bcd1 + bcd3;
	const double bcd = bcd4 - bcd2;
	const double cda1 = cez * da;
	const double cda2 = dez * ac;
	const double cda3 = aez * cd;
	const double cda4 = cda1 + cda3;
	const double cda = cda4 + cda2;
	const double dab1 = dez * ab;
	const double dab2 = aez * bd;
	const double dab3 = bez * da;
	const double dab4 = dab1 + dab3;
	const double dab = dab4 + dab2;
	const double al1 = aex * aex;
	const double al2 = aey * aey;
	const double al3 = aez * aez;
	const double al4 = al1 + al2;
	const double alift = al4 + al3;
	const double bl1 = bex * bex;
	const double bl2 = bey * bey;
	const double bl3 = bez * bez;
	const double bl4 = bl1 + bl2;
	const double blift = bl4 + bl3;
	const double cl1 = cex * cex;
	const double cl2 = cey * cey;
	const double cl3 = cez * cez;
	const double cl4 = cl1 + cl2;
	const double clift = cl4 + cl3;
	const double dl1 = dex * dex;
	const double dl2 = dey * dey;
	const double dl3 = dez * dez;
	const double dl4 = dl1 + dl2;
	const double dlift = dl4 + dl3;
	const double ds1 = dlift * abc;
	const double ds2 = clift * dab;
	const double dl = ds2 - ds1;
	const double dr1 = blift * cda;
	const double dr2 = alift * bcd;
	const double dr = dr2 - dr1;
	const double det = dl + dr;

	double _tmp_fabs;

	double max_var = 0.0;
	if ((_tmp_fabs = fabs(a1x)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(a1y)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(a1z)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(at)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(b1x)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(b1y)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(b1z)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(bt)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(c1x)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(c1y)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(c1z)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(ct)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(d1x)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(d1y)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(d1z)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(dt)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(e1x)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(e1y)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(e1z)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(et)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(evx)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(evy)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(evz)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(avx)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(avy)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(avz)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(bvx)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(bvy)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(bvz)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(cvx)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(cvy)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(cvz)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(dvx)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(dvy)) > max_var) max_var = _tmp_fabs;
	if ((_tmp_fabs = fabs(dvz)) > max_var) max_var = _tmp_fabs;
	double epsilon = max_var;
	epsilon *= epsilon;
	epsilon *= epsilon;
	epsilon *= epsilon;
	epsilon *= max_var;
	epsilon *= max_var;
	epsilon *= 1.991793396882719e-10;
	if (det > epsilon) return IP_Sign::POSITIVE;
	if (-det > epsilon) return IP_Sign::NEGATIVE;
	return Filtered_Sign::UNCERTAIN;
}

inline int inSphere_LLLLL_interval(interval_number a1x, interval_number a1y, interval_number a1z, interval_number a2x, interval_number a2y, interval_number a2z, interval_number at, interval_number b1x, interval_number b1y, interval_number b1z, interval_number b2x, interval_number b2y, interval_number b2z, interval_number bt, interval_number c1x, interval_number c1y, interval_number c1z, interval_number c2x, interval_number c2y, interval_number c2z, interval_number ct, interval_number d1x, interval_number d1y, interval_number d1z, interval_number d2x, interval_number d2y, interval_number d2z, interval_number dt, interval_number e1x, interval_number e1y, interval_number e1z, interval_number e2x, interval_number e2y, interval_number e2z, interval_number et)
{
	setFPUModeToRoundUP();
	const interval_number evx(e2x - e1x);
	const interval_number evxt(evx * et);
	const interval_number ex(e1x + evxt);
	const interval_number evy(e2y - e1y);
	const interval_number evyt(evy * et);
	const interval_number ey(e1y + evyt);
	const interval_number evz(e2z - e1z);
	const interval_number evzt(evz * et);
	const interval_number ez(e1z + evzt);
	const interval_number avx(a2x - a1x);
	const interval_number avxt(avx * at);
	const interval_number ax(a1x + avxt);
	const interval_number avy(a2y - a1y);
	const interval_number avyt(avy * at);
	const interval_number ay(a1y + avyt);
	const interval_number avz(a2z - a1z);
	const interval_number avzt(avz * at);
	const interval_number az(a1z + avzt);
	const interval_number bvx(b2x - b1x);
	const interval_number bvxt(bvx * bt);
	const interval_number bx(b1x + bvxt);
	const interval_number bvy(b2y - b1y);
	const interval_number bvyt(bvy * bt);
	const interval_number by(b1y + bvyt);
	const interval_number bvz(b2z - b1z);
	const interval_number bvzt(bvz * bt);
	const interval_number bz(b1z + bvzt);
	const interval_number cvx(c2x - c1x);
	const interval_number cvxt(cvx * ct);
	const interval_number cx(c1x + cvxt);
	const interval_number cvy(c2y - c1y);
	const interval_number cvyt(cvy * ct);
	const interval_number cy(c1y + cvyt);
	const interval_number cvz(c2z - c1z);
	const interval_number cvzt(cvz * ct);
	const interval_number cz(c1z + cvzt);
	const interval_number dvx(d2x - d1x);
	const interval_number dvxt(dvx * dt);
	const interval_number dx(d1x + dvxt);
	const interval_number dvy(d2y - d1y);
	const interval_number dvyt(dvy * dt);
	const interval_number dy(d1y + dvyt);
	const interval_number dvz(d2z - d1z);
	const interval_number dvzt(dvz * dt);
	const interval_number dz(d1z + dvzt);
	const interval_number aex(ax - ex);
	const interval_number aey(ay - ey);
	const interval_number aez(az - ez);
	const interval_number bex(bx - ex);
	const interval_number bey(by - ey);
	const interval_number bez(bz - ez);
	const interval_number cex(cx - ex);
	const interval_number cey(cy - ey);
	const interval_number cez(cz - ez);
	const interval_number dex(dx - ex);
	const interval_number dey(dy - ey);
	const interval_number dez(dz - ez);
	const interval_number aexbey(aex * bey);
	const interval_number bexaey(bex * aey);
	const interval_number ab(aexbey - bexaey);
	const interval_number bexcey(bex * cey);
	const interval_number cexbey(cex * bey);
	const interval_number bc(bexcey - cexbey);
	const interval_number cexdey(cex * dey);
	const interval_number dexcey(dex * cey);
	const interval_number cd(cexdey - dexcey);
	const interval_number dexaey(dex * aey);
	const interval_number aexdey(aex * dey);
	const interval_number da(dexaey - aexdey);
	const interval_number aexcey(aex * cey);
	const interval_number cexaey(cex * aey);
	const interval_number ac(aexcey - cexaey);
	const interval_number bexdey(bex * dey);
	const interval_number dexbey(dex * bey);
	const interval_number bd(bexdey - dexbey);
	const interval_number abc1(aez * bc);
	const interval_number abc2(bez * ac);
	const interval_number abc3(cez * ab);
	const interval_number abc4(abc1 + abc3);
	const interval_number abc(abc4 - abc2);
	const interval_number bcd1(bez * cd);
	const interval_number bcd2(cez * bd);
	const interval_number bcd3(dez * bc);
	const interval_number bcd4(bcd1 + bcd3);
	const interval_number bcd(bcd4 - bcd2);
	const interval_number cda1(cez * da);
	const interval_number cda2(dez * ac);
	const interval_number cda3(aez * cd);
	const interval_number cda4(cda1 + cda3);
	const interval_number cda(cda4 + cda2);
	const interval_number dab1(dez * ab);
	const interval_number dab2(aez * bd);
	const interval_number dab3(bez * da);
	const interval_number dab4(dab1 + dab3);
	const interval_number dab(dab4 + dab2);
	const interval_number al1(aex * aex);
	const interval_number al2(aey * aey);
	const interval_number al3(aez * aez);
	const interval_number al4(al1 + al2);
	const interval_number alift(al4 + al3);
	const interval_number bl1(bex * bex);
	const interval_number bl2(bey * bey);
	const interval_number bl3(bez * bez);
	const interval_number bl4(bl1 + bl2);
	const interval_number blift(bl4 + bl3);
	const interval_number cl1(cex * cex);
	const interval_number cl2(cey * cey);
	const interval_number cl3(cez * cez);
	const interval_number cl4(cl1 + cl2);
	const interval_number clift(cl4 + cl3);
	const interval_number dl1(dex * dex);
	const interval_number dl2(dey * dey);
	const interval_number dl3(dez * dez);
	const interval_number dl4(dl1 + dl2);
	const interval_number dlift(dl4 + dl3);
	const interval_number ds1(dlift * abc);
	const interval_number ds2(clift * dab);
	const interval_number dl(ds2 - ds1);
	const interval_number dr1(blift * cda);
	const interval_number dr2(alift * bcd);
	const interval_number dr(dr2 - dr1);
	const interval_number det(dl + dr);
	setFPUModeToRoundNEAR();

	if (!det.signIsReliable()) return Filtered_Sign::UNCERTAIN;
	return det.sign();
}

inline int inSphere_LLLLL_bigfloat(bigfloat a1x, bigfloat a1y, bigfloat a1z, bigfloat a2x, bigfloat a2y, bigfloat a2z, bigfloat at, bigfloat b1x, bigfloat b1y, bigfloat b1z, bigfloat b2x, bigfloat b2y, bigfloat b2z, bigfloat bt, bigfloat c1x, bigfloat c1y, bigfloat c1z, bigfloat c2x, bigfloat c2y, bigfloat c2z, bigfloat ct, bigfloat d1x, bigfloat d1y, bigfloat d1z, bigfloat d2x, bigfloat d2y, bigfloat d2z, bigfloat dt, bigfloat e1x, bigfloat e1y, bigfloat e1z, bigfloat e2x, bigfloat e2y, bigfloat e2z, bigfloat et)
{
	const bigfloat evx(e2x - e1x);
	const bigfloat evxt(evx * et);
	const bigfloat ex(e1x + evxt);
	const bigfloat evy(e2y - e1y);
	const bigfloat evyt(evy * et);
	const bigfloat ey(e1y + evyt);
	const bigfloat evz(e2z - e1z);
	const bigfloat evzt(evz * et);
	const bigfloat ez(e1z + evzt);
	const bigfloat avx(a2x - a1x);
	const bigfloat avxt(avx * at);
	const bigfloat ax(a1x + avxt);
	const bigfloat avy(a2y - a1y);
	const bigfloat avyt(avy * at);
	const bigfloat ay(a1y + avyt);
	const bigfloat avz(a2z - a1z);
	const bigfloat avzt(avz * at);
	const bigfloat az(a1z + avzt);
	const bigfloat bvx(b2x - b1x);
	const bigfloat bvxt(bvx * bt);
	const bigfloat bx(b1x + bvxt);
	const bigfloat bvy(b2y - b1y);
	const bigfloat bvyt(bvy * bt);
	const bigfloat by(b1y + bvyt);
	const bigfloat bvz(b2z - b1z);
	const bigfloat bvzt(bvz * bt);
	const bigfloat bz(b1z + bvzt);
	const bigfloat cvx(c2x - c1x);
	const bigfloat cvxt(cvx * ct);
	const bigfloat cx(c1x + cvxt);
	const bigfloat cvy(c2y - c1y);
	const bigfloat cvyt(cvy * ct);
	const bigfloat cy(c1y + cvyt);
	const bigfloat cvz(c2z - c1z);
	const bigfloat cvzt(cvz * ct);
	const bigfloat cz(c1z + cvzt);
	const bigfloat dvx(d2x - d1x);
	const bigfloat dvxt(dvx * dt);
	const bigfloat dx(d1x + dvxt);
	const bigfloat dvy(d2y - d1y);
	const bigfloat dvyt(dvy * dt);
	const bigfloat dy(d1y + dvyt);
	const bigfloat dvz(d2z - d1z);
	const bigfloat dvzt(dvz * dt);
	const bigfloat dz(d1z + dvzt);
	const bigfloat aex(ax - ex);
	const bigfloat aey(ay - ey);
	const bigfloat aez(az - ez);
	const bigfloat bex(bx - ex);
	const bigfloat bey(by - ey);
	const bigfloat bez(bz - ez);
	const bigfloat cex(cx - ex);
	const bigfloat cey(cy - ey);
	const bigfloat cez(cz - ez);
	const bigfloat dex(dx - ex);
	const bigfloat dey(dy - ey);
	const bigfloat dez(dz - ez);
	const bigfloat aexbey(aex * bey);
	const bigfloat bexaey(bex * aey);
	const bigfloat ab(aexbey - bexaey);
	const bigfloat bexcey(bex * cey);
	const bigfloat cexbey(cex * bey);
	const bigfloat bc(bexcey - cexbey);
	const bigfloat cexdey(cex * dey);
	const bigfloat dexcey(dex * cey);
	const bigfloat cd(cexdey - dexcey);
	const bigfloat dexaey(dex * aey);
	const bigfloat aexdey(aex * dey);
	const bigfloat da(dexaey - aexdey);
	const bigfloat aexcey(aex * cey);
	const bigfloat cexaey(cex * aey);
	const bigfloat ac(aexcey - cexaey);
	const bigfloat bexdey(bex * dey);
	const bigfloat dexbey(dex * bey);
	const bigfloat bd(bexdey - dexbey);
	const bigfloat abc1(aez * bc);
	const bigfloat abc2(bez * ac);
	const bigfloat abc3(cez * ab);
	const bigfloat abc4(abc1 + abc3);
	const bigfloat abc(abc4 - abc2);
	const bigfloat bcd1(bez * cd);
	const bigfloat bcd2(cez * bd);
	const bigfloat bcd3(dez * bc);
	const bigfloat bcd4(bcd1 + bcd3);
	const bigfloat bcd(bcd4 - bcd2);
	const bigfloat cda1(cez * da);
	const bigfloat cda2(dez * ac);
	const bigfloat cda3(aez * cd);
	const bigfloat cda4(cda1 + cda3);
	const bigfloat cda(cda4 + cda2);
	const bigfloat dab1(dez * ab);
	const bigfloat dab2(aez * bd);
	const bigfloat dab3(bez * da);
	const bigfloat dab4(dab1 + dab3);
	const bigfloat dab(dab4 + dab2);
	const bigfloat al1(aex * aex);
	const bigfloat al2(aey * aey);
	const bigfloat al3(aez * aez);
	const bigfloat al4(al1 + al2);
	const bigfloat alift(al4 + al3);
	const bigfloat bl1(bex * bex);
	const bigfloat bl2(bey * bey);
	const bigfloat bl3(bez * bez);
	const bigfloat bl4(bl1 + bl2);
	const bigfloat blift(bl4 + bl3);
	const bigfloat cl1(cex * cex);
	const bigfloat cl2(cey * cey);
	const bigfloat cl3(cez * cez);
	const bigfloat cl4(cl1 + cl2);
	const bigfloat clift(cl4 + cl3);
	const bigfloat dl1(dex * dex);
	const bigfloat dl2(dey * dey);
	const bigfloat dl3(dez * dez);
	const bigfloat dl4(dl1 + dl2);
	const bigfloat dlift(dl4 + dl3);
	const bigfloat ds1(dlift * abc);
	const bigfloat ds2(clift * dab);
	const bigfloat dl(ds2 - ds1);
	const bigfloat dr1(blift * cda);
	const bigfloat dr2(alift * bcd);
	const bigfloat dr(dr2 - dr1);
	const bigfloat det(dl + dr);
	return sgn(det);
}

inline int inSphere_LLLLL_exact(double a1x, double a1y, double a1z, double a2x, double a2y, double a2z, double at, double b1x, double b1y, double b1z, double b2x, double b2y, double b2z, double bt, double c1x, double c1y, double c1z, double c2x, double c2y, double c2z, double ct, double d1x, double d1y, double d1z, double d2x, double d2y, double d2z, double dt, double e1x, double e1y, double e1z, double e2x, double e2y, double e2z, double et)
{
	double evx[2];
	expansionObject::two_Diff(e2x, e1x, evx);
	double evxt[4];
	expansionObject::Two_One_Prod(evx, et, evxt);
	double ex[5];
	int ex_len = expansionObject::Gen_Sum(1, &e1x, 4, evxt, ex);
	double evy[2];
	expansionObject::two_Diff(e2y, e1y, evy);
	double evyt[4];
	expansionObject::Two_One_Prod(evy, et, evyt);
	double ey[5];
	int ey_len = expansionObject::Gen_Sum(1, &e1y, 4, evyt, ey);
	double evz[2];
	expansionObject::two_Diff(e2z, e1z, evz);
	double evzt[4];
	expansionObject::Two_One_Prod(evz, et, evzt);
	double ez[5];
	int ez_len = expansionObject::Gen_Sum(1, &e1z, 4, evzt, ez);
	double avx[2];
	expansionObject::two_Diff(a2x, a1x, avx);
	double avxt[4];
	expansionObject::Two_One_Prod(avx, at, avxt);
	double ax[5];
	int ax_len = expansionObject::Gen_Sum(1, &a1x, 4, avxt, ax);
	double avy[2];
	expansionObject::two_Diff(a2y, a1y, avy);
	double avyt[4];
	expansionObject::Two_One_Prod(avy, at, avyt);
	double ay[5];
	int ay_len = expansionObject::Gen_Sum(1, &a1y, 4, avyt, ay);
	double avz[2];
	expansionObject::two_Diff(a2z, a1z, avz);
	double avzt[4];
	expansionObject::Two_One_Prod(avz, at, avzt);
	double az[5];
	int az_len = expansionObject::Gen_Sum(1, &a1z, 4, avzt, az);
	double bvx[2];
	expansionObject::two_Diff(b2x, b1x, bvx);
	double bvxt[4];
	expansionObject::Two_One_Prod(bvx, bt, bvxt);
	double bx[5];
	int bx_len = expansionObject::Gen_Sum(1, &b1x, 4, bvxt, bx);
	double bvy[2];
	expansionObject::two_Diff(b2y, b1y, bvy);
	double bvyt[4];
	expansionObject::Two_One_Prod(bvy, bt, bvyt);
	double by[5];
	int by_len = expansionObject::Gen_Sum(1, &b1y, 4, bvyt, by);
	double bvz[2];
	expansionObject::two_Diff(b2z, b1z, bvz);
	double bvzt[4];
	expansionObject::Two_One_Prod(bvz, bt, bvzt);
	double bz[5];
	int bz_len = expansionObject::Gen_Sum(1, &b1z, 4, bvzt, bz);
	double cvx[2];
	expansionObject::two_Diff(c2x, c1x, cvx);
	double cvxt[4];
	expansionObject::Two_One_Prod(cvx, ct, cvxt);
	double cx[5];
	int cx_len = expansionObject::Gen_Sum(1, &c1x, 4, cvxt, cx);
	double cvy[2];
	expansionObject::two_Diff(c2y, c1y, cvy);
	double cvyt[4];
	expansionObject::Two_One_Prod(cvy, ct, cvyt);
	double cy[5];
	int cy_len = expansionObject::Gen_Sum(1, &c1y, 4, cvyt, cy);
	double cvz[2];
	expansionObject::two_Diff(c2z, c1z, cvz);
	double cvzt[4];
	expansionObject::Two_One_Prod(cvz, ct, cvzt);
	double cz[5];
	int cz_len = expansionObject::Gen_Sum(1, &c1z, 4, cvzt, cz);
	double dvx[2];
	expansionObject::two_Diff(d2x, d1x, dvx);
	double dvxt[4];
	expansionObject::Two_One_Prod(dvx, dt, dvxt);
	double dx[5];
	int dx_len = expansionObject::Gen_Sum(1, &d1x, 4, dvxt, dx);
	double dvy[2];
	expansionObject::two_Diff(d2y, d1y, dvy);
	double dvyt[4];
	expansionObject::Two_One_Prod(dvy, dt, dvyt);
	double dy[5];
	int dy_len = expansionObject::Gen_Sum(1, &d1y, 4, dvyt, dy);
	double dvz[2];
	expansionObject::two_Diff(d2z, d1z, dvz);
	double dvzt[4];
	expansionObject::Two_One_Prod(dvz, dt, dvzt);
	double dz[5];
	int dz_len = expansionObject::Gen_Sum(1, &d1z, 4, dvzt, dz);
	double aex[10];
	int aex_len = expansionObject::Gen_Diff(ax_len, ax, ex_len, ex, aex);
	double aey[10];
	int aey_len = expansionObject::Gen_Diff(ay_len, ay, ey_len, ey, aey);
	double aez[10];
	int aez_len = expansionObject::Gen_Diff(az_len, az, ez_len, ez, aez);
	double bex[10];
	int bex_len = expansionObject::Gen_Diff(bx_len, bx, ex_len, ex, bex);
	double bey[10];
	int bey_len = expansionObject::Gen_Diff(by_len, by, ey_len, ey, bey);
	double bez[10];
	int bez_len = expansionObject::Gen_Diff(bz_len, bz, ez_len, ez, bez);
	double cex[10];
	int cex_len = expansionObject::Gen_Diff(cx_len, cx, ex_len, ex, cex);
	double cey[10];
	int cey_len = expansionObject::Gen_Diff(cy_len, cy, ey_len, ey, cey);
	double cez[10];
	int cez_len = expansionObject::Gen_Diff(cz_len, cz, ez_len, ez, cez);
	double dex[10];
	int dex_len = expansionObject::Gen_Diff(dx_len, dx, ex_len, ex, dex);
	double dey[10];
	int dey_len = expansionObject::Gen_Diff(dy_len, dy, ey_len, ey, dey);
	double dez[10];
	int dez_len = expansionObject::Gen_Diff(dz_len, dz, ez_len, ez, dez);
	double aexbey_p[16], * aexbey = aexbey_p;
	int aexbey_len = expansionObject::Gen_Product_With_PreAlloc(aex_len, aex, bey_len, bey, &aexbey, 16);
	double bexaey_p[16], * bexaey = bexaey_p;
	int bexaey_len = expansionObject::Gen_Product_With_PreAlloc(bex_len, bex, aey_len, aey, &bexaey, 16);
	double ab_p[16], * ab = ab_p;
	int ab_len = expansionObject::Gen_Diff_With_PreAlloc(aexbey_len, aexbey, bexaey_len, bexaey, &ab, 16);
	double bexcey_p[16], * bexcey = bexcey_p;
	int bexcey_len = expansionObject::Gen_Product_With_PreAlloc(bex_len, bex, cey_len, cey, &bexcey, 16);
	double cexbey_p[16], * cexbey = cexbey_p;
	int cexbey_len = expansionObject::Gen_Product_With_PreAlloc(cex_len, cex, bey_len, bey, &cexbey, 16);
	double bc_p[16], * bc = bc_p;
	int bc_len = expansionObject::Gen_Diff_With_PreAlloc(bexcey_len, bexcey, cexbey_len, cexbey, &bc, 16);
	double cexdey_p[16], * cexdey = cexdey_p;
	int cexdey_len = expansionObject::Gen_Product_With_PreAlloc(cex_len, cex, dey_len, dey, &cexdey, 16);
	double dexcey_p[16], * dexcey = dexcey_p;
	int dexcey_len = expansionObject::Gen_Product_With_PreAlloc(dex_len, dex, cey_len, cey, &dexcey, 16);
	double cd_p[16], * cd = cd_p;
	int cd_len = expansionObject::Gen_Diff_With_PreAlloc(cexdey_len, cexdey, dexcey_len, dexcey, &cd, 16);
	double dexaey_p[16], * dexaey = dexaey_p;
	int dexaey_len = expansionObject::Gen_Product_With_PreAlloc(dex_len, dex, aey_len, aey, &dexaey, 16);
	double aexdey_p[16], * aexdey = aexdey_p;
	int aexdey_len = expansionObject::Gen_Product_With_PreAlloc(aex_len, aex, dey_len, dey, &aexdey, 16);
	double da_p[16], * da = da_p;
	int da_len = expansionObject::Gen_Diff_With_PreAlloc(dexaey_len, dexaey, aexdey_len, aexdey, &da, 16);
	double aexcey_p[16], * aexcey = aexcey_p;
	int aexcey_len = expansionObject::Gen_Product_With_PreAlloc(aex_len, aex, cey_len, cey, &aexcey, 16);
	double cexaey_p[16], * cexaey = cexaey_p;
	int cexaey_len = expansionObject::Gen_Product_With_PreAlloc(cex_len, cex, aey_len, aey, &cexaey, 16);
	double ac_p[16], * ac = ac_p;
	int ac_len = expansionObject::Gen_Diff_With_PreAlloc(aexcey_len, aexcey, cexaey_len, cexaey, &ac, 16);
	double bexdey_p[16], * bexdey = bexdey_p;
	int bexdey_len = expansionObject::Gen_Product_With_PreAlloc(bex_len, bex, dey_len, dey, &bexdey, 16);
	double dexbey_p[16], * dexbey = dexbey_p;
	int dexbey_len = expansionObject::Gen_Product_With_PreAlloc(dex_len, dex, bey_len, bey, &dexbey, 16);
	double bd_p[16], * bd = bd_p;
	int bd_len = expansionObject::Gen_Diff_With_PreAlloc(bexdey_len, bexdey, dexbey_len, dexbey, &bd, 16);
	double abc1_p[16], * abc1 = abc1_p;
	int abc1_len = expansionObject::Gen_Product_With_PreAlloc(aez_len, aez, bc_len, bc, &abc1, 16);
	double abc2_p[16], * abc2 = abc2_p;
	int abc2_len = expansionObject::Gen_Product_With_PreAlloc(bez_len, bez, ac_len, ac, &abc2, 16);
	double abc3_p[16], * abc3 = abc3_p;
	int abc3_len = expansionObject::Gen_Product_With_PreAlloc(cez_len, cez, ab_len, ab, &abc3, 16);
	double abc4_p[16], * abc4 = abc4_p;
	int abc4_len = expansionObject::Gen_Sum_With_PreAlloc(abc1_len, abc1, abc3_len, abc3, &abc4, 16);
	double abc_p[16], * abc = abc_p;
	int abc_len = expansionObject::Gen_Diff_With_PreAlloc(abc4_len, abc4, abc2_len, abc2, &abc, 16);
	double bcd1_p[16], * bcd1 = bcd1_p;
	int bcd1_len = expansionObject::Gen_Product_With_PreAlloc(bez_len, bez, cd_len, cd, &bcd1, 16);
	double bcd2_p[16], * bcd2 = bcd2_p;
	int bcd2_len = expansionObject::Gen_Product_With_PreAlloc(cez_len, cez, bd_len, bd, &bcd2, 16);
	double bcd3_p[16], * bcd3 = bcd3_p;
	int bcd3_len = expansionObject::Gen_Product_With_PreAlloc(dez_len, dez, bc_len, bc, &bcd3, 16);
	double bcd4_p[16], * bcd4 = bcd4_p;
	int bcd4_len = expansionObject::Gen_Sum_With_PreAlloc(bcd1_len, bcd1, bcd3_len, bcd3, &bcd4, 16);
	double bcd_p[16], * bcd = bcd_p;
	int bcd_len = expansionObject::Gen_Diff_With_PreAlloc(bcd4_len, bcd4, bcd2_len, bcd2, &bcd, 16);
	double cda1_p[16], * cda1 = cda1_p;
	int cda1_len = expansionObject::Gen_Product_With_PreAlloc(cez_len, cez, da_len, da, &cda1, 16);
	double cda2_p[16], * cda2 = cda2_p;
	int cda2_len = expansionObject::Gen_Product_With_PreAlloc(dez_len, dez, ac_len, ac, &cda2, 16);
	double cda3_p[16], * cda3 = cda3_p;
	int cda3_len = expansionObject::Gen_Product_With_PreAlloc(aez_len, aez, cd_len, cd, &cda3, 16);
	double cda4_p[16], * cda4 = cda4_p;
	int cda4_len = expansionObject::Gen_Sum_With_PreAlloc(cda1_len, cda1, cda3_len, cda3, &cda4, 16);
	double cda_p[16], * cda = cda_p;
	int cda_len = expansionObject::Gen_Sum_With_PreAlloc(cda4_len, cda4, cda2_len, cda2, &cda, 16);
	double dab1_p[16], * dab1 = dab1_p;
	int dab1_len = expansionObject::Gen_Product_With_PreAlloc(dez_len, dez, ab_len, ab, &dab1, 16);
	double dab2_p[16], * dab2 = dab2_p;
	int dab2_len = expansionObject::Gen_Product_With_PreAlloc(aez_len, aez, bd_len, bd, &dab2, 16);
	double dab3_p[16], * dab3 = dab3_p;
	int dab3_len = expansionObject::Gen_Product_With_PreAlloc(bez_len, bez, da_len, da, &dab3, 16);
	double dab4_p[16], * dab4 = dab4_p;
	int dab4_len = expansionObject::Gen_Sum_With_PreAlloc(dab1_len, dab1, dab3_len, dab3, &dab4, 16);
	double dab_p[16], * dab = dab_p;
	int dab_len = expansionObject::Gen_Sum_With_PreAlloc(dab4_len, dab4, dab2_len, dab2, &dab, 16);
	double al1_p[16], * al1 = al1_p;
	int al1_len = expansionObject::Gen_Product_With_PreAlloc(aex_len, aex, aex_len, aex, &al1, 16);
	double al2_p[16], * al2 = al2_p;
	int al2_len = expansionObject::Gen_Product_With_PreAlloc(aey_len, aey, aey_len, aey, &al2, 16);
	double al3_p[16], * al3 = al3_p;
	int al3_len = expansionObject::Gen_Product_With_PreAlloc(aez_len, aez, aez_len, aez, &al3, 16);
	double al4_p[16], * al4 = al4_p;
	int al4_len = expansionObject::Gen_Sum_With_PreAlloc(al1_len, al1, al2_len, al2, &al4, 16);
	double alift_p[16], * alift = alift_p;
	int alift_len = expansionObject::Gen_Sum_With_PreAlloc(al4_len, al4, al3_len, al3, &alift, 16);
	double bl1_p[16], * bl1 = bl1_p;
	int bl1_len = expansionObject::Gen_Product_With_PreAlloc(bex_len, bex, bex_len, bex, &bl1, 16);
	double bl2_p[16], * bl2 = bl2_p;
	int bl2_len = expansionObject::Gen_Product_With_PreAlloc(bey_len, bey, bey_len, bey, &bl2, 16);
	double bl3_p[16], * bl3 = bl3_p;
	int bl3_len = expansionObject::Gen_Product_With_PreAlloc(bez_len, bez, bez_len, bez, &bl3, 16);
	double bl4_p[16], * bl4 = bl4_p;
	int bl4_len = expansionObject::Gen_Sum_With_PreAlloc(bl1_len, bl1, bl2_len, bl2, &bl4, 16);
	double blift_p[16], * blift = blift_p;
	int blift_len = expansionObject::Gen_Sum_With_PreAlloc(bl4_len, bl4, bl3_len, bl3, &blift, 16);
	double cl1_p[16], * cl1 = cl1_p;
	int cl1_len = expansionObject::Gen_Product_With_PreAlloc(cex_len, cex, cex_len, cex, &cl1, 16);
	double cl2_p[16], * cl2 = cl2_p;
	int cl2_len = expansionObject::Gen_Product_With_PreAlloc(cey_len, cey, cey_len, cey, &cl2, 16);
	double cl3_p[16], * cl3 = cl3_p;
	int cl3_len = expansionObject::Gen_Product_With_PreAlloc(cez_len, cez, cez_len, cez, &cl3, 16);
	double cl4_p[16], * cl4 = cl4_p;
	int cl4_len = expansionObject::Gen_Sum_With_PreAlloc(cl1_len, cl1, cl2_len, cl2, &cl4, 16);
	double clift_p[16], * clift = clift_p;
	int clift_len = expansionObject::Gen_Sum_With_PreAlloc(cl4_len, cl4, cl3_len, cl3, &clift, 16);
	double dl1_p[16], * dl1 = dl1_p;
	int dl1_len = expansionObject::Gen_Product_With_PreAlloc(dex_len, dex, dex_len, dex, &dl1, 16);
	double dl2_p[16], * dl2 = dl2_p;
	int dl2_len = expansionObject::Gen_Product_With_PreAlloc(dey_len, dey, dey_len, dey, &dl2, 16);
	double dl3_p[16], * dl3 = dl3_p;
	int dl3_len = expansionObject::Gen_Product_With_PreAlloc(dez_len, dez, dez_len, dez, &dl3, 16);
	double dl4_p[16], * dl4 = dl4_p;
	int dl4_len = expansionObject::Gen_Sum_With_PreAlloc(dl1_len, dl1, dl2_len, dl2, &dl4, 16);
	double dlift_p[16], * dlift = dlift_p;
	int dlift_len = expansionObject::Gen_Sum_With_PreAlloc(dl4_len, dl4, dl3_len, dl3, &dlift, 16);
	double ds1_p[16], * ds1 = ds1_p;
	int ds1_len = expansionObject::Gen_Product_With_PreAlloc(dlift_len, dlift, abc_len, abc, &ds1, 16);
	double ds2_p[16], * ds2 = ds2_p;
	int ds2_len = expansionObject::Gen_Product_With_PreAlloc(clift_len, clift, dab_len, dab, &ds2, 16);
	double dl_p[16], * dl = dl_p;
	int dl_len = expansionObject::Gen_Diff_With_PreAlloc(ds2_len, ds2, ds1_len, ds1, &dl, 16);
	double dr1_p[16], * dr1 = dr1_p;
	int dr1_len = expansionObject::Gen_Product_With_PreAlloc(blift_len, blift, cda_len, cda, &dr1, 16);
	double dr2_p[16], * dr2 = dr2_p;
	int dr2_len = expansionObject::Gen_Product_With_PreAlloc(alift_len, alift, bcd_len, bcd, &dr2, 16);
	double dr_p[16], * dr = dr_p;
	int dr_len = expansionObject::Gen_Diff_With_PreAlloc(dr2_len, dr2, dr1_len, dr1, &dr, 16);
	double det_p[16], * det = det_p;
	int det_len = expansionObject::Gen_Sum_With_PreAlloc(dl_len, dl, dr_len, dr, &det, 16);

	double return_value = det[det_len - 1];
	if (det_p != det) FreeDoubles(det);
	if (dr_p != dr) FreeDoubles(dr);
	if (dr2_p != dr2) FreeDoubles(dr2);
	if (dr1_p != dr1) FreeDoubles(dr1);
	if (dl_p != dl) FreeDoubles(dl);
	if (ds2_p != ds2) FreeDoubles(ds2);
	if (ds1_p != ds1) FreeDoubles(ds1);
	if (dlift_p != dlift) FreeDoubles(dlift);
	if (dl4_p != dl4) FreeDoubles(dl4);
	if (dl3_p != dl3) FreeDoubles(dl3);
	if (dl2_p != dl2) FreeDoubles(dl2);
	if (dl1_p != dl1) FreeDoubles(dl1);
	if (clift_p != clift) FreeDoubles(clift);
	if (cl4_p != cl4) FreeDoubles(cl4);
	if (cl3_p != cl3) FreeDoubles(cl3);
	if (cl2_p != cl2) FreeDoubles(cl2);
	if (cl1_p != cl1) FreeDoubles(cl1);
	if (blift_p != blift) FreeDoubles(blift);
	if (bl4_p != bl4) FreeDoubles(bl4);
	if (bl3_p != bl3) FreeDoubles(bl3);
	if (bl2_p != bl2) FreeDoubles(bl2);
	if (bl1_p != bl1) FreeDoubles(bl1);
	if (alift_p != alift) FreeDoubles(alift);
	if (al4_p != al4) FreeDoubles(al4);
	if (al3_p != al3) FreeDoubles(al3);
	if (al2_p != al2) FreeDoubles(al2);
	if (al1_p != al1) FreeDoubles(al1);
	if (dab_p != dab) FreeDoubles(dab);
	if (dab4_p != dab4) FreeDoubles(dab4);
	if (dab3_p != dab3) FreeDoubles(dab3);
	if (dab2_p != dab2) FreeDoubles(dab2);
	if (dab1_p != dab1) FreeDoubles(dab1);
	if (cda_p != cda) FreeDoubles(cda);
	if (cda4_p != cda4) FreeDoubles(cda4);
	if (cda3_p != cda3) FreeDoubles(cda3);
	if (cda2_p != cda2) FreeDoubles(cda2);
	if (cda1_p != cda1) FreeDoubles(cda1);
	if (bcd_p != bcd) FreeDoubles(bcd);
	if (bcd4_p != bcd4) FreeDoubles(bcd4);
	if (bcd3_p != bcd3) FreeDoubles(bcd3);
	if (bcd2_p != bcd2) FreeDoubles(bcd2);
	if (bcd1_p != bcd1) FreeDoubles(bcd1);
	if (abc_p != abc) FreeDoubles(abc);
	if (abc4_p != abc4) FreeDoubles(abc4);
	if (abc3_p != abc3) FreeDoubles(abc3);
	if (abc2_p != abc2) FreeDoubles(abc2);
	if (abc1_p != abc1) FreeDoubles(abc1);
	if (bd_p != bd) FreeDoubles(bd);
	if (dexbey_p != dexbey) FreeDoubles(dexbey);
	if (bexdey_p != bexdey) FreeDoubles(bexdey);
	if (ac_p != ac) FreeDoubles(ac);
	if (cexaey_p != cexaey) FreeDoubles(cexaey);
	if (aexcey_p != aexcey) FreeDoubles(aexcey);
	if (da_p != da) FreeDoubles(da);
	if (aexdey_p != aexdey) FreeDoubles(aexdey);
	if (dexaey_p != dexaey) FreeDoubles(dexaey);
	if (cd_p != cd) FreeDoubles(cd);
	if (dexcey_p != dexcey) FreeDoubles(dexcey);
	if (cexdey_p != cexdey) FreeDoubles(cexdey);
	if (bc_p != bc) FreeDoubles(bc);
	if (cexbey_p != cexbey) FreeDoubles(cexbey);
	if (bexcey_p != bexcey) FreeDoubles(bexcey);
	if (ab_p != ab) FreeDoubles(ab);
	if (bexaey_p != bexaey) FreeDoubles(bexaey);
	if (aexbey_p != aexbey) FreeDoubles(aexbey);

	if (return_value > 0) return IP_Sign::POSITIVE;
	if (return_value < 0) return IP_Sign::NEGATIVE;
	if (return_value == 0) return IP_Sign::ZERO;
	return IP_Sign::UNDEFINED;
}

inline int inSphere_LLLLL(double a1x, double a1y, double a1z, double a2x, double a2y, double a2z, double at, double b1x, double b1y, double b1z, double b2x, double b2y, double b2z, double bt, double c1x, double c1y, double c1z, double c2x, double c2y, double c2z, double ct, double d1x, double d1y, double d1z, double d2x, double d2y, double d2z, double dt, double e1x, double e1y, double e1z, double e2x, double e2y, double e2z, double et)
{
	int ret;
	ret = inSphere_LLLLL_filtered(a1x, a1y, a1z, a2x, a2y, a2z, at, b1x, b1y, b1z, b2x, b2y, b2z, bt, c1x, c1y, c1z, c2x, c2y, c2z, ct, d1x, d1y, d1z, d2x, d2y, d2z, dt, e1x, e1y, e1z, e2x, e2y, e2z, et);
	if (ret != Filtered_Sign::UNCERTAIN) return ret;
	ret = inSphere_LLLLL_interval(a1x, a1y, a1z, a2x, a2y, a2z, at, b1x, b1y, b1z, b2x, b2y, b2z, bt, c1x, c1y, c1z, c2x, c2y, c2z, ct, d1x, d1y, d1z, d2x, d2y, d2z, dt, e1x, e1y, e1z, e2x, e2y, e2z, et);
	if (ret != Filtered_Sign::UNCERTAIN) return ret;
	return inSphere_LLLLL_exact(a1x, a1y, a1z, a2x, a2y, a2z, at, b1x, b1y, b1z, b2x, b2y, b2z, bt, c1x, c1y, c1z, c2x, c2y, c2z, ct, d1x, d1y, d1z, d2x, d2y, d2z, dt, e1x, e1y, e1z, e2x, e2y, e2z, et);
}

