#include "implicit_point.h"

#pragma intrinsic(fabs)

// Uncomment the following to activate overflow/underflow checks
#define CHECK_FOR_XYZERFLOWS

inline int orient3d_LLLL_filtered(double p1x, double p1y, double p1z, double p2x, double p2y, double p2z, double pt, double q1x, double q1y, double q1z, double q2x, double q2y, double q2z, double qt, double r1x, double r1y, double r1z, double r2x, double r2y, double r2z, double rt, double s1x, double s1y, double s1z, double s2x, double s2y, double s2z, double st)
{
   const double pvx = p2x - p1x;
   const double pvxt = pvx * pt;
   const double px = p1x + pvxt;
   const double pvy = p2y - p1y;
   const double pvyt = pvy * pt;
   const double py = p1y + pvyt;
   const double pvz = p2z - p1z;
   const double pvzt = pvz * pt;
   const double pz = p1z + pvzt;
   const double qvx = q2x - q1x;
   const double qvxt = qvx * qt;
   const double qx = q1x + qvxt;
   const double qvy = q2y - q1y;
   const double qvyt = qvy * qt;
   const double qy = q1y + qvyt;
   const double qvz = q2z - q1z;
   const double qvzt = qvz * qt;
   const double qz = q1z + qvzt;
   const double rvx = r2x - r1x;
   const double rvxt = rvx * rt;
   const double rx = r1x + rvxt;
   const double rvy = r2y - r1y;
   const double rvyt = rvy * rt;
   const double ry = r1y + rvyt;
   const double rvz = r2z - r1z;
   const double rvzt = rvz * rt;
   const double rz = r1z + rvzt;
   const double svx = s2x - s1x;
   const double svxt = svx * st;
   const double sx = s1x + svxt;
   const double svy = s2y - s1y;
   const double svyt = svy * st;
   const double sy = s1y + svyt;
   const double svz = s2z - s1z;
   const double svzt = svz * st;
   const double sz = s1z + svzt;
   const double qx_px = qx - px;
   const double qy_py = qy - py;
   const double rx_px = rx - px;
   const double ry_py = ry - py;
   const double rz_pz = rz - pz;
   const double qz_pz = qz - pz;
   const double sx_px = sx - px;
   const double sy_py = sy - py;
   const double sz_pz = sz - pz;
   const double tmp_a = qx_px * ry_py;
   const double tmp_b = qy_py * rx_px;
   const double m01 = tmp_a - tmp_b;
   const double tmq_a = qx_px * rz_pz;
   const double tmq_b = qz_pz * rx_px;
   const double m02 = tmq_a - tmq_b;
   const double tmr_a = qy_py * rz_pz;
   const double tmr_b = qz_pz * ry_py;
   const double m12 = tmr_a - tmr_b;
   const double mt1 = m01 * sz_pz;
   const double mt2 = m02 * sy_py;
   const double mt3 = m12 * sx_px;
   const double mtt = mt1 - mt2;
   const double m012 = mtt + mt3;

   double _tmp_fabs;

   double max_var = 0.0;
   if ((_tmp_fabs = fabs(p1x)) > max_var) max_var = _tmp_fabs;
   if ((_tmp_fabs = fabs(p1y)) > max_var) max_var = _tmp_fabs;
   if ((_tmp_fabs = fabs(p1z)) > max_var) max_var = _tmp_fabs;
   if ((_tmp_fabs = fabs(pt)) > max_var) max_var = _tmp_fabs;
   if ((_tmp_fabs = fabs(q1x)) > max_var) max_var = _tmp_fabs;
   if ((_tmp_fabs = fabs(q1y)) > max_var) max_var = _tmp_fabs;
   if ((_tmp_fabs = fabs(q1z)) > max_var) max_var = _tmp_fabs;
   if ((_tmp_fabs = fabs(qt)) > max_var) max_var = _tmp_fabs;
   if ((_tmp_fabs = fabs(r1x)) > max_var) max_var = _tmp_fabs;
   if ((_tmp_fabs = fabs(r1y)) > max_var) max_var = _tmp_fabs;
   if ((_tmp_fabs = fabs(r1z)) > max_var) max_var = _tmp_fabs;
   if ((_tmp_fabs = fabs(rt)) > max_var) max_var = _tmp_fabs;
   if ((_tmp_fabs = fabs(s1x)) > max_var) max_var = _tmp_fabs;
   if ((_tmp_fabs = fabs(s1y)) > max_var) max_var = _tmp_fabs;
   if ((_tmp_fabs = fabs(s1z)) > max_var) max_var = _tmp_fabs;
   if ((_tmp_fabs = fabs(st)) > max_var) max_var = _tmp_fabs;
   if ((_tmp_fabs = fabs(pvx)) > max_var) max_var = _tmp_fabs;
   if ((_tmp_fabs = fabs(pvy)) > max_var) max_var = _tmp_fabs;
   if ((_tmp_fabs = fabs(pvz)) > max_var) max_var = _tmp_fabs;
   if ((_tmp_fabs = fabs(qvx)) > max_var) max_var = _tmp_fabs;
   if ((_tmp_fabs = fabs(qvy)) > max_var) max_var = _tmp_fabs;
   if ((_tmp_fabs = fabs(qvz)) > max_var) max_var = _tmp_fabs;
   if ((_tmp_fabs = fabs(rvx)) > max_var) max_var = _tmp_fabs;
   if ((_tmp_fabs = fabs(rvy)) > max_var) max_var = _tmp_fabs;
   if ((_tmp_fabs = fabs(rvz)) > max_var) max_var = _tmp_fabs;
   if ((_tmp_fabs = fabs(svx)) > max_var) max_var = _tmp_fabs;
   if ((_tmp_fabs = fabs(svy)) > max_var) max_var = _tmp_fabs;
   if ((_tmp_fabs = fabs(svz)) > max_var) max_var = _tmp_fabs;
   double epsilon = max_var;
   epsilon *= epsilon;
   epsilon *= epsilon;
   epsilon *= max_var;
   epsilon *= max_var;
   epsilon *= 5.68434188608081e-13;
   if (m012 > epsilon) return IP_Sign::POSITIVE;
   if (-m012 > epsilon) return IP_Sign::NEGATIVE;
   return Filtered_Sign::UNCERTAIN;
}

inline int orient3d_LLLL_interval(interval_number p1x, interval_number p1y, interval_number p1z, interval_number p2x, interval_number p2y, interval_number p2z, interval_number pt, interval_number q1x, interval_number q1y, interval_number q1z, interval_number q2x, interval_number q2y, interval_number q2z, interval_number qt, interval_number r1x, interval_number r1y, interval_number r1z, interval_number r2x, interval_number r2y, interval_number r2z, interval_number rt, interval_number s1x, interval_number s1y, interval_number s1z, interval_number s2x, interval_number s2y, interval_number s2z, interval_number st)
{
   setFPUModeToRoundUP();
   const interval_number pvx(p2x - p1x);
   const interval_number pvxt(pvx * pt);
   const interval_number px(p1x + pvxt);
   const interval_number pvy(p2y - p1y);
   const interval_number pvyt(pvy * pt);
   const interval_number py(p1y + pvyt);
   const interval_number pvz(p2z - p1z);
   const interval_number pvzt(pvz * pt);
   const interval_number pz(p1z + pvzt);
   const interval_number qvx(q2x - q1x);
   const interval_number qvxt(qvx * qt);
   const interval_number qx(q1x + qvxt);
   const interval_number qvy(q2y - q1y);
   const interval_number qvyt(qvy * qt);
   const interval_number qy(q1y + qvyt);
   const interval_number qvz(q2z - q1z);
   const interval_number qvzt(qvz * qt);
   const interval_number qz(q1z + qvzt);
   const interval_number rvx(r2x - r1x);
   const interval_number rvxt(rvx * rt);
   const interval_number rx(r1x + rvxt);
   const interval_number rvy(r2y - r1y);
   const interval_number rvyt(rvy * rt);
   const interval_number ry(r1y + rvyt);
   const interval_number rvz(r2z - r1z);
   const interval_number rvzt(rvz * rt);
   const interval_number rz(r1z + rvzt);
   const interval_number svx(s2x - s1x);
   const interval_number svxt(svx * st);
   const interval_number sx(s1x + svxt);
   const interval_number svy(s2y - s1y);
   const interval_number svyt(svy * st);
   const interval_number sy(s1y + svyt);
   const interval_number svz(s2z - s1z);
   const interval_number svzt(svz * st);
   const interval_number sz(s1z + svzt);
   const interval_number qx_px(qx - px);
   const interval_number qy_py(qy - py);
   const interval_number rx_px(rx - px);
   const interval_number ry_py(ry - py);
   const interval_number rz_pz(rz - pz);
   const interval_number qz_pz(qz - pz);
   const interval_number sx_px(sx - px);
   const interval_number sy_py(sy - py);
   const interval_number sz_pz(sz - pz);
   const interval_number tmp_a(qx_px * ry_py);
   const interval_number tmp_b(qy_py * rx_px);
   const interval_number m01(tmp_a - tmp_b);
   const interval_number tmq_a(qx_px * rz_pz);
   const interval_number tmq_b(qz_pz * rx_px);
   const interval_number m02(tmq_a - tmq_b);
   const interval_number tmr_a(qy_py * rz_pz);
   const interval_number tmr_b(qz_pz * ry_py);
   const interval_number m12(tmr_a - tmr_b);
   const interval_number mt1(m01 * sz_pz);
   const interval_number mt2(m02 * sy_py);
   const interval_number mt3(m12 * sx_px);
   const interval_number mtt(mt1 - mt2);
   const interval_number m012(mtt + mt3);
   setFPUModeToRoundNEAR();

   if (!m012.signIsReliable()) return Filtered_Sign::UNCERTAIN;
   return m012.sign();
}

inline int orient3d_LLLL_bigfloat(bigfloat p1x, bigfloat p1y, bigfloat p1z, bigfloat p2x, bigfloat p2y, bigfloat p2z, bigfloat pt, bigfloat q1x, bigfloat q1y, bigfloat q1z, bigfloat q2x, bigfloat q2y, bigfloat q2z, bigfloat qt, bigfloat r1x, bigfloat r1y, bigfloat r1z, bigfloat r2x, bigfloat r2y, bigfloat r2z, bigfloat rt, bigfloat s1x, bigfloat s1y, bigfloat s1z, bigfloat s2x, bigfloat s2y, bigfloat s2z, bigfloat st)
{
   const bigfloat pvx(p2x - p1x);
   const bigfloat pvxt(pvx * pt);
   const bigfloat px(p1x + pvxt);
   const bigfloat pvy(p2y - p1y);
   const bigfloat pvyt(pvy * pt);
   const bigfloat py(p1y + pvyt);
   const bigfloat pvz(p2z - p1z);
   const bigfloat pvzt(pvz * pt);
   const bigfloat pz(p1z + pvzt);
   const bigfloat qvx(q2x - q1x);
   const bigfloat qvxt(qvx * qt);
   const bigfloat qx(q1x + qvxt);
   const bigfloat qvy(q2y - q1y);
   const bigfloat qvyt(qvy * qt);
   const bigfloat qy(q1y + qvyt);
   const bigfloat qvz(q2z - q1z);
   const bigfloat qvzt(qvz * qt);
   const bigfloat qz(q1z + qvzt);
   const bigfloat rvx(r2x - r1x);
   const bigfloat rvxt(rvx * rt);
   const bigfloat rx(r1x + rvxt);
   const bigfloat rvy(r2y - r1y);
   const bigfloat rvyt(rvy * rt);
   const bigfloat ry(r1y + rvyt);
   const bigfloat rvz(r2z - r1z);
   const bigfloat rvzt(rvz * rt);
   const bigfloat rz(r1z + rvzt);
   const bigfloat svx(s2x - s1x);
   const bigfloat svxt(svx * st);
   const bigfloat sx(s1x + svxt);
   const bigfloat svy(s2y - s1y);
   const bigfloat svyt(svy * st);
   const bigfloat sy(s1y + svyt);
   const bigfloat svz(s2z - s1z);
   const bigfloat svzt(svz * st);
   const bigfloat sz(s1z + svzt);
   const bigfloat qx_px(qx - px);
   const bigfloat qy_py(qy - py);
   const bigfloat rx_px(rx - px);
   const bigfloat ry_py(ry - py);
   const bigfloat rz_pz(rz - pz);
   const bigfloat qz_pz(qz - pz);
   const bigfloat sx_px(sx - px);
   const bigfloat sy_py(sy - py);
   const bigfloat sz_pz(sz - pz);
   const bigfloat tmp_a(qx_px * ry_py);
   const bigfloat tmp_b(qy_py * rx_px);
   const bigfloat m01(tmp_a - tmp_b);
   const bigfloat tmq_a(qx_px * rz_pz);
   const bigfloat tmq_b(qz_pz * rx_px);
   const bigfloat m02(tmq_a - tmq_b);
   const bigfloat tmr_a(qy_py * rz_pz);
   const bigfloat tmr_b(qz_pz * ry_py);
   const bigfloat m12(tmr_a - tmr_b);
   const bigfloat mt1(m01 * sz_pz);
   const bigfloat mt2(m02 * sy_py);
   const bigfloat mt3(m12 * sx_px);
   const bigfloat mtt(mt1 - mt2);
   const bigfloat m012(mtt + mt3);
   return sgn(m012);
}

inline int orient3d_LLLL_exact(double p1x, double p1y, double p1z, double p2x, double p2y, double p2z, double pt, double q1x, double q1y, double q1z, double q2x, double q2y, double q2z, double qt, double r1x, double r1y, double r1z, double r2x, double r2y, double r2z, double rt, double s1x, double s1y, double s1z, double s2x, double s2y, double s2z, double st)
{
   double pvx[2];
   expansionObject::two_Diff(p2x, p1x, pvx);
   double pvxt[4];
   expansionObject::Two_One_Prod(pvx, pt, pvxt);
   double px[5];
   int px_len = expansionObject::Gen_Sum(1, &p1x, 4, pvxt, px);
   double pvy[2];
   expansionObject::two_Diff(p2y, p1y, pvy);
   double pvyt[4];
   expansionObject::Two_One_Prod(pvy, pt, pvyt);
   double py[5];
   int py_len = expansionObject::Gen_Sum(1, &p1y, 4, pvyt, py);
   double pvz[2];
   expansionObject::two_Diff(p2z, p1z, pvz);
   double pvzt[4];
   expansionObject::Two_One_Prod(pvz, pt, pvzt);
   double pz[5];
   int pz_len = expansionObject::Gen_Sum(1, &p1z, 4, pvzt, pz);
   double qvx[2];
   expansionObject::two_Diff(q2x, q1x, qvx);
   double qvxt[4];
   expansionObject::Two_One_Prod(qvx, qt, qvxt);
   double qx[5];
   int qx_len = expansionObject::Gen_Sum(1, &q1x, 4, qvxt, qx);
   double qvy[2];
   expansionObject::two_Diff(q2y, q1y, qvy);
   double qvyt[4];
   expansionObject::Two_One_Prod(qvy, qt, qvyt);
   double qy[5];
   int qy_len = expansionObject::Gen_Sum(1, &q1y, 4, qvyt, qy);
   double qvz[2];
   expansionObject::two_Diff(q2z, q1z, qvz);
   double qvzt[4];
   expansionObject::Two_One_Prod(qvz, qt, qvzt);
   double qz[5];
   int qz_len = expansionObject::Gen_Sum(1, &q1z, 4, qvzt, qz);
   double rvx[2];
   expansionObject::two_Diff(r2x, r1x, rvx);
   double rvxt[4];
   expansionObject::Two_One_Prod(rvx, rt, rvxt);
   double rx[5];
   int rx_len = expansionObject::Gen_Sum(1, &r1x, 4, rvxt, rx);
   double rvy[2];
   expansionObject::two_Diff(r2y, r1y, rvy);
   double rvyt[4];
   expansionObject::Two_One_Prod(rvy, rt, rvyt);
   double ry[5];
   int ry_len = expansionObject::Gen_Sum(1, &r1y, 4, rvyt, ry);
   double rvz[2];
   expansionObject::two_Diff(r2z, r1z, rvz);
   double rvzt[4];
   expansionObject::Two_One_Prod(rvz, rt, rvzt);
   double rz[5];
   int rz_len = expansionObject::Gen_Sum(1, &r1z, 4, rvzt, rz);
   double svx[2];
   expansionObject::two_Diff(s2x, s1x, svx);
   double svxt[4];
   expansionObject::Two_One_Prod(svx, st, svxt);
   double sx[5];
   int sx_len = expansionObject::Gen_Sum(1, &s1x, 4, svxt, sx);
   double svy[2];
   expansionObject::two_Diff(s2y, s1y, svy);
   double svyt[4];
   expansionObject::Two_One_Prod(svy, st, svyt);
   double sy[5];
   int sy_len = expansionObject::Gen_Sum(1, &s1y, 4, svyt, sy);
   double svz[2];
   expansionObject::two_Diff(s2z, s1z, svz);
   double svzt[4];
   expansionObject::Two_One_Prod(svz, st, svzt);
   double sz[5];
   int sz_len = expansionObject::Gen_Sum(1, &s1z, 4, svzt, sz);
   double qx_px[10];
   int qx_px_len = expansionObject::Gen_Diff(qx_len, qx, px_len, px, qx_px);
   double qy_py[10];
   int qy_py_len = expansionObject::Gen_Diff(qy_len, qy, py_len, py, qy_py);
   double rx_px[10];
   int rx_px_len = expansionObject::Gen_Diff(rx_len, rx, px_len, px, rx_px);
   double ry_py[10];
   int ry_py_len = expansionObject::Gen_Diff(ry_len, ry, py_len, py, ry_py);
   double rz_pz[10];
   int rz_pz_len = expansionObject::Gen_Diff(rz_len, rz, pz_len, pz, rz_pz);
   double qz_pz[10];
   int qz_pz_len = expansionObject::Gen_Diff(qz_len, qz, pz_len, pz, qz_pz);
   double sx_px[10];
   int sx_px_len = expansionObject::Gen_Diff(sx_len, sx, px_len, px, sx_px);
   double sy_py[10];
   int sy_py_len = expansionObject::Gen_Diff(sy_len, sy, py_len, py, sy_py);
   double sz_pz[10];
   int sz_pz_len = expansionObject::Gen_Diff(sz_len, sz, pz_len, pz, sz_pz);
   double tmp_a_p[64], *tmp_a = tmp_a_p;
   int tmp_a_len = expansionObject::Gen_Product_With_PreAlloc(qx_px_len, qx_px, ry_py_len, ry_py, &tmp_a, 64);
   double tmp_b_p[64], *tmp_b = tmp_b_p;
   int tmp_b_len = expansionObject::Gen_Product_With_PreAlloc(qy_py_len, qy_py, rx_px_len, rx_px, &tmp_b, 64);
   double m01_p[64], *m01 = m01_p;
   int m01_len = expansionObject::Gen_Diff_With_PreAlloc(tmp_a_len, tmp_a, tmp_b_len, tmp_b, &m01, 64);
   double tmq_a_p[64], *tmq_a = tmq_a_p;
   int tmq_a_len = expansionObject::Gen_Product_With_PreAlloc(qx_px_len, qx_px, rz_pz_len, rz_pz, &tmq_a, 64);
   double tmq_b_p[64], *tmq_b = tmq_b_p;
   int tmq_b_len = expansionObject::Gen_Product_With_PreAlloc(qz_pz_len, qz_pz, rx_px_len, rx_px, &tmq_b, 64);
   double m02_p[64], *m02 = m02_p;
   int m02_len = expansionObject::Gen_Diff_With_PreAlloc(tmq_a_len, tmq_a, tmq_b_len, tmq_b, &m02, 64);
   double tmr_a_p[64], *tmr_a = tmr_a_p;
   int tmr_a_len = expansionObject::Gen_Product_With_PreAlloc(qy_py_len, qy_py, rz_pz_len, rz_pz, &tmr_a, 64);
   double tmr_b_p[64], *tmr_b = tmr_b_p;
   int tmr_b_len = expansionObject::Gen_Product_With_PreAlloc(qz_pz_len, qz_pz, ry_py_len, ry_py, &tmr_b, 64);
   double m12_p[64], *m12 = m12_p;
   int m12_len = expansionObject::Gen_Diff_With_PreAlloc(tmr_a_len, tmr_a, tmr_b_len, tmr_b, &m12, 64);
   double mt1_p[64], *mt1 = mt1_p;
   int mt1_len = expansionObject::Gen_Product_With_PreAlloc(m01_len, m01, sz_pz_len, sz_pz, &mt1, 64);
   double mt2_p[64], *mt2 = mt2_p;
   int mt2_len = expansionObject::Gen_Product_With_PreAlloc(m02_len, m02, sy_py_len, sy_py, &mt2, 64);
   double mt3_p[64], *mt3 = mt3_p;
   int mt3_len = expansionObject::Gen_Product_With_PreAlloc(m12_len, m12, sx_px_len, sx_px, &mt3, 64);
   double mtt_p[64], *mtt = mtt_p;
   int mtt_len = expansionObject::Gen_Diff_With_PreAlloc(mt1_len, mt1, mt2_len, mt2, &mtt, 64);
   double m012_p[64], *m012 = m012_p;
   int m012_len = expansionObject::Gen_Sum_With_PreAlloc(mtt_len, mtt, mt3_len, mt3, &m012, 64);

   double return_value = m012[m012_len - 1];
   if (m012_p != m012) FreeDoubles(m012);
   if (mtt_p != mtt) FreeDoubles(mtt);
   if (mt3_p != mt3) FreeDoubles(mt3);
   if (mt2_p != mt2) FreeDoubles(mt2);
   if (mt1_p != mt1) FreeDoubles(mt1);
   if (m12_p != m12) FreeDoubles(m12);
   if (tmr_b_p != tmr_b) FreeDoubles(tmr_b);
   if (tmr_a_p != tmr_a) FreeDoubles(tmr_a);
   if (m02_p != m02) FreeDoubles(m02);
   if (tmq_b_p != tmq_b) FreeDoubles(tmq_b);
   if (tmq_a_p != tmq_a) FreeDoubles(tmq_a);
   if (m01_p != m01) FreeDoubles(m01);
   if (tmp_b_p != tmp_b) FreeDoubles(tmp_b);
   if (tmp_a_p != tmp_a) FreeDoubles(tmp_a);

 if (return_value > 0) return IP_Sign::POSITIVE;
 if (return_value < 0) return IP_Sign::NEGATIVE;
 if (return_value == 0) return IP_Sign::ZERO;
 return IP_Sign::UNDEFINED;
}

inline int orient3d_LLLL(double p1x, double p1y, double p1z, double p2x, double p2y, double p2z, double pt, double q1x, double q1y, double q1z, double q2x, double q2y, double q2z, double qt, double r1x, double r1y, double r1z, double r2x, double r2y, double r2z, double rt, double s1x, double s1y, double s1z, double s2x, double s2y, double s2z, double st)
{
   int ret;
   ret = orient3d_LLLL_filtered(p1x, p1y, p1z, p2x, p2y, p2z, pt, q1x, q1y, q1z, q2x, q2y, q2z, qt, r1x, r1y, r1z, r2x, r2y, r2z, rt, s1x, s1y, s1z, s2x, s2y, s2z, st);
   if (ret != Filtered_Sign::UNCERTAIN) return ret;
   ret = orient3d_LLLL_interval(p1x, p1y, p1z, p2x, p2y, p2z, pt, q1x, q1y, q1z, q2x, q2y, q2z, qt, r1x, r1y, r1z, r2x, r2y, r2z, rt, s1x, s1y, s1z, s2x, s2y, s2z, st);
   if (ret != Filtered_Sign::UNCERTAIN) return ret;
   return orient3d_LLLL_exact(p1x, p1y, p1z, p2x, p2y, p2z, pt, q1x, q1y, q1z, q2x, q2y, q2z, qt, r1x, r1y, r1z, r2x, r2y, r2z, rt, s1x, s1y, s1z, s2x, s2y, s2z, st);
}

