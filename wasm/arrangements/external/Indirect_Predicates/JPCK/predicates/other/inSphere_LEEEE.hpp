#include "implicit_point.h"

#pragma intrinsic(fabs)

// Uncomment the following to activate overflow/underflow checks
#define CHECK_FOR_XYZERFLOWS

inline int inSphere_LEEEE_filtered(double a1x, double a1y, double a1z, double a2x, double a2y, double a2z, double at, double bx, double by, double bz, double cx, double cy, double cz, double dx, double dy, double dz, double ex, double ey, double ez)
{
   const double avx = a2x - a1x;
   const double avxt = avx * at;
   const double ax = a1x + avxt;
   const double avy = a2y - a1y;
   const double avyt = avy * at;
   const double ay = a1y + avyt;
   const double avz = a2z - a1z;
   const double avzt = avz * at;
   const double az = a1z + avzt;
   const double aex = ax - ex;
   const double aey = ay - ey;
   const double aez = az - ez;
   const double bex = bx - ex;
   const double bey = by - ey;
   const double bez = bz - ez;
   const double cex = cx - ex;
   const double cey = cy - ey;
   const double cez = cz - ez;
   const double dex = dx - ex;
   const double dey = dy - ey;
   const double dez = dz - ez;
   const double aexbey = aex * bey;
   const double bexaey = bex * aey;
   const double ab = aexbey - bexaey;
   const double bexcey = bex * cey;
   const double cexbey = cex * bey;
   const double bc = bexcey - cexbey;
   const double cexdey = cex * dey;
   const double dexcey = dex * cey;
   const double cd = cexdey - dexcey;
   const double dexaey = dex * aey;
   const double aexdey = aex * dey;
   const double da = dexaey - aexdey;
   const double aexcey = aex * cey;
   const double cexaey = cex * aey;
   const double ac = aexcey - cexaey;
   const double bexdey = bex * dey;
   const double dexbey = dex * bey;
   const double bd = bexdey - dexbey;
   const double abc1 = aez * bc;
   const double abc2 = bez * ac;
   const double abc3 = cez * ab;
   const double abc4 = abc1 + abc3;
   const double abc = abc4 - abc2;
   const double bcd1 = bez * cd;
   const double bcd2 = cez * bd;
   const double bcd3 = dez * bc;
   const double bcd4 = bcd1 + bcd3;
   const double bcd = bcd4 - bcd2;
   const double cda1 = cez * da;
   const double cda2 = dez * ac;
   const double cda3 = aez * cd;
   const double cda4 = cda1 + cda3;
   const double cda = cda4 + cda2;
   const double dab1 = dez * ab;
   const double dab2 = aez * bd;
   const double dab3 = bez * da;
   const double dab4 = dab1 + dab3;
   const double dab = dab4 + dab2;
   const double al1 = aex * aex;
   const double al2 = aey * aey;
   const double al3 = aez * aez;
   const double al4 = al1 + al2;
   const double alift = al4 + al3;
   const double bl1 = bex * bex;
   const double bl2 = bey * bey;
   const double bl3 = bez * bez;
   const double bl4 = bl1 + bl2;
   const double blift = bl4 + bl3;
   const double cl1 = cex * cex;
   const double cl2 = cey * cey;
   const double cl3 = cez * cez;
   const double cl4 = cl1 + cl2;
   const double clift = cl4 + cl3;
   const double dl1 = dex * dex;
   const double dl2 = dey * dey;
   const double dl3 = dez * dez;
   const double dl4 = dl1 + dl2;
   const double dlift = dl4 + dl3;
   const double ds1 = dlift * abc;
   const double ds2 = clift * dab;
   const double dl = ds2 - ds1;
   const double dr1 = blift * cda;
   const double dr2 = alift * bcd;
   const double dr = dr2 - dr1;
   const double det = dl + dr;

   double _tmp_fabs;

   double max_var = 0.0;
   if ((_tmp_fabs = fabs(a1x)) > max_var) max_var = _tmp_fabs;
   if ((_tmp_fabs = fabs(a1y)) > max_var) max_var = _tmp_fabs;
   if ((_tmp_fabs = fabs(a1z)) > max_var) max_var = _tmp_fabs;
   if ((_tmp_fabs = fabs(at)) > max_var) max_var = _tmp_fabs;
   if ((_tmp_fabs = fabs(ex)) > max_var) max_var = _tmp_fabs;
   if ((_tmp_fabs = fabs(ey)) > max_var) max_var = _tmp_fabs;
   if ((_tmp_fabs = fabs(ez)) > max_var) max_var = _tmp_fabs;
   if ((_tmp_fabs = fabs(avx)) > max_var) max_var = _tmp_fabs;
   if ((_tmp_fabs = fabs(avy)) > max_var) max_var = _tmp_fabs;
   if ((_tmp_fabs = fabs(avz)) > max_var) max_var = _tmp_fabs;
   if ((_tmp_fabs = fabs(bex)) > max_var) max_var = _tmp_fabs;
   if ((_tmp_fabs = fabs(bey)) > max_var) max_var = _tmp_fabs;
   if ((_tmp_fabs = fabs(bez)) > max_var) max_var = _tmp_fabs;
   if ((_tmp_fabs = fabs(cex)) > max_var) max_var = _tmp_fabs;
   if ((_tmp_fabs = fabs(cey)) > max_var) max_var = _tmp_fabs;
   if ((_tmp_fabs = fabs(cez)) > max_var) max_var = _tmp_fabs;
   if ((_tmp_fabs = fabs(dex)) > max_var) max_var = _tmp_fabs;
   if ((_tmp_fabs = fabs(dey)) > max_var) max_var = _tmp_fabs;
   if ((_tmp_fabs = fabs(dez)) > max_var) max_var = _tmp_fabs;
   double epsilon = max_var;
   epsilon *= epsilon;
   epsilon *= epsilon;
   epsilon *= max_var;
   epsilon *= max_var;
   epsilon *= max_var;
   epsilon *= 5.295763827462003e-13;
   if (det > epsilon) return IP_Sign::POSITIVE;
   if (-det > epsilon) return IP_Sign::NEGATIVE;
   return Filtered_Sign::UNCERTAIN;
}

inline int inSphere_LEEEE_interval(interval_number a1x, interval_number a1y, interval_number a1z, interval_number a2x, interval_number a2y, interval_number a2z, interval_number at, interval_number bx, interval_number by, interval_number bz, interval_number cx, interval_number cy, interval_number cz, interval_number dx, interval_number dy, interval_number dz, interval_number ex, interval_number ey, interval_number ez)
{
   setFPUModeToRoundUP();
   const interval_number avx(a2x - a1x);
   const interval_number avxt(avx * at);
   const interval_number ax(a1x + avxt);
   const interval_number avy(a2y - a1y);
   const interval_number avyt(avy * at);
   const interval_number ay(a1y + avyt);
   const interval_number avz(a2z - a1z);
   const interval_number avzt(avz * at);
   const interval_number az(a1z + avzt);
   const interval_number aex(ax - ex);
   const interval_number aey(ay - ey);
   const interval_number aez(az - ez);
   const interval_number bex(bx - ex);
   const interval_number bey(by - ey);
   const interval_number bez(bz - ez);
   const interval_number cex(cx - ex);
   const interval_number cey(cy - ey);
   const interval_number cez(cz - ez);
   const interval_number dex(dx - ex);
   const interval_number dey(dy - ey);
   const interval_number dez(dz - ez);
   const interval_number aexbey(aex * bey);
   const interval_number bexaey(bex * aey);
   const interval_number ab(aexbey - bexaey);
   const interval_number bexcey(bex * cey);
   const interval_number cexbey(cex * bey);
   const interval_number bc(bexcey - cexbey);
   const interval_number cexdey(cex * dey);
   const interval_number dexcey(dex * cey);
   const interval_number cd(cexdey - dexcey);
   const interval_number dexaey(dex * aey);
   const interval_number aexdey(aex * dey);
   const interval_number da(dexaey - aexdey);
   const interval_number aexcey(aex * cey);
   const interval_number cexaey(cex * aey);
   const interval_number ac(aexcey - cexaey);
   const interval_number bexdey(bex * dey);
   const interval_number dexbey(dex * bey);
   const interval_number bd(bexdey - dexbey);
   const interval_number abc1(aez * bc);
   const interval_number abc2(bez * ac);
   const interval_number abc3(cez * ab);
   const interval_number abc4(abc1 + abc3);
   const interval_number abc(abc4 - abc2);
   const interval_number bcd1(bez * cd);
   const interval_number bcd2(cez * bd);
   const interval_number bcd3(dez * bc);
   const interval_number bcd4(bcd1 + bcd3);
   const interval_number bcd(bcd4 - bcd2);
   const interval_number cda1(cez * da);
   const interval_number cda2(dez * ac);
   const interval_number cda3(aez * cd);
   const interval_number cda4(cda1 + cda3);
   const interval_number cda(cda4 + cda2);
   const interval_number dab1(dez * ab);
   const interval_number dab2(aez * bd);
   const interval_number dab3(bez * da);
   const interval_number dab4(dab1 + dab3);
   const interval_number dab(dab4 + dab2);
   const interval_number al1(aex * aex);
   const interval_number al2(aey * aey);
   const interval_number al3(aez * aez);
   const interval_number al4(al1 + al2);
   const interval_number alift(al4 + al3);
   const interval_number bl1(bex * bex);
   const interval_number bl2(bey * bey);
   const interval_number bl3(bez * bez);
   const interval_number bl4(bl1 + bl2);
   const interval_number blift(bl4 + bl3);
   const interval_number cl1(cex * cex);
   const interval_number cl2(cey * cey);
   const interval_number cl3(cez * cez);
   const interval_number cl4(cl1 + cl2);
   const interval_number clift(cl4 + cl3);
   const interval_number dl1(dex * dex);
   const interval_number dl2(dey * dey);
   const interval_number dl3(dez * dez);
   const interval_number dl4(dl1 + dl2);
   const interval_number dlift(dl4 + dl3);
   const interval_number ds1(dlift * abc);
   const interval_number ds2(clift * dab);
   const interval_number dl(ds2 - ds1);
   const interval_number dr1(blift * cda);
   const interval_number dr2(alift * bcd);
   const interval_number dr(dr2 - dr1);
   const interval_number det(dl + dr);
   setFPUModeToRoundNEAR();

   if (!det.signIsReliable()) return Filtered_Sign::UNCERTAIN;
   return det.sign();
}

inline int inSphere_LEEEE_bigfloat(bigfloat a1x, bigfloat a1y, bigfloat a1z, bigfloat a2x, bigfloat a2y, bigfloat a2z, bigfloat at, bigfloat bx, bigfloat by, bigfloat bz, bigfloat cx, bigfloat cy, bigfloat cz, bigfloat dx, bigfloat dy, bigfloat dz, bigfloat ex, bigfloat ey, bigfloat ez)
{
   const bigfloat avx(a2x - a1x);
   const bigfloat avxt(avx * at);
   const bigfloat ax(a1x + avxt);
   const bigfloat avy(a2y - a1y);
   const bigfloat avyt(avy * at);
   const bigfloat ay(a1y + avyt);
   const bigfloat avz(a2z - a1z);
   const bigfloat avzt(avz * at);
   const bigfloat az(a1z + avzt);
   const bigfloat aex(ax - ex);
   const bigfloat aey(ay - ey);
   const bigfloat aez(az - ez);
   const bigfloat bex(bx - ex);
   const bigfloat bey(by - ey);
   const bigfloat bez(bz - ez);
   const bigfloat cex(cx - ex);
   const bigfloat cey(cy - ey);
   const bigfloat cez(cz - ez);
   const bigfloat dex(dx - ex);
   const bigfloat dey(dy - ey);
   const bigfloat dez(dz - ez);
   const bigfloat aexbey(aex * bey);
   const bigfloat bexaey(bex * aey);
   const bigfloat ab(aexbey - bexaey);
   const bigfloat bexcey(bex * cey);
   const bigfloat cexbey(cex * bey);
   const bigfloat bc(bexcey - cexbey);
   const bigfloat cexdey(cex * dey);
   const bigfloat dexcey(dex * cey);
   const bigfloat cd(cexdey - dexcey);
   const bigfloat dexaey(dex * aey);
   const bigfloat aexdey(aex * dey);
   const bigfloat da(dexaey - aexdey);
   const bigfloat aexcey(aex * cey);
   const bigfloat cexaey(cex * aey);
   const bigfloat ac(aexcey - cexaey);
   const bigfloat bexdey(bex * dey);
   const bigfloat dexbey(dex * bey);
   const bigfloat bd(bexdey - dexbey);
   const bigfloat abc1(aez * bc);
   const bigfloat abc2(bez * ac);
   const bigfloat abc3(cez * ab);
   const bigfloat abc4(abc1 + abc3);
   const bigfloat abc(abc4 - abc2);
   const bigfloat bcd1(bez * cd);
   const bigfloat bcd2(cez * bd);
   const bigfloat bcd3(dez * bc);
   const bigfloat bcd4(bcd1 + bcd3);
   const bigfloat bcd(bcd4 - bcd2);
   const bigfloat cda1(cez * da);
   const bigfloat cda2(dez * ac);
   const bigfloat cda3(aez * cd);
   const bigfloat cda4(cda1 + cda3);
   const bigfloat cda(cda4 + cda2);
   const bigfloat dab1(dez * ab);
   const bigfloat dab2(aez * bd);
   const bigfloat dab3(bez * da);
   const bigfloat dab4(dab1 + dab3);
   const bigfloat dab(dab4 + dab2);
   const bigfloat al1(aex * aex);
   const bigfloat al2(aey * aey);
   const bigfloat al3(aez * aez);
   const bigfloat al4(al1 + al2);
   const bigfloat alift(al4 + al3);
   const bigfloat bl1(bex * bex);
   const bigfloat bl2(bey * bey);
   const bigfloat bl3(bez * bez);
   const bigfloat bl4(bl1 + bl2);
   const bigfloat blift(bl4 + bl3);
   const bigfloat cl1(cex * cex);
   const bigfloat cl2(cey * cey);
   const bigfloat cl3(cez * cez);
   const bigfloat cl4(cl1 + cl2);
   const bigfloat clift(cl4 + cl3);
   const bigfloat dl1(dex * dex);
   const bigfloat dl2(dey * dey);
   const bigfloat dl3(dez * dez);
   const bigfloat dl4(dl1 + dl2);
   const bigfloat dlift(dl4 + dl3);
   const bigfloat ds1(dlift * abc);
   const bigfloat ds2(clift * dab);
   const bigfloat dl(ds2 - ds1);
   const bigfloat dr1(blift * cda);
   const bigfloat dr2(alift * bcd);
   const bigfloat dr(dr2 - dr1);
   const bigfloat det(dl + dr);
   return sgn(det);
}

inline int inSphere_LEEEE_exact(double a1x, double a1y, double a1z, double a2x, double a2y, double a2z, double at, double bx, double by, double bz, double cx, double cy, double cz, double dx, double dy, double dz, double ex, double ey, double ez)
{
   double avx[2];
   expansionObject::two_Diff(a2x, a1x, avx);
   double avxt[4];
   expansionObject::Two_One_Prod(avx, at, avxt);
   double ax[5];
   int ax_len = expansionObject::Gen_Sum(1, &a1x, 4, avxt, ax);
   double avy[2];
   expansionObject::two_Diff(a2y, a1y, avy);
   double avyt[4];
   expansionObject::Two_One_Prod(avy, at, avyt);
   double ay[5];
   int ay_len = expansionObject::Gen_Sum(1, &a1y, 4, avyt, ay);
   double avz[2];
   expansionObject::two_Diff(a2z, a1z, avz);
   double avzt[4];
   expansionObject::Two_One_Prod(avz, at, avzt);
   double az[5];
   int az_len = expansionObject::Gen_Sum(1, &a1z, 4, avzt, az);
   double aex[6];
   int aex_len = expansionObject::Gen_Diff(ax_len, ax, 1, &ex, aex);
   double aey[6];
   int aey_len = expansionObject::Gen_Diff(ay_len, ay, 1, &ey, aey);
   double aez[6];
   int aez_len = expansionObject::Gen_Diff(az_len, az, 1, &ez, aez);
   double bex[2];
   expansionObject::two_Diff(bx, ex, bex);
   double bey[2];
   expansionObject::two_Diff(by, ey, bey);
   double bez[2];
   expansionObject::two_Diff(bz, ez, bez);
   double cex[2];
   expansionObject::two_Diff(cx, ex, cex);
   double cey[2];
   expansionObject::two_Diff(cy, ey, cey);
   double cez[2];
   expansionObject::two_Diff(cz, ez, cez);
   double dex[2];
   expansionObject::two_Diff(dx, ex, dex);
   double dey[2];
   expansionObject::two_Diff(dy, ey, dey);
   double dez[2];
   expansionObject::two_Diff(dz, ez, dez);
   double aexbey[24];
   int aexbey_len = expansionObject::Gen_Product(aex_len, aex, 2, bey, aexbey);
   double bexaey[24];
   int bexaey_len = expansionObject::Gen_Product(2, bex, aey_len, aey, bexaey);
   double ab_p[32], *ab = ab_p;
   int ab_len = expansionObject::Gen_Diff_With_PreAlloc(aexbey_len, aexbey, bexaey_len, bexaey, &ab, 32);
   double bexcey[8];
   int bexcey_len = expansionObject::Gen_Product(2, bex, 2, cey, bexcey);
   double cexbey[8];
   int cexbey_len = expansionObject::Gen_Product(2, cex, 2, bey, cexbey);
   double bc[16];
   int bc_len = expansionObject::Gen_Diff(bexcey_len, bexcey, cexbey_len, cexbey, bc);
   double cexdey[8];
   int cexdey_len = expansionObject::Gen_Product(2, cex, 2, dey, cexdey);
   double dexcey[8];
   int dexcey_len = expansionObject::Gen_Product(2, dex, 2, cey, dexcey);
   double cd[16];
   int cd_len = expansionObject::Gen_Diff(cexdey_len, cexdey, dexcey_len, dexcey, cd);
   double dexaey[24];
   int dexaey_len = expansionObject::Gen_Product(2, dex, aey_len, aey, dexaey);
   double aexdey[24];
   int aexdey_len = expansionObject::Gen_Product(aex_len, aex, 2, dey, aexdey);
   double da_p[32], *da = da_p;
   int da_len = expansionObject::Gen_Diff_With_PreAlloc(dexaey_len, dexaey, aexdey_len, aexdey, &da, 32);
   double aexcey[24];
   int aexcey_len = expansionObject::Gen_Product(aex_len, aex, 2, cey, aexcey);
   double cexaey[24];
   int cexaey_len = expansionObject::Gen_Product(2, cex, aey_len, aey, cexaey);
   double ac_p[32], *ac = ac_p;
   int ac_len = expansionObject::Gen_Diff_With_PreAlloc(aexcey_len, aexcey, cexaey_len, cexaey, &ac, 32);
   double bexdey[8];
   int bexdey_len = expansionObject::Gen_Product(2, bex, 2, dey, bexdey);
   double dexbey[8];
   int dexbey_len = expansionObject::Gen_Product(2, dex, 2, bey, dexbey);
   double bd[16];
   int bd_len = expansionObject::Gen_Diff(bexdey_len, bexdey, dexbey_len, dexbey, bd);
   double abc1_p[32], *abc1 = abc1_p;
   int abc1_len = expansionObject::Gen_Product_With_PreAlloc(aez_len, aez, bc_len, bc, &abc1, 32);
   double abc2_p[32], *abc2 = abc2_p;
   int abc2_len = expansionObject::Gen_Product_With_PreAlloc(2, bez, ac_len, ac, &abc2, 32);
   double abc3_p[32], *abc3 = abc3_p;
   int abc3_len = expansionObject::Gen_Product_With_PreAlloc(2, cez, ab_len, ab, &abc3, 32);
   double abc4_p[32], *abc4 = abc4_p;
   int abc4_len = expansionObject::Gen_Sum_With_PreAlloc(abc1_len, abc1, abc3_len, abc3, &abc4, 32);
   double abc_p[32], *abc = abc_p;
   int abc_len = expansionObject::Gen_Diff_With_PreAlloc(abc4_len, abc4, abc2_len, abc2, &abc, 32);
   double bcd1_p[32], *bcd1 = bcd1_p;
   int bcd1_len = expansionObject::Gen_Product_With_PreAlloc(2, bez, cd_len, cd, &bcd1, 32);
   double bcd2_p[32], *bcd2 = bcd2_p;
   int bcd2_len = expansionObject::Gen_Product_With_PreAlloc(2, cez, bd_len, bd, &bcd2, 32);
   double bcd3_p[32], *bcd3 = bcd3_p;
   int bcd3_len = expansionObject::Gen_Product_With_PreAlloc(2, dez, bc_len, bc, &bcd3, 32);
   double bcd4_p[32], *bcd4 = bcd4_p;
   int bcd4_len = expansionObject::Gen_Sum_With_PreAlloc(bcd1_len, bcd1, bcd3_len, bcd3, &bcd4, 32);
   double bcd_p[32], *bcd = bcd_p;
   int bcd_len = expansionObject::Gen_Diff_With_PreAlloc(bcd4_len, bcd4, bcd2_len, bcd2, &bcd, 32);
   double cda1_p[32], *cda1 = cda1_p;
   int cda1_len = expansionObject::Gen_Product_With_PreAlloc(2, cez, da_len, da, &cda1, 32);
   double cda2_p[32], *cda2 = cda2_p;
   int cda2_len = expansionObject::Gen_Product_With_PreAlloc(2, dez, ac_len, ac, &cda2, 32);
   double cda3_p[32], *cda3 = cda3_p;
   int cda3_len = expansionObject::Gen_Product_With_PreAlloc(aez_len, aez, cd_len, cd, &cda3, 32);
   double cda4_p[32], *cda4 = cda4_p;
   int cda4_len = expansionObject::Gen_Sum_With_PreAlloc(cda1_len, cda1, cda3_len, cda3, &cda4, 32);
   double cda_p[32], *cda = cda_p;
   int cda_len = expansionObject::Gen_Sum_With_PreAlloc(cda4_len, cda4, cda2_len, cda2, &cda, 32);
   double dab1_p[32], *dab1 = dab1_p;
   int dab1_len = expansionObject::Gen_Product_With_PreAlloc(2, dez, ab_len, ab, &dab1, 32);
   double dab2_p[32], *dab2 = dab2_p;
   int dab2_len = expansionObject::Gen_Product_With_PreAlloc(aez_len, aez, bd_len, bd, &dab2, 32);
   double dab3_p[32], *dab3 = dab3_p;
   int dab3_len = expansionObject::Gen_Product_With_PreAlloc(2, bez, da_len, da, &dab3, 32);
   double dab4_p[32], *dab4 = dab4_p;
   int dab4_len = expansionObject::Gen_Sum_With_PreAlloc(dab1_len, dab1, dab3_len, dab3, &dab4, 32);
   double dab_p[32], *dab = dab_p;
   int dab_len = expansionObject::Gen_Sum_With_PreAlloc(dab4_len, dab4, dab2_len, dab2, &dab, 32);
   double al1_p[32], *al1 = al1_p;
   int al1_len = expansionObject::Gen_Product_With_PreAlloc(aex_len, aex, aex_len, aex, &al1, 32);
   double al2_p[32], *al2 = al2_p;
   int al2_len = expansionObject::Gen_Product_With_PreAlloc(aey_len, aey, aey_len, aey, &al2, 32);
   double al3_p[32], *al3 = al3_p;
   int al3_len = expansionObject::Gen_Product_With_PreAlloc(aez_len, aez, aez_len, aez, &al3, 32);
   double al4_p[32], *al4 = al4_p;
   int al4_len = expansionObject::Gen_Sum_With_PreAlloc(al1_len, al1, al2_len, al2, &al4, 32);
   double alift_p[32], *alift = alift_p;
   int alift_len = expansionObject::Gen_Sum_With_PreAlloc(al4_len, al4, al3_len, al3, &alift, 32);
   double bl1[8];
   int bl1_len = expansionObject::Gen_Product(2, bex, 2, bex, bl1);
   double bl2[8];
   int bl2_len = expansionObject::Gen_Product(2, bey, 2, bey, bl2);
   double bl3[8];
   int bl3_len = expansionObject::Gen_Product(2, bez, 2, bez, bl3);
   double bl4[16];
   int bl4_len = expansionObject::Gen_Sum(bl1_len, bl1, bl2_len, bl2, bl4);
   double blift[24];
   int blift_len = expansionObject::Gen_Sum(bl4_len, bl4, bl3_len, bl3, blift);
   double cl1[8];
   int cl1_len = expansionObject::Gen_Product(2, cex, 2, cex, cl1);
   double cl2[8];
   int cl2_len = expansionObject::Gen_Product(2, cey, 2, cey, cl2);
   double cl3[8];
   int cl3_len = expansionObject::Gen_Product(2, cez, 2, cez, cl3);
   double cl4[16];
   int cl4_len = expansionObject::Gen_Sum(cl1_len, cl1, cl2_len, cl2, cl4);
   double clift[24];
   int clift_len = expansionObject::Gen_Sum(cl4_len, cl4, cl3_len, cl3, clift);
   double dl1[8];
   int dl1_len = expansionObject::Gen_Product(2, dex, 2, dex, dl1);
   double dl2[8];
   int dl2_len = expansionObject::Gen_Product(2, dey, 2, dey, dl2);
   double dl3[8];
   int dl3_len = expansionObject::Gen_Product(2, dez, 2, dez, dl3);
   double dl4[16];
   int dl4_len = expansionObject::Gen_Sum(dl1_len, dl1, dl2_len, dl2, dl4);
   double dlift[24];
   int dlift_len = expansionObject::Gen_Sum(dl4_len, dl4, dl3_len, dl3, dlift);
   double ds1_p[32], *ds1 = ds1_p;
   int ds1_len = expansionObject::Gen_Product_With_PreAlloc(dlift_len, dlift, abc_len, abc, &ds1, 32);
   double ds2_p[32], *ds2 = ds2_p;
   int ds2_len = expansionObject::Gen_Product_With_PreAlloc(clift_len, clift, dab_len, dab, &ds2, 32);
   double dl_p[32], *dl = dl_p;
   int dl_len = expansionObject::Gen_Diff_With_PreAlloc(ds2_len, ds2, ds1_len, ds1, &dl, 32);
   double dr1_p[32], *dr1 = dr1_p;
   int dr1_len = expansionObject::Gen_Product_With_PreAlloc(blift_len, blift, cda_len, cda, &dr1, 32);
   double dr2_p[32], *dr2 = dr2_p;
   int dr2_len = expansionObject::Gen_Product_With_PreAlloc(alift_len, alift, bcd_len, bcd, &dr2, 32);
   double dr_p[32], *dr = dr_p;
   int dr_len = expansionObject::Gen_Diff_With_PreAlloc(dr2_len, dr2, dr1_len, dr1, &dr, 32);
   double det_p[32], *det = det_p;
   int det_len = expansionObject::Gen_Sum_With_PreAlloc(dl_len, dl, dr_len, dr, &det, 32);

   double return_value = det[det_len - 1];
   if (det_p != det) FreeDoubles(det);
   if (dr_p != dr) FreeDoubles(dr);
   if (dr2_p != dr2) FreeDoubles(dr2);
   if (dr1_p != dr1) FreeDoubles(dr1);
   if (dl_p != dl) FreeDoubles(dl);
   if (ds2_p != ds2) FreeDoubles(ds2);
   if (ds1_p != ds1) FreeDoubles(ds1);
   if (alift_p != alift) FreeDoubles(alift);
   if (al4_p != al4) FreeDoubles(al4);
   if (al3_p != al3) FreeDoubles(al3);
   if (al2_p != al2) FreeDoubles(al2);
   if (al1_p != al1) FreeDoubles(al1);
   if (dab_p != dab) FreeDoubles(dab);
   if (dab4_p != dab4) FreeDoubles(dab4);
   if (dab3_p != dab3) FreeDoubles(dab3);
   if (dab2_p != dab2) FreeDoubles(dab2);
   if (dab1_p != dab1) FreeDoubles(dab1);
   if (cda_p != cda) FreeDoubles(cda);
   if (cda4_p != cda4) FreeDoubles(cda4);
   if (cda3_p != cda3) FreeDoubles(cda3);
   if (cda2_p != cda2) FreeDoubles(cda2);
   if (cda1_p != cda1) FreeDoubles(cda1);
   if (bcd_p != bcd) FreeDoubles(bcd);
   if (bcd4_p != bcd4) FreeDoubles(bcd4);
   if (bcd3_p != bcd3) FreeDoubles(bcd3);
   if (bcd2_p != bcd2) FreeDoubles(bcd2);
   if (bcd1_p != bcd1) FreeDoubles(bcd1);
   if (abc_p != abc) FreeDoubles(abc);
   if (abc4_p != abc4) FreeDoubles(abc4);
   if (abc3_p != abc3) FreeDoubles(abc3);
   if (abc2_p != abc2) FreeDoubles(abc2);
   if (abc1_p != abc1) FreeDoubles(abc1);
   if (ac_p != ac) FreeDoubles(ac);
   if (da_p != da) FreeDoubles(da);
   if (ab_p != ab) FreeDoubles(ab);

 if (return_value > 0) return IP_Sign::POSITIVE;
 if (return_value < 0) return IP_Sign::NEGATIVE;
 if (return_value == 0) return IP_Sign::ZERO;
 return IP_Sign::UNDEFINED;
}

inline int inSphere_LEEEE(double a1x, double a1y, double a1z, double a2x, double a2y, double a2z, double at, double bx, double by, double bz, double cx, double cy, double cz, double dx, double dy, double dz, double ex, double ey, double ez)
{
   int ret;
   ret = inSphere_LEEEE_filtered(a1x, a1y, a1z, a2x, a2y, a2z, at, bx, by, bz, cx, cy, cz, dx, dy, dz, ex, ey, ez);
   if (ret != Filtered_Sign::UNCERTAIN) return ret;
   ret = inSphere_LEEEE_interval(a1x, a1y, a1z, a2x, a2y, a2z, at, bx, by, bz, cx, cy, cz, dx, dy, dz, ex, ey, ez);
   if (ret != Filtered_Sign::UNCERTAIN) return ret;
   return inSphere_LEEEE_exact(a1x, a1y, a1z, a2x, a2y, a2z, at, bx, by, bz, cx, cy, cz, dx, dy, dz, ex, ey, ez);
}

